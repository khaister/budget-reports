{"version":3,"sources":["localstorageUtils.js","uiRepo.js","dataUtils.js","repoUtils.js","localBudgetCache.js","ynabRepo.js","components/typeComponents.js","components/Loading.js","components/EnsureBudgetLoaded.js","styleVariables.js","components/Button.js","components/Icon.js","pages.js","components/SidebarMenuContent.js","components/SidebarMenu.js","components/PageWrapper.js","budgetUtils.js","commonHooks.js","components/Scroller.js","components/PageBreadcrumbs.js","components/PageActions.js","components/PageLayout.js","components/CollapsibleSection.js","components/Chart.js","components/CurrencyContext.js","components/Amount.js","components/ChartNumbers.js","components/SpendingChart.js","components/Modal.js","components/ChartSettingsModal.js","components/DayByDaySection.js","components/ListItem.js","components/EmptyText.js","components/NoTransactions.js","components/LabelWithMinorText.js","components/LabelWithTransactionCount.js","components/AmountWithPercentage.js","components/SeeAll.js","components/GenericEntitiesSection.js","components/DateSummaryTransaction.js","components/ToggleNode.js","components/DateSummary.js","components/RecentSpending.js","components/CurrentMonthPage.js","components/MonthlyChart.js","components/Toggle.js","components/ToggleWithLabel.js","components/MonthByMonthSettingsModal.js","components/MonthByMonthSection.js","components/IncomePage.js","components/Transaction.js","components/TransactionsSection.js","components/CurrentMonthGroupPage.js","components/CurrentMonthCategoryPage.js","components/GroupsPage.js","components/TransactionsByMonthSection.js","components/GroupPage.js","components/CategoriesState.js","components/CategoryPage.js","components/CategoryPayeePage.js","components/IncomeVsExpensesChart.js","components/BreakdownNode.js","components/Breakdown.js","components/ExpensesBreakdown.js","components/IncomeBreakdown.js","components/Breakdowns.js","components/IncomeVsExpensesPage.js","components/NetWorthChart.js","components/NetWorthAccounts.js","components/NetWorthChanges.js","components/NetWorthPage.js","components/InvestmentsPage.js","components/ProjectionsChart.js","components/ClickOff.js","components/ProjectionsSlider.js","components/ProjectionsPage.js","projectionUtils.js","components/Section.js","components/AccountsSelectionForm.js","components/SettingsInvestmentAccounts.js","components/SettingsMortgageAccounts.js","components/SettingsPage.js","components/PageContent.js","components/Unauthorized.js","components/ErrorPage.js","components/NotFound.js","components/ErrorBoundary.js","components/Budgets.js","components/App.js","index.js"],"names":["cache","getStorage","key","raw","localStorage","getItem","parsed","JSON","parse","setStorage","obj","setItem","stringify","e","SETTINGS","excludeFirstMonth","localStorageKey","default","excludeLastMonth","investmentAccounts","lastUpdated","mortgageAccounts","netWorthHiddenAccounts","spendingMonthsToCompare","trendsShowAverage","getSetting","settingsKey","budgetId","setting","Error","get","setSetting","value","previousSetting","Object","objectSpread","defineProperty","groupBy","func","arr","grouped","forEach","push","groupByProp","keyByProp","reduce","acc","curr","sumByProp","simpleMemoize","lastArgs","lastResult","_len","arguments","length","args","Array","_key","every","index","apply","notAny","predicates","arg","predicate","formatCurrency","utils","convertMilliUnitsToCurrencyAmount","GROUPS_TO_HIDE","sanitizeBudget","budget","transactionIdsFromSub","uniq","subtransactions","map","transaction","transaction_id","categoryGroups","category_groups","filter","group","includes","name","categories","category","deleted","activity","balance","budgeted","categoriesById","earliestDate","moment","subtract","MAX_MONTHS_TO_SHOW","format","currencyFormat","symbol","currency_format","currency_symbol","omit","accountsById","accounts","categoryGroupsById","payeesById","payees","months","sortBy","transactions","compose","amount","category_id","flatMap","id","subs","sub","payee_id","matchesProperty","reverse","dropWhile","date","applyDeltas","deltas","undefined","updater","prev","exists","newArr","item","concat","upsertBy","arraysToUpdate","cachedDetails","getAllBudgetDetails","setBudgetDetails","_ref","server_knowledge","details","newDetails","AUTHORIZE_URL","api","getBudgets","budgets","then","data","catch","matches","error","message","removeItem","getBudget","getBudgetById","_ref2","valueOf","authorized","getUpdatedBudget","budgetDetails","getBudgetDetails","_ref3","mergeBudgets","setLastLocation","window","location","hash","PageTitle","styled","div","_templateObject","LargeNumber","_templateObject2","StrongText","_templateObject3","SecondaryText","_templateObject4","MinorText","_templateObject5","Loading","react_default","a","createElement","style","height","display","flexDirection","alignItems","justifyContent","EnsureBudgetLoaded","_this$props","this","props","budgetLoaded","onRequestBudget","children","components_Loading","Component","selectedPlotBandColor","tinyColor","lighten","desaturate","toHexString","lighterPrimaryColor","lightPrimaryColor","negativeChartColor","Button","Button_templateObject","PrimaryButton","Button_templateObject2","library","add","faArrowLeft","faBars","faCaretDown","faChevronRight","faCog","faEllipsisV","faEye","faEyeSlash","faPencilAlt","faTimes","ICONS","arrow-left","bars","caret-down","chevron-right","cog","pencil","ellipsis-v","eye","eye-slash","times","PRESET_STYLES","faded","fontWeight","color","fontSize","Icon","icon","other","objectWithoutProperties","react_fontawesome_index_es","assign","makeLink","path","params","replace","_","part","pages","currentMonth","title","currentMonthGroup","categoryGroupId","paramProps","breadcrumbs","currentMonthCategory","categoryId","groups","categoryPayee","payeeId","income","incomeVsExpenses","netWorth","investments","projections","settings","Header","SidebarMenuContent_templateObject","IconWrapper","SidebarMenuContent_templateObject2","StyledLink","NavLink","SidebarMenuContent_templateObject3","active","SidebarMenuContent","hasMultipleBudgets","onCloseSidebar","react","SidebarMenuContent_PureHeader","page","_pages$page","SidebarMenuContent_PureStyledLink","to","matchPath","onClick","PureComponent","PureHeader","_this$props2","components_Icon","react_router_dom","PureStyledLink","SidebarMenu","state","open","handleSetOpen","_this","setState","handleTriggerClick","handleCloseSidebar","react_sidebar_esm","sidebar","components_SidebarMenuContent","onSetOpen","styles","backgroundColor","width","pointerEvents","sidebarTrigger","SidebarMenu_Trigger","Trigger","alignSelf","Container","PageWrapper_templateObject","PageWrapper","onAuthorize","components_EnsureBudgetLoaded","components_SidebarMenu","PageWrapper_Container","padding","flexShrink","borderTop","mapRaw","convert","cap","isStartingBalanceOrReconciliation","startingBalancePayeeId","find","payee","reconciliationPayeeId","isIncome","toBeBudgetedId","isTransfer","transfer_account_id","getTransactionMonth","slice","rejectNonCategoryTransations","tran","getFirstMonth","filteredTransactions","last","getPayeeNodes","divideBy","pick","sanitizeName","trim","useSelectedMonth","_useState","useState","_useState2","slicedToArray","selectedMonth","setSelectedMonth","selectedMonthRef","useRef","current","month","useSelectedEntityId","_useState3","_useState4","selectedEntityId","setSelectedEntityId","entityId","useTrendsShowAverage","_useState5","_useState6","showAverage","setShowAverage","useMonthExclusions","_useState7","_useState8","setExcludeFirstMonth","_useState9","_useState10","setExcludeLastMonth","firstBudgetMonth","firstMonth","lastMonth","m","getMonths","onSetExclusion","exclude","useFlagState","initial","_useState13","_useState14","flag","setFlag","Scroller","toBeScrolled","raf","scrollPositions","scrollTop","prevProps","prevState","snapshot","_this2","action","requestAnimationFrame","cancelAnimationFrame","_this3","ref","el","routes","values","pageKey","PageBreadcrumbs","react_router","exact","render","lineHeight","whiteSpace","match","paddingBottom","PageActions","_ref4","_ref5","_ref6","PageLayout_templateObject","Body","PageLayout_templateObject2","PageLayout","historyAction","fixedContent","content","PageLayout_Header","flexGrow","components_PageBreadcrumbs","components_PageActions","components_Scroller","CollapsibleSection_templateObject","fullWidth","CollapsibleSection_templateObject2","SettingsContainer","CollapsibleSection_templateObject3","CollapsibleSection_templateObject4","CollapsibleSection","actions","hasSettings","noPadding","onClickSettings","expanded","setExpanded","CollapsibleSection_Container","CollapsibleSection_Header","transform","rotate","marginLeft","es","isExpanded","CollapsibleSection_Body","CHART_DEFAULTS","chart","spacing","credits","enabled","legend","text","subtitle","tooltip","xAxis","tickLength","Chart","options","highcharts_react_min_default","highcharts","Highcharts","CurrencyContext","React","createContext","Amount","amountAfterDecimal","expectNegative","expectPositive","showCurrencySymbol","components_CurrencyContext","Consumer","nStr","x","split","x1","x2","rgx","test","addCommas","Math","abs","toFixed","defaultProps","ChartNumbers","numbers","alwaysRound","smallNumbers","some","textAlign","marginBottom","label","_ref3$isMoney","isMoney","decimalsToRound","components_Amount","isNumber","DateLabels","SpendingChart_templateObject","getData","transactionsByDate","today","cumulative","range","daysInMonth","numDays","padCharsStart","sumBy","SpendingChart","total","highlightFunction","monthsToCompare","highlightedTransactions","highlightSeries","type","enableMouseTracking","marker","animation","lineWidth","fillOpacity","firstDate","lastDate","lineData","day","firstDayOfWeek","parseInt","plotBands","num","from","comparisonSeries","numMonths","mix","toHex","spent","takeWhile","chartNumbers","components_ChartNumbers","components_Chart","labels","yAxis","visible","endOnTick","startOnTick","series","dashStyle","toConsumableArray","Modal_templateObject","Overlay","Modal_templateObject2","ModalContent","Modal_templateObject3","ensureNextTick","callback","Modal","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleTransitionEnd","animationState","document","body","appendChild","removeChild","onClose","shouldShow","createPortal","Modal_Container","opacity","onTransitionEnd","marginTop","ChartSettingsModal","onDecrementMonths","onIncrementMonths","components_Modal","marginRight","components_Button","DayByDaySection","_useFlagState","_useFlagState2","modalOpen","onCloseModal","onOpenModal","_useMonthsToCompare","_useState11","_useState12","setMonthsToCompare","newMonths","max","min","useMonthsToCompare","components_CollapsibleSection","components_SpendingChart","components_ChartSettingsModal","ListItem","ListItem_templateObject","isContinuing","EmptyText","EmptyText_templateObject","NoTransactions","components_EmptyText","LabelWithMinorText","minorText","inLink","bold","overflow","textOverflow","LabelWithTransactionCount","count","selected","showCount","components_LabelWithMinorText","AmountWithPercentage","SeeAll","pluralizedName","showAll","onToggle","mapWithKeys","keyToPluralizedName","category_group_id","GenericEntitiesSection","allMounted","handleToggleShowAll","_this$state","emptyName","entityKey","entityFunction","entitiesById","linkFunction","limitShowingProp","limitShowing","showAverageToggle","showTransactionCount","onClickEntity","onToggleAverage","_this$state2","entities","LIMIT","topEntities","otherEntities","components_NoTransactions","GenericEntitiesSection_GenericItemLink","components_SeeAll","MaybeLink","GenericItemLink","components_ListItem","components_LabelWithTransactionCount","GenericEntitiesSection_MaybeLink","evt","stopPropagation","components_AmountWithPercentage","StyledListItem","DateSummaryTransaction_templateObject","DateSummaryTransaction","memo","NodeWrapper","ToggleNode_templateObject","isCompact","ToggleNode_templateObject2","ToggleNode","valueRenderer","ToggleNode_IconWrapper","DateSummary_templateObject","DateSummary","onToggleExpanded","DateSummary_Container","components_ToggleNode","calendar","sameDay","nextDay","nextWeek","lastDay","lastWeek","sameElse","paddingLeft","components_DateSummaryTransaction","margin","RecentSpending","recentDays","n","startsWith","components_DateSummary","CurrentMonthPage","_useSelectedEntityId","_useSelectedEntityId2","selectedGroupId","onSelectGroupId","selectedGroup","transactionsThisMonth","components_PageLayout","components_DayByDaySection","components_RecentSpending","components_GenericEntitiesSection","groupId","MonthlyChart","average","stacked","onSelectMonth","yearLines","d","highlights","zIndex","findIndex","events","click","event","round","plotLines","gridLineColor","align","y","tickPixelInterval","plotOptions","stacking","s","valueFunction","radius","borderWidth","states","hover","brightness","Track","Toggle_templateObject","HEIGHT","on","Handle","Toggle_templateObject2","WIDTH","Toggle","ToggleWithLabel_templateObject","Label","ToggleWithLabel_templateObject2","ToggleWithLabel","checked","onChange","ToggleWithLabel_Container","target","components_Toggle","MonthByMonthSettingsModal","components_ToggleWithLabel","MonthByMonthSection","settingsModalOpen","setSettingsModalOpen","selectedMonthTotal","transactionsByMonth","false","highlighted","true","components_MonthlyChart","components_MonthByMonthSettingsModal","getFilteredTransactions","getFilteredIncomeTransactions","IncomePage","_useMonthExclusions","_useSelectedMonth","_useSelectedMonth2","selectedPayeeId","onSelectPayeeId","onToggleShowAverage","transactionsInSelectedMonth","components_MonthByMonthSection","Transaction","TransactionsSection","components_Transaction","CurrentMonthGroupPage","selectedCategoryId","onSelectCategoryId","allCategories","allTransactions","selectedCategory","categoryIds","transactionsInGroup","transactionsInGroupForMonth","available","components_TransactionsSection","CurrentMonthCategoryPage","transactionsInCategory","transactionsInCategoryForMonth","GroupsPage","onSelectGroup","_useTrendsShowAverage","_useTrendsShowAverage2","transactionsForMonth","TransactionsByMonthSection","selectedPayee","topTransactions","otherTransactions","GroupPage","onSelectCategory","categoryGroup","components_TransactionsByMonthSection","INITIAL_STATE","CategoriesState","cachedStates","handleSelectMonth","handleSelectGroup","handleSelectCategory","handleSelectPayee","onSelectPayee","handleSetExclusion","CategoryPage","transactionsForCategory","CategoryPayeePage","transactionsForCategoryAndPayee","IncomeVsExpensesChart","expenses","BreakdownNode","childrenMounted","handleToggleExpand","nodes","isTopLevel","hasChildNodes","BreakdownNode_Container","BreakdownNode_LeafNode","BreakdownNode_Nodes","Nodes","node","BreakdownNode_BreakdownNode","BreakdownNode_templateObject","LeafNode","BreakdownNode_NodeWrapper","Breakdown","components_BreakdownNode","ExpensesBreakdown","totalIncome","categoryNodes","payeeNodes","groupNodes","rootPayeeNodes","components_Breakdown","IncomeBreakdown","Breakdowns","expenseTransactions","incomeTransactions","components_ExpensesBreakdown","components_IncomeBreakdown","getSummaries","IncomeVsExpensesPage","showTotals","setShowTotals","allSummaries","summaries","summary","compact","totalExpenses","denominator","components_IncomeVsExpensesChart","components_Breakdowns","CREDIT_ACCOUNTS","NetWorthChart","groupedData","getStack","monthlyData","assets","asset","liabilities","liability","AccountBreakdown","hiddenAccounts","onToggleAccounts","propEq","ids","account","NetWorthAccounts","keyBy","accountsByGroup","startCase","getNodes","NetWorthAccounts_AccountBreakdown","NetWorthChanges","accountSummaries","totals","changes","t","i","year","change","years","keys","sort","v","positiveColor","negativeColor","groupByMonthAndAccount","mapValues","identity","getSummaryByAccount","groupedTransactions","getSelectedBalances","selectedMonthIndex","eq","NetWorthPage","_useHiddenAccounts","setHiddenAccounts","onToggleHiddenAccounts","shouldHide","newHiddenAccounts","useHiddenAccounts","selectedBalances","filterHidden","omitBy","selectedLiabilities","sum","b","selectedAssets","components_NetWorthChart","constant","components_NetWorthAccounts","components_NetWorthChanges","isContribution","account_id","isCapitalGainOrLoss","InvestmentsPage","selectedBreakdown","onSelectBreakdown","investmentTransactions","isInvestmentTransaction","transactionsInMonth","contribution","capitalGain","positiveIsRed","ProjectionsChart","investmentsProjection","mortgageProjection","amountNeededToRetire","yearsUntilRetirement","floor","isDescendant","parent","child","parentNode","ClickOff","handleBodyClick","onClickOff","addEventListener","removeEventListener","bodyEl","getElementsByTagName","ProjectionsSlider_templateObject","ProjectionsSlider","formatter","onBlur","onReset","rangeOptions","components_ClickOff","ProjectionsSlider_Container","ProjectionsSlider_Range","val","Range","adjustableEntries","adjustableEntriesByName","getInitialState","mortgageAccount","lastMonthTransactions","takeRightWhile","P","P1","c","prop","r","N","log","rate","paymentsLeft","projection","pow","mortgagePayment","principalProjection","getMortgageRate","remainingMortgagePayments","returnOnInvestments","investmentAccountIds","tr","reject","startForMonth","returnRates","trs","contributions","gains","returns","totalReturn","multiply","getReturnOnInvestments","averageContribution","transferAccountId","_ref7","accountId","diff","head","getAverageContribution","currentInvestments","getCurrentInvestments","averageExpenses","_ref8","startingBalanceId","mortgageAccountIds","getAverageExpensesWithoutMortgage","retirementReturns","retirementTaxRate","maxAverageExpenses","ceil","maxAverageContribution","ProjectionsPage","handleChange","parseFloat","handleSelectAdjusting","adjustingName","handleClearSelection","handleResetCalculation","calculation","_ref9","monthlyRate","getProjection","YEARS_TO_PROJECT","monthlyRetirementReturn","remainingMortgage","projectionWithRetirement","_ref10","monthsBeforeRetirement","monthlyExpenses","getProjectionWithRetirement","hasMortgage","projectionByYear","chunk","mortgageProjectionByYear","nameToRangeOptions","step","components_ProjectionsChart","ProjectionsPage_AdjustableEntry","isAdjusting","onSelect","ProjectionsPage_Entry","components_ProjectionsSlider","AdjustableEntry","highlightValue","isAdjustable","Entry","_ref4$formatter","borderRadius","Section","Section_templateObject","top","AccountsSelectionForm","_evt$target","SectionHeader","SettingsInvestmentAccounts_templateObject","SettingsInvestmentAccounts","onUpdateAccounts","investmentModalOpen","closeInvestmentModal","openInvestmentModal","potentialInvestmentAccounts","on_budget","investmentAccountsList","components_AccountsSelectionForm","accountsObject","SettingsMortgageAccounts_templateObject","SettingsMortgageAccounts","mortgageModalOpen","closeMortgageModal","openMortgageModal","potentialMortageAccounts","mortgageAccountList","SettingsMortgageAccounts_SectionHeader","Space","SettingsPage_templateObject","SettingsPage","components_Section","components_SettingsInvestmentAccounts","components_SettingsMortgageAccounts","getFilteredSpendingTransactions","components_CurrentMonthPage","components_CurrentMonthGroupPage","components_CurrentMonthCategoryPage","components_IncomePage","components_IncomeVsExpensesPage","components_NetWorthPage","components_InvestmentsPage","components_ProjectionsPage","components_SettingsPage","components_CategoriesState","components_GroupsPage","components_GroupPage","components_CategoryPage","components_CategoryPayeePage","nextProps","Unauthorized","ErrorPage_templateObject","ErrorPage","ErrorPage_Container","NotFound","components_ErrorPage","ErrorBoundary","hasError","Rollbar","token","Budgets","budgetsLoaded","onRequestBudgets","App","budgetIds","handleRequestBudgets","handleRequestBudget","handleAuthorize","hasToken","components_ErrorBoundary","components_Budgets","history","components_PageWrapper","pathname","Provider","components_PageContent","forceUpdate","component","components_Unauthorized","search","substring","decodeURIComponent","getAuthorizeToken","ynab","ReactDOM","components_App","getElementById"],"mappings":"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","file":"static/js/main.1e251dad.chunk.js","sourcesContent":["const cache = {};\r\n\r\nexport const getStorage = key => {\r\n  if (cache[key]) {\r\n    return cache[key];\r\n  }\r\n  const raw = localStorage.getItem(key);\r\n  if (raw) {\r\n    const parsed = JSON.parse(raw);\r\n    cache[key] = parsed;\r\n    return parsed;\r\n  }\r\n  return null;\r\n};\r\n\r\nexport const setStorage = (key, obj) => {\r\n  delete cache[key];\r\n\r\n  try {\r\n    localStorage.setItem(key, JSON.stringify(obj));\r\n  } catch (e) {\r\n    // Most likely exceeds storage quota\r\n  }\r\n};\r\n","import { getStorage, setStorage } from \"./localstorageUtils\";\r\nimport get from \"lodash/get\";\r\n\r\nconst SETTINGS = {\r\n  excludeFirstMonth: {\r\n    localStorageKey: \"budget-reports-exclude-first-month\",\r\n    default: false\r\n  },\r\n  excludeLastMonth: {\r\n    localStorageKey: \"budget-reports-exclude-last-month\",\r\n    default: false\r\n  },\r\n  investmentAccounts: {\r\n    localStorageKey: \"budget-reports-investment-accounts\",\r\n    default: {}\r\n  },\r\n  lastUpdated: {\r\n    localStorageKey: \"budget-reports-last-updated\",\r\n    default: null\r\n  },\r\n  mortgageAccounts: {\r\n    localStorageKey: \"budget-reports-mortgage-accounts\",\r\n    default: {}\r\n  },\r\n  netWorthHiddenAccounts: {\r\n    localStorageKey: \"budget-reports-networth-hidden-accounts\",\r\n    default: {}\r\n  },\r\n  spendingMonthsToCompare: {\r\n    localStorageKey: \"budget-reports-spending-months-to-compare\",\r\n    default: 3\r\n  },\r\n  trendsShowAverage: {\r\n    localStorageKey: \"budget-reports-trends-show-average\",\r\n    default: true\r\n  }\r\n};\r\n\r\nexport const getSetting = (settingsKey, budgetId) => {\r\n  const setting = SETTINGS[settingsKey];\r\n\r\n  if (!setting) {\r\n    throw new Error(\"not a valid settings key\");\r\n  }\r\n\r\n  return get(getStorage(setting.localStorageKey), budgetId, setting.default);\r\n};\r\n\r\nexport const setSetting = (settingsKey, budgetId, value) => {\r\n  const setting = SETTINGS[settingsKey];\r\n\r\n  if (!setting) {\r\n    throw new Error(\"not a valid settings key\");\r\n  }\r\n\r\n  const previousSetting = getStorage(setting.localStorageKey);\r\n\r\n  setStorage(setting.localStorageKey, {\r\n    ...previousSetting,\r\n    [budgetId]: value\r\n  });\r\n};\r\n","export const groupBy = func => arr => {\r\n  const grouped = {};\r\n  arr.forEach(obj => {\r\n    const key = func(obj);\r\n    if (!grouped[key]) {\r\n      grouped[key] = [];\r\n    }\r\n    grouped[key].push(obj);\r\n  });\r\n  return grouped;\r\n};\r\n\r\nexport const groupByProp = key => arr => {\r\n  const grouped = {};\r\n  arr.forEach(obj => {\r\n    if (!grouped[obj[key]]) {\r\n      grouped[obj[key]] = [];\r\n    }\r\n    grouped[obj[key]].push(obj);\r\n  });\r\n  return grouped;\r\n};\r\n\r\nexport const keyByProp = key => arr =>\r\n  arr.reduce((acc, curr) => ({ ...acc, [curr[key]]: curr }), {});\r\n\r\nexport const sumBy = func => arr =>\r\n  arr.reduce((acc, curr) => acc + func(curr), 0);\r\n\r\nexport const sumByProp = key => arr =>\r\n  arr.reduce((acc, curr) => acc + curr[key], 0);\r\n\r\nexport const simpleMemoize = func => {\r\n  let lastArgs = null;\r\n  let lastResult = null;\r\n  return (...args) => {\r\n    if (\r\n      lastArgs !== null &&\r\n      lastArgs.length === args.length &&\r\n      args.every((value, index) => value === lastArgs[index])\r\n    ) {\r\n      return lastResult;\r\n    }\r\n    lastArgs = args;\r\n    lastResult = func(...args);\r\n    return lastResult;\r\n  };\r\n};\r\n\r\nexport const notAny = predicates => arg =>\r\n  predicates.every(predicate => !predicate(arg));\r\n\r\nexport const upsertBy = (arr, key, obj, updater = (prev, curr) => curr) => {\r\n  let exists = false;\r\n  const newArr = arr.map(item => {\r\n    if (item[key] === obj[key]) {\r\n      exists = true;\r\n      return updater(item, obj);\r\n    }\r\n    return item;\r\n  });\r\n  return exists ? newArr : newArr.concat(obj);\r\n};\r\n","import { utils } from \"ynab\";\r\nimport moment from \"moment\";\r\nimport compose from \"lodash/fp/compose\";\r\nimport flatMap from \"lodash/fp/flatMap\";\r\nimport dropWhile from \"lodash/fp/dropWhile\";\r\nimport matchesProperty from \"lodash/fp/matchesProperty\";\r\nimport omit from \"lodash/fp/omit\";\r\nimport reverse from \"lodash/fp/reverse\";\r\nimport sortBy from \"lodash/fp/sortBy\";\r\nimport uniq from \"lodash/fp/uniq\";\r\nimport { upsertBy, keyByProp } from \"./dataUtils\";\r\n\r\nconst formatCurrency = utils.convertMilliUnitsToCurrencyAmount;\r\n\r\nconst GROUPS_TO_HIDE = [\"Internal Master Category\", \"Credit Card Payments\"];\r\n\r\nconst MAX_MONTHS_TO_SHOW = 240;\r\n\r\nexport const sanitizeBudget = budget => {\r\n  const transactionIdsFromSub = uniq(\r\n    budget.subtransactions.map(transaction => transaction.transaction_id)\r\n  );\r\n  const categoryGroups = budget.category_groups.filter(\r\n    group => !GROUPS_TO_HIDE.includes(group.name)\r\n  );\r\n  const categories = budget.categories\r\n    .filter(category => !category.deleted)\r\n    .map(category => ({\r\n      ...category,\r\n      activity: formatCurrency(category.activity),\r\n      balance: formatCurrency(category.balance),\r\n      budgeted: formatCurrency(category.budgeted)\r\n    }));\r\n  const categoriesById = keyByProp(\"id\")(categories);\r\n  const earliestDate = moment()\r\n    .subtract(MAX_MONTHS_TO_SHOW - 1, \"months\")\r\n    .format(\"YYYY-MM-01\");\r\n  const currencyFormat = {\r\n    symbol: budget.currency_format.currency_symbol\r\n  };\r\n\r\n  return {\r\n    ...omit([\"category_groups\", \"currency_format\"])(budget),\r\n    accountsById: keyByProp(\"id\")(budget.accounts),\r\n    categoryGroups,\r\n    categoryGroupsById: keyByProp(\"id\")(categoryGroups),\r\n    categories,\r\n    categoriesById,\r\n    currencyFormat,\r\n    payeesById: keyByProp(\"id\")(budget.payees),\r\n    months: sortBy(\"month\")(budget.months),\r\n    transactions: compose([\r\n      transactions =>\r\n        transactions.map(transaction => ({\r\n          ...transaction,\r\n          amount: formatCurrency(transaction.amount)\r\n        })),\r\n      // Not sure how this would happen, but seeing it in production\r\n      transactions =>\r\n        transactions.filter(\r\n          transaction =>\r\n            !transaction.category_id ||\r\n            !!categoriesById[transaction.category_id]\r\n        ),\r\n      flatMap(transaction =>\r\n        transactionIdsFromSub.includes(transaction.id)\r\n          ? compose([\r\n              subs =>\r\n                subs.map(sub =>\r\n                  omit(\"transaction_id\")({\r\n                    ...transaction,\r\n                    ...sub,\r\n                    payee_id: sub.payee_id || transaction.payee_id\r\n                  })\r\n                ),\r\n              subs =>\r\n                subs.filter(matchesProperty(\"transaction_id\", transaction.id))\r\n            ])(budget.subtransactions)\r\n          : transaction\r\n      ),\r\n      reverse,\r\n      dropWhile(transaction => transaction.date < earliestDate),\r\n      sortBy(\"date\"),\r\n      transactions =>\r\n        transactions.filter(\r\n          transaction => transaction.amount !== 0 && !transaction.deleted\r\n        )\r\n    ])(budget.transactions)\r\n  };\r\n};\r\n\r\nconst applyDeltas = (arr, deltas, key = \"id\", updater) =>\r\n  deltas.reduce((acc, curr) => upsertBy(acc, key, curr, updater), arr);\r\n\r\nconst arraysToUpdate = [\r\n  \"accounts\",\r\n  \"categories\",\r\n  \"category_groups\",\r\n  \"payee_locations\",\r\n  \"payees\",\r\n  \"scheduled_subtransactions\",\r\n  \"scheduled_transactions\",\r\n  \"subtransactions\",\r\n  \"transactions\"\r\n];\r\n\r\nexport const mergeBudgets = (budget, deltas) => ({\r\n  ...budget,\r\n  ...deltas,\r\n  ...arraysToUpdate.reduce(\r\n    (acc, curr) => ({\r\n      ...acc,\r\n      [curr]: applyDeltas(budget[curr], deltas[curr])\r\n    }),\r\n    {}\r\n  ),\r\n  months: applyDeltas(budget.months, deltas.months, \"month\", (prev, curr) => ({\r\n    ...prev,\r\n    ...curr,\r\n    categories: applyDeltas(prev.categories, curr.categories)\r\n  }))\r\n});\r\n","import get from \"lodash/fp/get\";\r\nimport { getStorage, setStorage } from \"./localstorageUtils\";\r\n\r\nconst BUDGET_DETAILS_STORAGE_KEY = \"ynab_budget_details\";\r\n\r\nlet cachedDetails = null;\r\n\r\nconst getAllBudgetDetails = () => {\r\n  if (cachedDetails) {\r\n    return cachedDetails;\r\n  }\r\n  cachedDetails = getStorage(BUDGET_DETAILS_STORAGE_KEY);\r\n  return cachedDetails;\r\n};\r\n\r\nexport const getBudgetDetails = id => get(id)(getAllBudgetDetails());\r\n\r\nexport const setBudgetDetails = ({ id, budget, server_knowledge }) => {\r\n  const details = getAllBudgetDetails();\r\n  const newDetails = {\r\n    ...details,\r\n    [id]: { budget, server_knowledge }\r\n  };\r\n  setStorage(BUDGET_DETAILS_STORAGE_KEY, newDetails);\r\n  cachedDetails = newDetails;\r\n};\r\n","import * as ynab from \"ynab\";\r\nimport moment from \"moment\";\r\nimport get from \"lodash/fp/get\";\r\nimport matches from \"lodash/fp/matches\";\r\nimport { getStorage, setStorage } from \"./localstorageUtils\";\r\nimport { setSetting, getSetting } from \"./uiRepo\";\r\nimport { sanitizeBudget, mergeBudgets } from \"./repoUtils\";\r\nimport { getBudgetDetails, setBudgetDetails } from \"./localBudgetCache\";\r\nimport { clientId, redirectUri } from \"./ynabConfig\";\r\n\r\nconst TOKEN_STORAGE_KEY = \"ynab_access_token\";\r\nconst BUDGETS_STORAGE_KEY = \"ynab_budgets\";\r\nconst LAST_LOCATION_KEY = \"budget-reports-last-location\";\r\n\r\nconst TIME_LIMIT_FOR_FULL_REFRESH = 8 * 1000;\r\n\r\nexport const AUTHORIZE_URL =\r\n  \"https://api.youneedabudget.com/oauth/authorize?client_id=\" +\r\n  clientId +\r\n  \"&redirect_uri=\" +\r\n  redirectUri +\r\n  \"&response_type=token\";\r\n\r\nexport const getAuthorizeToken = () => {\r\n  // check for hash route\r\n  if (window.location.hash[1] === \"/\") {\r\n    return localStorage.getItem(TOKEN_STORAGE_KEY);\r\n  }\r\n\r\n  const search = window.location.hash\r\n    .substring(1)\r\n    .replace(/&/g, '\",\"')\r\n    .replace(/=/g, '\":\"');\r\n\r\n  if (!search) {\r\n    return localStorage.getItem(TOKEN_STORAGE_KEY);\r\n  }\r\n\r\n  const token = get(\"access_token\")(\r\n    JSON.parse(\r\n      '{\"' + search + '\"}',\r\n      (key, value) => (key === \"\" ? value : decodeURIComponent(value))\r\n    )\r\n  );\r\n  localStorage.setItem(TOKEN_STORAGE_KEY, token);\r\n  window.location.hash = localStorage.getItem(LAST_LOCATION_KEY) || \"\";\r\n  localStorage.removeItem(LAST_LOCATION_KEY);\r\n\r\n  return token;\r\n};\r\n\r\nlet api = null;\r\n\r\nexport const initializeYnabApi = token => {\r\n  api = new ynab.api(token);\r\n};\r\n\r\nexport const getBudgets = () =>\r\n  api.budgets\r\n    .getBudgets()\r\n    .then(({ data }) => {\r\n      setStorage(BUDGETS_STORAGE_KEY, data);\r\n      return data;\r\n    })\r\n    .catch(e => {\r\n      if (\r\n        matches({\r\n          id: \"401\",\r\n          name: \"unauthorized\"\r\n        })(e.error) ||\r\n        e.message === \"Failed to fetch\"\r\n      ) {\r\n        localStorage.removeItem(TOKEN_STORAGE_KEY);\r\n        return getStorage(BUDGETS_STORAGE_KEY) || { budgets: [] };\r\n      }\r\n\r\n      throw e;\r\n    });\r\n\r\nconst getBudget = id =>\r\n  api.budgets\r\n    .getBudgetById(id)\r\n    .then(({ data }) => {\r\n      const { budget, server_knowledge } = data;\r\n\r\n      setBudgetDetails({ id, budget, server_knowledge });\r\n      setSetting(\"lastUpdated\", id, moment().valueOf());\r\n\r\n      return { budget: sanitizeBudget(budget), authorized: true };\r\n    })\r\n    .catch(e => {\r\n      if (\r\n        matches({ id: \"401\", name: \"unauthorized\" })(e.error) ||\r\n        e.message === \"Failed to fetch\"\r\n      ) {\r\n        localStorage.removeItem(TOKEN_STORAGE_KEY);\r\n        return {\r\n          budget: { categories: [], transactions: [], payees: [] },\r\n          authorized: false\r\n        };\r\n      }\r\n\r\n      throw e;\r\n    });\r\n\r\nexport const getUpdatedBudget = id => {\r\n  const budgetDetails = getBudgetDetails(id);\r\n\r\n  if (!budgetDetails) {\r\n    return getBudget(id);\r\n  }\r\n\r\n  if (\r\n    moment().valueOf() - getSetting(\"lastUpdated\", id) <\r\n    TIME_LIMIT_FOR_FULL_REFRESH\r\n  ) {\r\n    return getBudget(id);\r\n  }\r\n\r\n  return api.budgets\r\n    .getBudgetById(id, budgetDetails.server_knowledge)\r\n    .then(({ data }) => {\r\n      try {\r\n        const budget = mergeBudgets(budgetDetails.budget, data.budget);\r\n\r\n        setBudgetDetails({ id, budget, server_knowledge: data.server_knowledge });\r\n        setSetting(\"lastUpdated\", id, moment().valueOf());\r\n\r\n        return { budget: sanitizeBudget(budget), authorized: true };\r\n      } catch (e) {\r\n        return getBudget(id);\r\n      }\r\n    })\r\n    .catch(e => {\r\n      if (\r\n        matches({ id: \"401\", name: \"unauthorized\" })(e.error) ||\r\n        e.message === \"Failed to fetch\"\r\n      ) {\r\n        return {\r\n          budget: sanitizeBudget(budgetDetails.budget),\r\n          authorized: false\r\n        };\r\n      }\r\n\r\n      throw e;\r\n    });\r\n};\r\n\r\nexport const setLastLocation = () => {\r\n  localStorage.setItem(LAST_LOCATION_KEY, window.location.hash);\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const PageTitle = styled.div`\r\n  font-weight: 500;\r\n  font-size: 16px;\r\n  line-height: 24px;\r\n  color: #222;\r\n`;\r\n\r\nexport const LargeNumber = styled.div`\r\n  font-weight: 500;\r\n  font-size: 16px;\r\n  line-height: 24px;\r\n  color: #222;\r\n`;\r\n\r\nexport const StrongText = styled.div`\r\n  font-size: 14px;\r\n  line-height: 22px;\r\n  font-weight: 500;\r\n  color: #222;\r\n`;\r\n\r\nexport const SecondaryText = styled.div`\r\n  font-size: 13px;\r\n  line-height: 21px;\r\n  font-weight: 400;\r\n  color: #666;\r\n`;\r\n\r\nexport const MinorText = styled.div`\r\n  font-size: 11px;\r\n  line-height: 16px;\r\n  font-weight: 400;\r\n  color: #999;\r\n`;\r\n","import React from \"react\";\r\nimport { StrongText, SecondaryText } from \"./typeComponents\";\r\n\r\nconst Loading = () => (\r\n  <div\r\n    style={{\r\n      height: \"100vh\",\r\n      display: \"flex\",\r\n      flexDirection: \"column\",\r\n      alignItems: \"center\",\r\n      justifyContent: \"center\"\r\n    }}\r\n  >\r\n    <StrongText>Loading&hellip;</StrongText>\r\n    <SecondaryText>beep, beep, boop</SecondaryText>\r\n  </div>\r\n);\r\n\r\nLoading.propTypes = {};\r\n\r\nexport default Loading;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Loading from \"./Loading\";\r\n\r\nclass EnsureBudgetLoaded extends Component {\r\n  static propTypes = {\r\n    budgetId: PropTypes.string.isRequired,\r\n    budgetLoaded: PropTypes.bool.isRequired,\r\n    children: PropTypes.node.isRequired,\r\n    onRequestBudget: PropTypes.func.isRequired\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { budgetId, budgetLoaded, onRequestBudget } = this.props;\r\n\r\n    if (!budgetLoaded) {\r\n      onRequestBudget(budgetId);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (!this.props.budgetLoaded) {\r\n      return <Loading />\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default EnsureBudgetLoaded;\r\n","import tinyColor from \"tinycolor2\";\r\n\r\nexport const primaryColor = \"#4399ff\";\r\nexport const positiveColor = \"#2cbc2f\";\r\nexport const plotBandColor = \"#f2f2f2\";\r\nexport const negativeColor = \"red\";\r\nexport const selectedPlotBandColor = tinyColor(primaryColor)\r\n  .lighten(32)\r\n  .desaturate()\r\n  .toHexString();\r\nexport const lighterPrimaryColor = tinyColor(primaryColor)\r\n  .lighten(5)\r\n  .desaturate()\r\n  .toHexString();\r\nexport const lightPrimaryColor = tinyColor(primaryColor)\r\n  .lighten(25)\r\n  .desaturate()\r\n  .toHexString();\r\nexport const negativeChartColor = tinyColor(negativeColor)\r\n  .lighten(30)\r\n  .desaturate(60)\r\n  .toHexString();\r\n\r\nexport const iconWidth = 60;\r\n","import styled from \"styled-components\";\r\nimport { SecondaryText } from \"./typeComponents\";\r\nimport { primaryColor } from \"../styleVariables\";\r\n\r\nconst Button = styled(SecondaryText)`\r\n  display: inline-block;\r\n  user-select: none;\r\n  border: 1px solid #ccc;\r\n  padding: 4px 12px;\r\n  border-radius: 2px;\r\n\r\n  & + & {\r\n    margin-left: 5px;\r\n  }\r\n`;\r\n\r\nexport const PrimaryButton = styled(Button)`\r\n  background-color: ${primaryColor};\r\n  border-color: ${primaryColor};\r\n  color: #fff;\r\n`;\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport keys from \"lodash/fp/keys\";\r\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\r\nimport { faArrowLeft } from \"@fortawesome/free-solid-svg-icons/faArrowLeft\";\r\nimport { faBars } from \"@fortawesome/free-solid-svg-icons/faBars\";\r\nimport { faCaretDown } from \"@fortawesome/free-solid-svg-icons/faCaretDown\";\r\nimport { faChevronRight } from \"@fortawesome/free-solid-svg-icons/faChevronRight\";\r\nimport { faCog } from \"@fortawesome/free-solid-svg-icons/faCog\";\r\nimport { faEllipsisV } from \"@fortawesome/free-solid-svg-icons/faEllipsisV\";\r\nimport { faEye } from \"@fortawesome/free-solid-svg-icons/faEye\";\r\nimport { faEyeSlash } from \"@fortawesome/free-solid-svg-icons/faEyeSlash\";\r\nimport { faPencilAlt } from \"@fortawesome/free-solid-svg-icons/faPencilAlt\";\r\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons/faTimes\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nlibrary.add(\r\n  faArrowLeft,\r\n  faBars,\r\n  faCaretDown,\r\n  faChevronRight,\r\n  faCog,\r\n  faEllipsisV,\r\n  faEye,\r\n  faEyeSlash,\r\n  faPencilAlt,\r\n  faTimes\r\n);\r\n\r\nconst ICONS = {\r\n  \"arrow-left\": faArrowLeft,\r\n  bars: faBars,\r\n  \"caret-down\": faCaretDown,\r\n  \"chevron-right\": faChevronRight,\r\n  cog: faCog,\r\n  pencil: faPencilAlt,\r\n  \"ellipsis-v\": faEllipsisV,\r\n  eye: faEye,\r\n  \"eye-slash\": faEyeSlash,\r\n  times: faTimes\r\n};\r\n\r\nconst PRESET_STYLES = {\r\n  faded: {\r\n    fontWeight: 400,\r\n    color: \"#aaa\",\r\n    fontSize: 10\r\n  }\r\n};\r\n\r\nconst Icon = ({ icon, style, faded, ...other }) => (\r\n  <FontAwesomeIcon\r\n    {...other}\r\n    icon={ICONS[icon]}\r\n    style={{ ...style, ...(faded && PRESET_STYLES.faded) }}\r\n  />\r\n);\r\n\r\nIcon.propTypes = {\r\n  icon: PropTypes.oneOf(keys(ICONS)).isRequired,\r\n  faded: PropTypes.bool\r\n};\r\n\r\nexport default Icon;\r\n","import get from \"lodash/fp/get\";\r\n\r\nexport const makeLink = (path, params) =>\r\n  path.replace(/:([a-zA-Z]*)/g, (_, part) => params[part]);\r\n\r\nconst pages = {\r\n  currentMonth: {\r\n    path: \"/budgets/:budgetId/current\",\r\n    title: \"Current Month Spending\",\r\n    props: [\"budget\", \"currentMonth\", \"investmentAccounts\"]\r\n  },\r\n  currentMonthGroup: {\r\n    path: \"/budgets/:budgetId/current/:categoryGroupId\",\r\n    title: (params, budget) =>\r\n      budget.categoryGroupsById[params.categoryGroupId].name,\r\n    props: [\"budget\", \"currentMonth\"],\r\n    paramProps: [\"categoryGroupId\"],\r\n    breadcrumbs: [\"currentMonth\"]\r\n  },\r\n  currentMonthCategory: {\r\n    path: \"/budgets/:budgetId/current/:categoryGroupId/:categoryId\",\r\n    title: (params, budget) => budget.categoriesById[params.categoryId].name,\r\n    props: [\"budget\", \"currentMonth\"],\r\n    paramProps: [\"categoryId\", \"categoryGroupId\"],\r\n    breadcrumbs: [\"currentMonth\", \"currentMonthGroup\"]\r\n  },\r\n  groups: {\r\n    path: \"/budgets/:budgetId/groups\",\r\n    title: \"Spending Trends\",\r\n    props: [\"budget\"]\r\n  },\r\n  group: {\r\n    path: \"/budgets/:budgetId/groups/:categoryGroupId\",\r\n    title: (params, budget) =>\r\n      budget.categoryGroupsById[params.categoryGroupId].name,\r\n    props: [\"budget\"],\r\n    paramProps: [\"categoryGroupId\"],\r\n    breadcrumbs: [\"groups\"]\r\n  },\r\n  category: {\r\n    path: \"/budgets/:budgetId/groups/:categoryGroupId/categories/:categoryId\",\r\n    title: (params, budget) => budget.categoriesById[params.categoryId].name,\r\n    props: [\"budget\"],\r\n    paramProps: [\"categoryId\"],\r\n    breadcrumbs: [\"groups\", \"group\"]\r\n  },\r\n  categoryPayee: {\r\n    path:\r\n      \"/budgets/:budgetId/groups/:categoryGroupId/categories/:categoryId/payees/:payeeId\",\r\n    title: (params, budget) =>\r\n      get([\"payeesById\", params.payeeId, \"name\"], budget) || \"Payee Not Found\",\r\n    props: [\"budget\"],\r\n    paramProps: [\"categoryId\", \"payeeId\"],\r\n    breadcrumbs: [\"groups\", \"group\", \"category\"]\r\n  },\r\n  income: {\r\n    path: \"/budgets/:budgetId/income\",\r\n    title: \"Income Trends\",\r\n    props: [\"budget\"]\r\n  },\r\n  incomeVsExpenses: {\r\n    path: \"/budgets/:budgetId/income-vs-expenses\",\r\n    title: \"Income vs Expenses\",\r\n    props: [\"budget\", \"investmentAccounts\"]\r\n  },\r\n  netWorth: {\r\n    path: \"/budgets/:budgetId/net-worth\",\r\n    title: \"Net Worth\",\r\n    props: [\"budget\", \"investmentAccounts\", \"mortgageAccounts\"]\r\n  },\r\n  investments: {\r\n    path: \"/budgets/:budgetId/investments\",\r\n    title: \"Investments\",\r\n    props: [\"budget\", \"investmentAccounts\"]\r\n  },\r\n  projections: {\r\n    path: \"/budgets/:budgetId/projections\",\r\n    title: \"Retirement Calculator\",\r\n    props: [\"budget\", \"investmentAccounts\", \"mortgageAccounts\"]\r\n  },\r\n  settings: {\r\n    path: \"/budgets/:budgetId/settings\",\r\n    title: \"Budget Settings\",\r\n    props: [\r\n      \"budget\",\r\n      \"investmentAccounts\",\r\n      \"mortgageAccounts\",\r\n      \"onUpdateAccounts\"\r\n    ]\r\n  }\r\n};\r\n\r\nexport default pages;\r\n","import React, { Fragment, PureComponent } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport { matchPath } from \"react-router\";\r\nimport styled from \"styled-components\";\r\nimport pages, { makeLink } from \"../pages\";\r\nimport Icon from \"./Icon\";\r\nimport { selectedPlotBandColor, iconWidth } from \"../styleVariables\";\r\n\r\nconst Header = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: stretch;\r\n  height: 60px;\r\n`;\r\n\r\nconst IconWrapper = styled.div`\r\n  width: ${iconWidth}px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nconst StyledLink = styled(NavLink)`\r\n  color: inherit;\r\n  display: flex;\r\n  align-items: center;\r\n  height: 60px;\r\n  padding: 0 20px;\r\n  background-color: ${props => props.active && selectedPlotBandColor};\r\n`;\r\n\r\nclass SidebarMenuContent extends PureComponent {\r\n  static propTypes = {\r\n    budgetId: PropTypes.string.isRequired,\r\n    hasMultipleBudgets: PropTypes.bool.isRequired,\r\n    location: PropTypes.string.isRequired,\r\n    onCloseSidebar: PropTypes.func.isRequired\r\n  };\r\n\r\n  render() {\r\n    const { budgetId, hasMultipleBudgets, location, onCloseSidebar } = this.props;\r\n\r\n    return (\r\n      <Fragment>\r\n        <PureHeader onCloseSidebar={onCloseSidebar} budgetId={budgetId} />\r\n        {[\r\n          \"currentMonth\",\r\n          \"groups\",\r\n          \"income\",\r\n          \"incomeVsExpenses\",\r\n          \"netWorth\",\r\n          \"investments\",\r\n          \"projections\"\r\n        ].map(page => {\r\n          const { path, title } = pages[page];\r\n\r\n          return (\r\n            <PureStyledLink\r\n              key={path}\r\n              to={makeLink(path, { budgetId })}\r\n              active={matchPath(location, { path })}\r\n              onClick={onCloseSidebar}\r\n            >\r\n              {title}\r\n            </PureStyledLink>\r\n          );\r\n        })}\r\n        {hasMultipleBudgets && (\r\n          <PureStyledLink to=\"/\">Switch Budgets</PureStyledLink>\r\n        )}\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nclass PureHeader extends PureComponent {\r\n  render() {\r\n    const { onCloseSidebar, budgetId } = this.props;\r\n    return (\r\n      <Header>\r\n        <IconWrapper onClick={onCloseSidebar}>\r\n          <Icon icon=\"times\" />\r\n        </IconWrapper>\r\n        <Link\r\n          to={makeLink(pages.settings.path, { budgetId })}\r\n          style={{ display: \"flex\", color: \"inherit\" }}\r\n          onClick={onCloseSidebar}\r\n        >\r\n          <IconWrapper>\r\n            <Icon icon=\"cog\" />\r\n          </IconWrapper>\r\n        </Link>\r\n      </Header>\r\n    );\r\n  }\r\n}\r\n\r\nclass PureStyledLink extends PureComponent {\r\n  render() {\r\n    return <StyledLink {...this.props} />;\r\n  }\r\n}\r\n\r\nexport default SidebarMenuContent;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Sidebar from \"react-sidebar\";\r\nimport { iconWidth } from \"../styleVariables\";\r\nimport Icon from \"./Icon\";\r\nimport SidebarMenuContent from \"./SidebarMenuContent\";\r\n\r\nclass SidebarMenu extends Component {\r\n  static propTypes = {\r\n    budgetId: PropTypes.string.isRequired,\r\n    children: PropTypes.func.isRequired,\r\n    hasMultipleBudgets: PropTypes.bool.isRequired,\r\n    location: PropTypes.string.isRequired\r\n  };\r\n\r\n  state = { open: false };\r\n\r\n  handleSetOpen = open => {\r\n    this.setState({ open });\r\n  };\r\n\r\n  handleTriggerClick = () => {\r\n    this.setState({ open: true });\r\n  };\r\n\r\n  handleCloseSidebar = () => {\r\n    this.setState({ open: false });\r\n  };\r\n\r\n  render() {\r\n    const { budgetId, children, hasMultipleBudgets, location } = this.props;\r\n    const { open } = this.state;\r\n\r\n    return (\r\n      <Sidebar\r\n        sidebar={\r\n          <SidebarMenuContent\r\n            budgetId={budgetId}\r\n            hasMultipleBudgets={hasMultipleBudgets}\r\n            location={location}\r\n            onCloseSidebar={this.handleCloseSidebar}\r\n          />\r\n        }\r\n        open={open}\r\n        onSetOpen={this.handleSetOpen}\r\n        styles={{\r\n          sidebar: {\r\n            backgroundColor: \"#fff\",\r\n            width: 280,\r\n            pointerEvents: !open && \"none\"\r\n          }\r\n        }}\r\n      >\r\n        {children({\r\n          sidebarTrigger: <Trigger onClick={this.handleTriggerClick} />\r\n        })}\r\n      </Sidebar>\r\n    );\r\n  }\r\n}\r\n\r\nconst Trigger = ({ onClick }) => (\r\n  <div\r\n    onClick={onClick}\r\n    style={{\r\n      alignSelf: \"stretch\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      justifyContent: \"center\",\r\n      width: iconWidth\r\n    }}\r\n  >\r\n    <Icon icon=\"bars\" />\r\n  </div>\r\n);\r\n\r\nexport default SidebarMenu;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport EnsureBudgetLoaded from \"./EnsureBudgetLoaded\";\r\nimport { PrimaryButton } from \"./Button\";\r\nimport SidebarMenu from \"./SidebarMenu\";\r\n\r\nconst Container = styled.div`\r\n  height: 100%;\r\n  overflow: hidden;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst PageWrapper = ({\r\n  authorized,\r\n  budgetId,\r\n  budgetLoaded,\r\n  children,\r\n  hasMultipleBudgets,\r\n  location,\r\n  onAuthorize,\r\n  onRequestBudget\r\n}) => (\r\n  <EnsureBudgetLoaded\r\n    budgetId={budgetId}\r\n    budgetLoaded={budgetLoaded}\r\n    onRequestBudget={onRequestBudget}\r\n  >\r\n    <SidebarMenu\r\n      budgetId={budgetId}\r\n      location={location}\r\n      hasMultipleBudgets={hasMultipleBudgets}\r\n    >\r\n      {({ sidebarTrigger }) => (\r\n        <Container>\r\n          {children({ sidebarTrigger })}\r\n          {!authorized && (\r\n            <div\r\n              style={{\r\n                padding: \"15px 20px\",\r\n                backgroundColor: \"#fff\",\r\n                display: \"flex\",\r\n                justifyContent: \"space-between\",\r\n                alignItems: \"center\",\r\n                flexShrink: 0,\r\n                borderTop: \"1px solid #ccc\"\r\n              }}\r\n            >\r\n              Your authorization expired.\r\n              <PrimaryButton onClick={onAuthorize}>Reauthorize</PrimaryButton>\r\n            </div>\r\n          )}\r\n        </Container>\r\n      )}\r\n    </SidebarMenu>\r\n  </EnsureBudgetLoaded>\r\n);\r\n\r\nPageWrapper.propTypes = {\r\n  authorized: PropTypes.bool.isRequired,\r\n  budgetId: PropTypes.string.isRequired,\r\n  budgetLoaded: PropTypes.bool.isRequired,\r\n  children: PropTypes.func.isRequired,\r\n  hasMultipleBudgets: PropTypes.bool.isRequired,\r\n  location: PropTypes.string.isRequired,\r\n  onAuthorize: PropTypes.func.isRequired,\r\n  onRequestBudget: PropTypes.func.isRequired\r\n};\r\n\r\nexport default PageWrapper;\r\n","import compose from \"lodash/fp/compose\";\r\nimport pick from \"lodash/fp/pick\";\r\nimport mapRaw from \"lodash/fp/map\";\r\nimport get from \"lodash/fp/get\";\r\nimport last from \"lodash/fp/last\";\r\nimport { groupByProp, simpleMemoize, sumByProp } from \"./dataUtils\";\r\n\r\nconst map = mapRaw.convert({ cap: false });\r\n\r\nexport const isStartingBalanceOrReconciliation = simpleMemoize(budget => {\r\n  const startingBalancePayeeId = get(\"id\")(\r\n    budget.payees.find(payee => payee.name === \"Starting Balance\")\r\n  );\r\n  const reconciliationPayeeId = get(\"id\")(\r\n    budget.payees.find(\r\n      payee => payee.name === \"Reconciliation Balance Adjustment\"\r\n    )\r\n  );\r\n\r\n  return transaction =>\r\n    transaction.payee_id === startingBalancePayeeId ||\r\n    transaction.payee_id === reconciliationPayeeId;\r\n});\r\n\r\nexport const isIncome = simpleMemoize(budget => {\r\n  const toBeBudgetedId = get(\"id\")(\r\n    budget.categories.find(category => category.name === \"To be Budgeted\")\r\n  );\r\n  return transaction => transaction.category_id === toBeBudgetedId;\r\n});\r\n\r\nexport const isTransfer = (investmentAccounts = {}) => transaction =>\r\n  !transaction.category_id ||\r\n  !!investmentAccounts[transaction.transfer_account_id];\r\n\r\nexport const getTransactionMonth = transaction => transaction.date.slice(0, 7);\r\n\r\nconst rejectNonCategoryTransations = simpleMemoize(transactions =>\r\n  transactions.filter(tran => !!tran.category_id)\r\n);\r\n\r\nexport const getFirstMonth = budget => {\r\n  const filteredTransactions = rejectNonCategoryTransations(\r\n    budget.transactions\r\n  );\r\n\r\n  return filteredTransactions.length\r\n    ? getTransactionMonth(last(filteredTransactions))\r\n    : undefined;\r\n};\r\n\r\nexport const getPayeeNodes = ({ payeesById, transactions }, divideBy = 1) =>\r\n  compose([\r\n    map((transactions, payeeId) => ({\r\n      ...(payeesById[payeeId]\r\n        ? pick([\"id\", \"name\"])(payeesById[payeeId])\r\n        : { id: \"no-payee\", name: \"(no payee)\" }),\r\n      amount: sumByProp(\"amount\")(transactions) / divideBy\r\n    })),\r\n    groupByProp(\"payee_id\")\r\n  ])(transactions);\r\n\r\nexport const sanitizeName = name => name.replace(/[^a-zA-Z0-9 ]/g, \"\").trim();\r\n","import { useRef, useState } from \"react\";\r\nimport moment from \"moment\";\r\nimport { getSetting, setSetting } from \"./uiRepo\";\r\nimport { getFirstMonth } from \"./budgetUtils\";\r\n\r\nconst MAX_MONTHS_TO_COMPARE = 12;\r\n\r\nexport const useSelectedMonth = () => {\r\n  const [selectedMonth, setSelectedMonth] = useState(null);\r\n  const selectedMonthRef = useRef(selectedMonth);\r\n  selectedMonthRef.current = selectedMonth;\r\n\r\n  const onSelectMonth = month => {\r\n    setSelectedMonth(month === selectedMonthRef.current ? null : month);\r\n  };\r\n\r\n  return [selectedMonth, onSelectMonth];\r\n};\r\n\r\nexport const useSelectedEntityId = () => {\r\n  const [selectedEntityId, setSelectedEntityId] = useState(null);\r\n  const onSelectEntityId = entityId => {\r\n    setSelectedEntityId(entityId === selectedEntityId ? null : entityId);\r\n  };\r\n\r\n  return [selectedEntityId, onSelectEntityId];\r\n};\r\n\r\nexport const useTrendsShowAverage = budgetId => {\r\n  const [showAverage, setShowAverage] = useState(\r\n    getSetting(\"trendsShowAverage\", budgetId)\r\n  );\r\n  const onToggleShowAverage = () => {\r\n    setShowAverage(!showAverage);\r\n    setSetting(\"trendsShowAverage\", budgetId, !showAverage);\r\n  };\r\n\r\n  return [showAverage, onToggleShowAverage];\r\n};\r\n\r\nconst getMonths = (firstMonth, lastMonth) => {\r\n  const months = [firstMonth];\r\n  let m = firstMonth;\r\n\r\n  while (m !== lastMonth) {\r\n    m = moment(m)\r\n      .add(1, \"months\")\r\n      .format(\"YYYY-MM\");\r\n    months.push(m);\r\n  }\r\n\r\n  return months;\r\n};\r\n\r\nexport const useMonthExclusions = budget => {\r\n  const [excludeFirstMonth, setExcludeFirstMonth] = useState(\r\n    getSetting(\"excludeFirstMonth\", budget.id)\r\n  );\r\n  const [excludeLastMonth, setExcludeLastMonth] = useState(\r\n    getSetting(\"excludeLastMonth\", budget.id)\r\n  );\r\n\r\n  const firstBudgetMonth = getFirstMonth(budget);\r\n  const firstMonth = excludeFirstMonth\r\n    ? moment(firstBudgetMonth)\r\n        .add(1, \"months\")\r\n        .format(\"YYYY-MM\")\r\n    : firstBudgetMonth;\r\n  const lastMonth = excludeLastMonth\r\n    ? moment()\r\n        .subtract(1, \"months\")\r\n        .format(\"YYYY-MM\")\r\n    : moment().format(\"YYYY-MM\");\r\n  const months = getMonths(firstMonth, lastMonth);\r\n\r\n  const onSetExclusion = ({ month, exclude }) => {\r\n    if (month === \"first\") {\r\n      setExcludeFirstMonth(exclude);\r\n      setSetting(\"excludeFirstMonth\", budget.id, exclude);\r\n    } else {\r\n      setExcludeLastMonth(exclude);\r\n      setSetting(\"excludeLastMonth\", budget.id, exclude);\r\n    }\r\n  };\r\n\r\n  return { excludeFirstMonth, excludeLastMonth, months, onSetExclusion };\r\n};\r\n\r\nexport const useMonthsToCompare = budgetId => {\r\n  const [monthsToCompare, setMonthsToCompare] = useState(\r\n    getSetting(\"spendingMonthsToCompare\", budgetId)\r\n  );\r\n\r\n  const onDecrementMonths = () => {\r\n    const newMonths = Math.max(monthsToCompare - 1, 0);\r\n    setMonthsToCompare(newMonths);\r\n    setSetting(\"spendingMonthsToCompare\", budgetId, newMonths);\r\n  };\r\n\r\n  const onIncrementMonths = () => {\r\n    const newMonths = Math.min(monthsToCompare + 1, MAX_MONTHS_TO_COMPARE);\r\n    setMonthsToCompare(newMonths);\r\n    setSetting(\"spendingMonthsToCompare\", budgetId, newMonths);\r\n  };\r\n\r\n  return { monthsToCompare, onDecrementMonths, onIncrementMonths };\r\n};\r\n\r\nexport const useFlagState = initial => {\r\n  const [flag, setFlag] = useState(initial);\r\n\r\n  return [\r\n    flag,\r\n    () => {\r\n      setFlag(false);\r\n    },\r\n    () => {\r\n      setFlag(true);\r\n    },\r\n    () => {\r\n      setFlag(!flag);\r\n    }\r\n  ];\r\n};\r\n","import { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Scroller extends Component {\r\n  static propTypes = {\r\n    action: PropTypes.string.isRequired,\r\n    children: PropTypes.func.isRequired,\r\n    location: PropTypes.string.isRequired\r\n  };\r\n\r\n  toBeScrolled = null;\r\n\r\n  raf = null;\r\n\r\n  scrollPositions = {};\r\n\r\n  getSnapshotBeforeUpdate() {\r\n    return { scrollTop: this.toBeScrolled.scrollTop };\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    const { action, location } = this.props;\r\n\r\n    if (location === prevProps.location) {\r\n      return;\r\n    }\r\n\r\n    if (action === \"POP\") {\r\n      this.scrollPositions[prevProps.location] = snapshot.scrollTop;\r\n      this.raf = requestAnimationFrame(() => {\r\n        this.toBeScrolled.scrollTop = this.scrollPositions[location] || 0;\r\n      });\r\n    }\r\n\r\n    if (action === \"PUSH\") {\r\n      this.scrollPositions[prevProps.location] = snapshot.scrollTop;\r\n      this.raf = requestAnimationFrame(() => {\r\n        this.toBeScrolled.scrollTop = 0;\r\n      });\r\n    }\r\n\r\n    if (action === \"REPLACE\") {\r\n      this.raf = requestAnimationFrame(() => {\r\n        this.toBeScrolled.scrollTop = 0;\r\n      });\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    cancelAnimationFrame(this.raf);\r\n  }\r\n\r\n  render() {\r\n    return this.props.children({\r\n      ref: el => {\r\n        this.toBeScrolled = el;\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default Scroller;\r\n","import React, { Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link, Route, Switch } from \"react-router-dom\";\r\nimport values from \"lodash/fp/values\";\r\nimport pages, { makeLink } from \"../pages\";\r\nimport { MinorText } from \"./typeComponents\";\r\nimport Icon from \"./Icon\";\r\n\r\nconst routes = values(pages)\r\n  .filter(page => !!page.breadcrumbs)\r\n  .map(page => ({\r\n    path: page.path,\r\n    breadcrumbs: page.breadcrumbs.map(pageKey => ({\r\n      title: pages[pageKey].title,\r\n      path: pages[pageKey].path\r\n    }))\r\n  }));\r\n\r\nconst PageBreadcrumbs = ({ budget }) =>\r\n  budget ? (\r\n    <Switch>\r\n      {routes.map(({ path, breadcrumbs }) => (\r\n        <Route\r\n          key={path}\r\n          path={path}\r\n          exact\r\n          render={props => (\r\n            <MinorText style={{ lineHeight: 1, whiteSpace: \"normal\" }}>\r\n              {breadcrumbs.map(({ title, path }, index) => (\r\n                <Fragment key={path}>\r\n                  <Link\r\n                    to={makeLink(path, props.match.params)}\r\n                    style={{\r\n                      paddingBottom: 8,\r\n                      display: \"inline-block\"\r\n                    }}\r\n                  >\r\n                    {typeof title === \"function\"\r\n                      ? title(props.match.params, budget)\r\n                      : title}\r\n                  </Link>\r\n                  {index !== breadcrumbs.length - 1 && (\r\n                    <Icon\r\n                      icon=\"chevron-right\"\r\n                      style={{ padding: \"0 5px\", fontSize: 8 }}\r\n                    />\r\n                  )}\r\n                </Fragment>\r\n              ))}\r\n            </MinorText>\r\n          )}\r\n        />\r\n      ))}\r\n    </Switch>\r\n  ) : null;\r\n\r\nPageBreadcrumbs.propTypes = {\r\n  budget: PropTypes.object\r\n};\r\n\r\nexport default PageBreadcrumbs;\r\n","import React from \"react\";\r\nimport pages, { makeLink } from \"../pages\";\r\nimport { Switch, Route, Link } from \"react-router-dom\";\r\nimport { SecondaryText } from \"./typeComponents\";\r\n\r\nconst PageActions = () => (\r\n  <Switch>\r\n    <Route\r\n      path={pages.currentMonth.path}\r\n      exact\r\n      render={({ match }) => (\r\n        <SecondaryText>\r\n          <Link to={makeLink(pages.groups.path, match.params)}>\r\n            Past Months\r\n          </Link>\r\n        </SecondaryText>\r\n      )}\r\n    />\r\n    <Route\r\n      path={pages.currentMonthGroup.path}\r\n      exact\r\n      render={({ match }) => (\r\n        <SecondaryText>\r\n          <Link to={makeLink(pages.group.path, match.params)}>Past Months</Link>\r\n        </SecondaryText>\r\n      )}\r\n    />\r\n    <Route\r\n      path={pages.currentMonthCategory.path}\r\n      exact\r\n      render={({ match }) => (\r\n        <SecondaryText>\r\n          <Link to={makeLink(pages.category.path, match.params)}>\r\n            Past Months\r\n          </Link>\r\n        </SecondaryText>\r\n      )}\r\n    />\r\n    <Route\r\n      path={pages.groups.path}\r\n      exact\r\n      render={({ match }) => (\r\n        <SecondaryText>\r\n          <Link to={makeLink(pages.currentMonth.path, match.params)}>\r\n            Current Month\r\n          </Link>\r\n        </SecondaryText>\r\n      )}\r\n    />\r\n    <Route\r\n      path={pages.group.path}\r\n      exact\r\n      render={({ match }) => (\r\n        <SecondaryText>\r\n          <Link to={makeLink(pages.currentMonthGroup.path, match.params)}>\r\n            Current Month\r\n          </Link>\r\n        </SecondaryText>\r\n      )}\r\n    />\r\n    <Route\r\n      path={pages.category.path}\r\n      exact\r\n      render={({ match }) => (\r\n        <SecondaryText>\r\n          <Link to={makeLink(pages.currentMonthCategory.path, match.params)}>\r\n            Current Month\r\n          </Link>\r\n        </SecondaryText>\r\n      )}\r\n    />\r\n  </Switch>\r\n);\r\n\r\nPageActions.propTypes = {};\r\n\r\nexport default PageActions;\r\n","import React, { Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport { PageTitle } from \"./typeComponents\";\r\nimport Scroller from \"./Scroller\";\r\nimport PageBreadcrumbs from \"./PageBreadcrumbs\";\r\nimport PageActions from \"./PageActions\";\r\n\r\nconst Header = styled.div`\r\n  flex-shrink: 0;\r\n  display: flex;\r\n  align-items: center;\r\n  height: 60px;\r\n  padding-left: 0;\r\n  padding-right: 20px;\r\n  background-color: #fff;\r\n  background-clip: padding-box;\r\n  border-bottom: 2px solid rgba(0, 0, 0, 0.1);\r\n  white-space: pre;\r\n  user-select: none;\r\n`;\r\n\r\nconst Body = styled.div`\r\n  flex-grow: 1;\r\n  overflow-y: auto;\r\n`;\r\n\r\nconst PageLayout = ({\r\n  sidebarTrigger, // from PageWrapper\r\n  historyAction, // from PageWrapper\r\n  location, // from PageWrapper\r\n  budget,\r\n  title,\r\n  breadcrumbs,\r\n  fixedContent,\r\n  content\r\n}) => (\r\n  <Fragment>\r\n    <Header>\r\n      {sidebarTrigger}\r\n      <div style={{ flexGrow: 1 }}>\r\n        <PageBreadcrumbs budget={budget} />\r\n        <PageTitle style={{ lineHeight: 1 }}>{title}</PageTitle>\r\n      </div>\r\n      <PageActions />\r\n    </Header>\r\n    {fixedContent}\r\n    <Scroller action={historyAction} location={location}>\r\n      {({ ref }) => <Body ref={ref}>{content}</Body>}\r\n    </Scroller>\r\n  </Fragment>\r\n);\r\n\r\nPageLayout.propTypes = {\r\n  sidebarTrigger: PropTypes.node.isRequired,\r\n  historyAction: PropTypes.string.isRequired,\r\n  location: PropTypes.string.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  budget: PropTypes.object,\r\n  breadcrumbs: PropTypes.node,\r\n  fixedContent: PropTypes.node,\r\n  content: PropTypes.node\r\n};\r\n\r\nexport default PageLayout;\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport AnimateHeight from \"react-animate-height-auto\";\r\nimport { StrongText } from \"./typeComponents\";\r\nimport Icon from \"./Icon\";\r\n\r\nconst Container = styled.div`\r\n  margin: ${props => (props.fullWidth ? \"0\" : \"2px\")};\r\n  background-color: #fff;\r\n  background-clip: padding-box;\r\n  border: ${props => (props.fullWidth ? \"0\" : \"1px\")} solid rgba(0, 0, 0, 0.05);\r\n  border-bottom-width: 1px;\r\n  border-radius: 2px;\r\n`;\r\n\r\nconst Header = styled(StrongText)`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 15px 20px;\r\n  user-select: none;\r\n`;\r\n\r\nconst SettingsContainer = styled.div`\r\n  padding: 0 10px;\r\n  margin-right: -10px;\r\n  align-self: stretch;\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: 5px;\r\n`;\r\n\r\nconst Body = styled.div`\r\n  padding: 0 ${props => (props.fullWidth ? \"22px\" : \"20px\")} 15px;\r\n`;\r\n\r\nconst CollapsibleSection = ({\r\n  actions,\r\n  children,\r\n  fullWidth,\r\n  hasSettings,\r\n  noPadding,\r\n  title,\r\n  onClickSettings\r\n}) => {\r\n  const [expanded, setExpanded] = useState(true);\r\n\r\n  return (\r\n    <Container fullWidth={fullWidth}>\r\n      <Header>\r\n        <div\r\n          style={{ display: \"flex\", alignItems: \"center\" }}\r\n          onClick={() => {\r\n            setExpanded(!expanded);\r\n          }}\r\n        >\r\n          {title}\r\n          <Icon\r\n            icon=\"chevron-right\"\r\n            transform={{ rotate: expanded ? 90 : 0 }}\r\n            style={{ marginLeft: 10 }}\r\n            faded\r\n          />\r\n        </div>\r\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n          {expanded && actions}\r\n          {hasSettings &&\r\n            expanded && (\r\n              <SettingsContainer onClick={onClickSettings}>\r\n                <Icon icon=\"cog\" faded />\r\n              </SettingsContainer>\r\n            )}\r\n        </div>\r\n      </Header>\r\n      <AnimateHeight isExpanded={expanded}>\r\n        <Body style={{ padding: noPadding && 0 }}>{children}</Body>\r\n      </AnimateHeight>\r\n    </Container>\r\n  );\r\n};\r\n\r\nCollapsibleSection.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  actions: PropTypes.node,\r\n  fullWidth: PropTypes.bool,\r\n  hasSettings: PropTypes.bool,\r\n  noPadding: PropTypes.bool,\r\n  onClickSettings: PropTypes.func\r\n};\r\n\r\nexport default CollapsibleSection;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\n\r\nconst CHART_DEFAULTS = {\r\n  chart: { height: 240, spacing: [0, 0, 0, 0] },\r\n  credits: { enabled: false },\r\n  legend: { enabled: false },\r\n  title: { text: \"\" },\r\n  subtitle: { text: \"\" },\r\n  tooltip: { enabled: false },\r\n  xAxis: { tickLength: 0 }\r\n};\r\n\r\nconst Chart = ({ options }) => (\r\n  <HighchartsReact\r\n    highcharts={Highcharts}\r\n    options={{\r\n      ...CHART_DEFAULTS,\r\n      ...options,\r\n      chart: { ...CHART_DEFAULTS.chart, ...options.chart },\r\n      xAxis: { ...CHART_DEFAULTS.xAxis, ...options.xAxis }\r\n    }}\r\n  />\r\n);\r\n\r\nChart.propTypes = {\r\n  options: PropTypes.object\r\n};\r\n\r\nexport default Chart;\r\n","import React from \"react\";\r\n\r\nconst CurrencyContext = React.createContext();\r\n\r\nexport default CurrencyContext;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport get from \"lodash/fp/get\";\r\nimport {\r\n  positiveColor as green,\r\n  negativeColor as red\r\n} from \"../styleVariables\";\r\nimport CurrencyContext from \"./CurrencyContext\";\r\n\r\nexport const addCommas = nStr => {\r\n  nStr += \"\";\r\n\r\n  const x = nStr.split(\".\");\r\n  let x1 = x[0];\r\n  const x2 = x.length > 1 ? \".\" + x[1] : \"\";\r\n  const rgx = /(\\d+)(\\d{3})/;\r\n  while (rgx.test(x1)) {\r\n    x1 = x1.replace(rgx, \"$1,$2\");\r\n  }\r\n  return x1 + x2;\r\n};\r\n\r\nconst Amount = ({\r\n  amount,\r\n  amountAfterDecimal,\r\n  expectNegative,\r\n  expectPositive,\r\n  showCurrencySymbol,\r\n  style\r\n}) => (\r\n  <CurrencyContext.Consumer>\r\n    {currencyFormat => (\r\n      <span\r\n        style={{\r\n          ...style,\r\n          color:\r\n            amount === 0\r\n              ? null\r\n              : amount > 0\r\n              ? expectPositive\r\n                ? null\r\n                : green\r\n              : expectNegative\r\n              ? null\r\n              : red\r\n        }}\r\n      >\r\n        {amount === 0\r\n          ? null\r\n          : amount > 0\r\n          ? expectPositive\r\n            ? null\r\n            : \"+\"\r\n          : expectNegative\r\n          ? null\r\n          : \"-\"}\r\n        {showCurrencySymbol && (get(\"symbol\")(currencyFormat) || \"$\")}\r\n        {addCommas(Math.abs(amount).toFixed(amountAfterDecimal))}\r\n      </span>\r\n    )}\r\n  </CurrencyContext.Consumer>\r\n);\r\n\r\nAmount.propTypes = {\r\n  amount: PropTypes.number.isRequired,\r\n  amountAfterDecimal: PropTypes.number,\r\n  expectNegative: PropTypes.bool,\r\n  expectPositive: PropTypes.bool,\r\n  showCurrencySymbol: PropTypes.bool,\r\n  style: PropTypes.object\r\n};\r\n\r\nAmount.defaultProps = {\r\n  amountAfterDecimal: 2\r\n};\r\n\r\nexport default Amount;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport isNumber from \"lodash/fp/isNumber\";\r\nimport { MinorText, LargeNumber } from \"./typeComponents\";\r\nimport Amount from \"./Amount\";\r\n\r\nconst ChartNumbers = ({ numbers, alwaysRound, expectPositive }) => {\r\n  const smallNumbers = numbers.some(({ amount }) => Math.abs(amount) < 100);\r\n  return (\r\n    <div\r\n      style={{\r\n        textAlign: \"right\",\r\n        lineHeight: \"16px\",\r\n        display: \"flex\",\r\n        justifyContent: \"flex-start\",\r\n        flexDirection: \"row-reverse\",\r\n        marginBottom: 8\r\n      }}\r\n    >\r\n      {numbers.map(({ amount, label, isMoney = true, decimalsToRound }) => (\r\n        <div key={label} style={{ marginLeft: 20 }}>\r\n          <LargeNumber style={{ lineHeight: \"16px\" }}>\r\n            <Amount\r\n              amount={amount}\r\n              amountAfterDecimal={\r\n                isNumber(decimalsToRound)\r\n                  ? decimalsToRound\r\n                  : smallNumbers && !alwaysRound\r\n                  ? 2\r\n                  : 0\r\n              }\r\n              showCurrencySymbol={isMoney}\r\n              expectNegative={!expectPositive}\r\n              expectPositive={expectPositive}\r\n            />\r\n          </LargeNumber>\r\n          <MinorText>{label}</MinorText>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nChartNumbers.propTypes = {\r\n  numbers: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      amount: PropTypes.number.isRequired,\r\n      label: PropTypes.string.isRequired,\r\n      alwaysRound: PropTypes.bool,\r\n      decimalsToRound: PropTypes.number,\r\n      isMoney: PropTypes.bool\r\n    })\r\n  ).isRequired,\r\n  alwaysRound: PropTypes.bool,\r\n  expectPositive: PropTypes.bool\r\n};\r\n\r\nexport default ChartNumbers;\r\n","import React, { Fragment, PureComponent } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport moment from \"moment\";\r\nimport tinyColor from \"tinycolor2\";\r\nimport compose from \"lodash/fp/compose\";\r\nimport isNumber from \"lodash/fp/isNumber\";\r\nimport padCharsStart from \"lodash/fp/padCharsStart\";\r\nimport range from \"lodash/fp/range\";\r\nimport sumBy from \"lodash/fp/sumBy\";\r\nimport takeWhile from \"lodash/fp/takeWhile\";\r\nimport { groupByProp, sumByProp } from \"../dataUtils\";\r\nimport { getTransactionMonth } from \"../budgetUtils\";\r\nimport { primaryColor, plotBandColor } from \"../styleVariables\";\r\nimport { MinorText } from \"./typeComponents\";\r\nimport Chart from \"./Chart\";\r\nimport ChartNumbers from \"./ChartNumbers\";\r\n\r\nconst DateLabels = styled.div`\r\n  border-top: 1px solid #ddd;\r\n  display: flex;\r\n  justify-content: space-between;\r\n`;\r\n\r\nconst getData = ({ month, transactionsByDate }) => {\r\n  const today = moment().format(\"YYYY-MM-DD\");\r\n  let cumulative = 0;\r\n  return range(-1, moment(month).daysInMonth()).map(numDays => {\r\n    const date =\r\n      numDays === -1\r\n        ? moment(month).add(-1, \"days\")\r\n        : `${month}-${padCharsStart(\"0\")(2)(numDays + 1)}`;\r\n\r\n    if (date > today) {\r\n      return null;\r\n    }\r\n\r\n    cumulative += -sumBy(\"amount\")(transactionsByDate[date] || []);\r\n\r\n    return cumulative;\r\n  });\r\n};\r\n\r\nclass SpendingChart extends PureComponent {\r\n  static propTypes = {\r\n    budgetId: PropTypes.string.isRequired,\r\n    currentMonth: PropTypes.string.isRequired,\r\n    transactions: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        amount: PropTypes.number.isRequired,\r\n        date: PropTypes.string.isRequired\r\n      })\r\n    ).isRequired,\r\n    total: PropTypes.number\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      total,\r\n      transactions,\r\n      highlightFunction,\r\n      currentMonth,\r\n      monthsToCompare\r\n    } = this.props;\r\n\r\n    const highlightedTransactions = highlightFunction\r\n      ? transactions.filter(highlightFunction)\r\n      : [];\r\n    const highlightData = getData({\r\n      month: currentMonth,\r\n      transactionsByDate: groupByProp(\"date\")(highlightedTransactions)\r\n    });\r\n    const highlightSeries = {\r\n      type: \"areaspline\",\r\n      data: highlightData,\r\n      enableMouseTracking: false,\r\n      marker: { enabled: false },\r\n      animation: false,\r\n      color: primaryColor,\r\n      lineWidth: 0,\r\n      fillOpacity: 0.8\r\n    };\r\n    const daysInMonth = moment(currentMonth).daysInMonth();\r\n    const firstDate = moment(currentMonth).add(-1, \"days\");\r\n    const lastDate = moment(currentMonth).add(daysInMonth - 1, \"days\");\r\n\r\n    const transactionsByDate = groupByProp(\"date\")(transactions);\r\n    const data = getData({ month: currentMonth, transactionsByDate });\r\n    const lineData = range(0, daysInMonth + 1).map(\r\n      day => (day / daysInMonth) * total\r\n    );\r\n    const firstDayOfWeek = parseInt(firstDate.format(\"d\"), 10);\r\n    const plotBands = range(0, 6).map(num => ({\r\n      color: plotBandColor,\r\n      from: num * 7 - 1.5 - firstDayOfWeek,\r\n      to: num * 7 + 0.5 - firstDayOfWeek\r\n    }));\r\n\r\n    const comparisonSeries = range(monthsToCompare, 0).map(numMonths => ({\r\n      type: \"spline\",\r\n      data: getData({\r\n        month: moment(currentMonth)\r\n          .subtract(numMonths, \"months\")\r\n          .format(\"YYYY-MM\"),\r\n        transactionsByDate\r\n      }),\r\n      enableMouseTracking: false,\r\n      color:\r\n        \"#\" +\r\n        tinyColor\r\n          .mix(\r\n            primaryColor,\r\n            \"#f2f2f2\",\r\n            30 + ((numMonths - 1) * 70) / monthsToCompare\r\n          )\r\n          .toHex(),\r\n      lineWidth: 1,\r\n      marker: { enabled: false },\r\n      animation: false\r\n    }));\r\n\r\n    const spent = compose([\r\n      sumByProp(\"amount\"),\r\n      takeWhile(\r\n        transaction => getTransactionMonth(transaction) === currentMonth\r\n      )\r\n    ])(transactions);\r\n    const chartNumbers = [{ amount: spent, label: \"spent\" }];\r\n    if (isNumber(total)) {\r\n      chartNumbers.push({ amount: -(total + spent), label: \"available\" });\r\n    }\r\n\r\n    return (\r\n      <Fragment>\r\n        <ChartNumbers numbers={chartNumbers} />\r\n        <Chart\r\n          key={monthsToCompare}\r\n          options={{\r\n            chart: { spacing: [0, 0, 0, 0], height: 140, animation: false },\r\n            xAxis: {\r\n              labels: { enabled: false },\r\n              plotBands\r\n            },\r\n            yAxis: { visible: false, endOnTick: false, startOnTick: false },\r\n            series: [\r\n              {\r\n                type: \"line\",\r\n                color: \"#aaa\",\r\n                dashStyle: \"Dot\",\r\n                lineWidth: 1,\r\n                data: lineData,\r\n                enableMouseTracking: false,\r\n                marker: { enabled: false },\r\n                animation: false\r\n              },\r\n              ...comparisonSeries,\r\n              {\r\n                type: \"spline\",\r\n                data,\r\n                enableMouseTracking: false,\r\n                color: primaryColor,\r\n                marker: { enabled: false },\r\n                animation: false,\r\n                ...(highlightFunction && {\r\n                  type: \"areaspline\",\r\n                  fillOpacity: 0.2\r\n                })\r\n              },\r\n              highlightSeries\r\n            ]\r\n          }}\r\n        />\r\n        <DateLabels>\r\n          <MinorText>{firstDate.format(\"MMM D\")}</MinorText>\r\n          <MinorText>{lastDate.format(\"MMM D\")}</MinorText>\r\n        </DateLabels>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SpendingChart;\r\n","import React, { Component } from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\nimport styled from \"styled-components\";\r\nimport PropTypes from \"prop-types\";\r\nimport { StrongText } from \"./typeComponents\";\r\nimport { PrimaryButton } from \"./Button\";\r\n\r\nconst Container = styled.div`\r\n  position: fixed;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  z-index: 1000;\r\n`;\r\n\r\nconst Overlay = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  background-color: rgba(0, 0, 0, 0.7);\r\n  opacity: 0;\r\n  transition: opacity 0.2s ease-in-out;\r\n`;\r\n\r\nconst ModalContent = styled.div`\r\n  position: relative;\r\n  min-width: 200px;\r\n  padding: 15px 20px;\r\n  margin-left: 20px;\r\n  margin-right: 20px;\r\n  background-color: #fff;\r\n  border-radius: 2px;\r\n  transition: transform 0.2s ease-in-out, opacity 0.2s ease-in-out;\r\n`;\r\n\r\nconst ensureNextTick = callback =>\r\n  requestAnimationFrame(() => {\r\n    requestAnimationFrame(callback);\r\n  });\r\n\r\nclass Modal extends Component {\r\n  static propTypes = {\r\n    children: PropTypes.node.isRequired,\r\n    open: PropTypes.bool.isRequired,\r\n    onClose: PropTypes.func.isRequired,\r\n    title: PropTypes.string,\r\n    width: PropTypes.number\r\n  };\r\n\r\n  constructor() {\r\n    super();\r\n    this.el = document.createElement(\"div\");\r\n    this.state = { animationState: \"left\" };\r\n  }\r\n\r\n  componentDidMount() {\r\n    document.body.appendChild(this.el);\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (!prevProps.open && this.props.open) {\r\n      ensureNextTick(() => {\r\n        this.setState({ animationState: \"entering\" });\r\n      });\r\n    }\r\n    if (prevProps.open && !this.props.open) {\r\n      ensureNextTick(() => {\r\n        this.setState({ animationState: \"leaving\" });\r\n      });\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.body.removeChild(this.el);\r\n  }\r\n\r\n  handleTransitionEnd = () => {\r\n    const { animationState } = this.state;\r\n\r\n    if (animationState === \"entering\") {\r\n      this.setState({ animationState: \"entered\" });\r\n    } else if (animationState === \"leaving\") {\r\n      this.setState({ animationState: \"left\" });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { open, children, title, onClose, width } = this.props;\r\n    const { animationState } = this.state;\r\n\r\n    if (!open && animationState === \"left\") {\r\n      return null;\r\n    }\r\n\r\n    const shouldShow = [\"entering\", \"entered\"].includes(animationState);\r\n\r\n    return createPortal(\r\n      <Container>\r\n        <Overlay\r\n          onClick={onClose}\r\n          style={{ opacity: shouldShow ? 1 : 0 }}\r\n          onTransitionEnd={this.handleTransitionEnd}\r\n        />\r\n        <ModalContent\r\n          style={{\r\n            opacity: shouldShow ? 1 : 0,\r\n            transform: `translate3d(0, ${shouldShow ? \"0\" : \"20px\"}, 0)`,\r\n            width\r\n          }}\r\n        >\r\n          {title && (\r\n            <StrongText style={{ marginBottom: 10 }}>{title}</StrongText>\r\n          )}\r\n          {children}\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"flex-end\",\r\n              marginTop: 20\r\n            }}\r\n          >\r\n            <PrimaryButton onClick={onClose}>Done</PrimaryButton>\r\n          </div>\r\n        </ModalContent>\r\n      </Container>,\r\n      this.el\r\n    );\r\n  }\r\n}\r\n\r\nexport default Modal;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Modal from \"./Modal\";\r\nimport { SecondaryText } from \"./typeComponents\";\r\nimport Button from \"./Button\";\r\n\r\nconst ChartSettingsModal = ({\r\n  open,\r\n  monthsToCompare,\r\n  onClose,\r\n  onDecrementMonths,\r\n  onIncrementMonths\r\n}) => (\r\n  <Modal open={open} title=\"Chart Settings\" onClose={onClose}>\r\n    <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n      <div style={{ marginRight: 10 }}>\r\n        <Button onClick={onDecrementMonths}>-</Button>\r\n        <Button onClick={onIncrementMonths}>+</Button>\r\n      </div>\r\n      <SecondaryText>\r\n        Compare with the last {monthsToCompare} month\r\n        {monthsToCompare === 1 ? \"\" : \"s\"}\r\n      </SecondaryText>\r\n    </div>\r\n  </Modal>\r\n);\r\n\r\nChartSettingsModal.propTypes = {\r\n  open: PropTypes.bool.isRequired,\r\n  monthsToCompare: PropTypes.number.isRequired,\r\n  onClose: PropTypes.func.isRequired,\r\n  onDecrementMonths: PropTypes.func.isRequired,\r\n  onIncrementMonths: PropTypes.func.isRequired\r\n};\r\n\r\nexport default ChartSettingsModal;\r\n","import React, { Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useMonthsToCompare, useFlagState } from \"../commonHooks\";\r\nimport CollapsibleSection from \"./CollapsibleSection\";\r\nimport SpendingChart from \"./SpendingChart\";\r\nimport ChartSettingsModal from \"./ChartSettingsModal\";\r\n\r\nconst DayByDaySection = ({\r\n  actions,\r\n  budgetId,\r\n  currentMonth,\r\n  highlightFunction,\r\n  title,\r\n  total,\r\n  transactions\r\n}) => {\r\n  const [modalOpen, onCloseModal, onOpenModal] = useFlagState(false);\r\n  const {\r\n    monthsToCompare,\r\n    onIncrementMonths,\r\n    onDecrementMonths\r\n  } = useMonthsToCompare(budgetId);\r\n\r\n  return (\r\n    <Fragment>\r\n      <CollapsibleSection\r\n        actions={actions}\r\n        title={title}\r\n        hasSettings\r\n        onClickSettings={onOpenModal}\r\n      >\r\n        <SpendingChart\r\n          budgetId={budgetId}\r\n          currentMonth={currentMonth}\r\n          highlightFunction={highlightFunction}\r\n          monthsToCompare={monthsToCompare}\r\n          total={total}\r\n          transactions={transactions}\r\n        />\r\n      </CollapsibleSection>\r\n      <ChartSettingsModal\r\n        open={modalOpen}\r\n        monthsToCompare={monthsToCompare}\r\n        onClose={onCloseModal}\r\n        onDecrementMonths={onDecrementMonths}\r\n        onIncrementMonths={onIncrementMonths}\r\n      />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nDayByDaySection.propTypes = {\r\n  budgetId: PropTypes.string.isRequired,\r\n  currentMonth: PropTypes.string.isRequired,\r\n  transactions: PropTypes.array.isRequired,\r\n  actions: PropTypes.node,\r\n  highlightFunction: PropTypes.func,\r\n  title: PropTypes.string,\r\n  total: PropTypes.number\r\n};\r\n\r\nDayByDaySection.defaultProps = { title: \"Day by Day\" };\r\n\r\nexport default DayByDaySection;\r\n","import styled from \"styled-components\";\r\n\r\nconst ListItem = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 8px 0;\r\n  user-select: none;\r\n\r\n  &:first-child {\r\n    padding-top: ${props => !props.isContinuing && 0};\r\n  }\r\n`;\r\n\r\nexport default ListItem;\r\n","import styled from \"styled-components\";\r\nimport { SecondaryText } from \"./typeComponents\";\r\n\r\nconst EmptyText = styled(SecondaryText)`\r\n  text-align: center;\r\n  margin: 10px;\r\n  opacity: 0.5;\r\n`;\r\n\r\nexport default EmptyText;\r\n","import React from \"react\";\r\nimport EmptyText from \"./EmptyText\";\r\n\r\nconst NoTransactions = () => <EmptyText>No transactions this month</EmptyText>;\r\n\r\nexport default NoTransactions;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { SecondaryText, MinorText } from \"./typeComponents\";\r\n\r\nconst LabelWithMinorText = ({ label, minorText, inLink, to, bold }) => (\r\n  <SecondaryText\r\n    style={{\r\n      fontWeight: bold && 700,\r\n      display: \"flex\",\r\n      alignItems: \"baseline\",\r\n      whiteSpace: \"pre\",\r\n      overflow: \"hidden\",\r\n      color: inLink && \"inherit\"\r\n    }}\r\n  >\r\n    {to ? <Link to={to}>{label}</Link> : label}\r\n    {minorText && (\r\n      <MinorText\r\n        style={{\r\n          fontWeight: bold && 700,\r\n          overflow: \"hidden\",\r\n          textOverflow: \"ellipsis\"\r\n        }}\r\n      >\r\n        &nbsp;&ndash; {minorText}\r\n      </MinorText>\r\n    )}\r\n  </SecondaryText>\r\n);\r\n\r\nLabelWithMinorText.propTypes = {\r\n  label: PropTypes.string.isRequired,\r\n  bold: PropTypes.bool,\r\n  inLink: PropTypes.bool,\r\n  minorText: PropTypes.string,\r\n  to: PropTypes.string\r\n};\r\n\r\nexport default LabelWithMinorText;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport LabelWithMinorText from \"./LabelWithMinorText\";\r\n\r\nconst LabelWithTransactionCount = ({\r\n  label,\r\n  count,\r\n  inLink,\r\n  selected,\r\n  showCount,\r\n  to\r\n}) => (\r\n  <LabelWithMinorText\r\n    bold={selected}\r\n    label={label}\r\n    minorText={showCount && `${count} transaction${count === 1 ? \"\" : \"s\"}`}\r\n    inLink={inLink}\r\n    to={to}\r\n  />\r\n);\r\n\r\nLabelWithTransactionCount.propTypes = {\r\n  count: PropTypes.number.isRequired,\r\n  label: PropTypes.string.isRequired,\r\n  inLink: PropTypes.bool,\r\n  selected: PropTypes.bool,\r\n  showCount: PropTypes.bool,\r\n  to: PropTypes.string\r\n};\r\n\r\nLabelWithTransactionCount.defaultProps = { showCount: true };\r\n\r\nexport default LabelWithTransactionCount;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { SecondaryText, MinorText } from \"./typeComponents\";\r\nimport Amount from \"./Amount\";\r\n\r\nconst AmountWithPercentage = ({\r\n  amount,\r\n  expectNegative,\r\n  expectPositive,\r\n  total,\r\n  faded,\r\n  selected\r\n}) => (\r\n  <SecondaryText\r\n    style={{\r\n      display: \"flex\",\r\n      alignItems: \"baseline\",\r\n      opacity: faded ? 0.3 : 1,\r\n      fontWeight: selected && 700\r\n    }}\r\n  >\r\n    <Amount\r\n      amount={amount}\r\n      expectNegative={expectNegative}\r\n      expectPositive={expectPositive}\r\n    />\r\n    <MinorText\r\n      style={{ width: 44, textAlign: \"right\", fontWeight: selected && 700 }}\r\n    >\r\n      {total ? `${((amount / total) * 100).toFixed(1)}%` : `–`}\r\n    </MinorText>\r\n  </SecondaryText>\r\n);\r\n\r\nAmountWithPercentage.propTypes = {\r\n  amount: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  expectNegative: PropTypes.bool,\r\n  expectPositive: PropTypes.bool,\r\n  faded: PropTypes.bool,\r\n  selected: PropTypes.bool\r\n};\r\n\r\nexport default AmountWithPercentage;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { MinorText } from \"./typeComponents\";\r\n\r\nconst SeeAll = ({ count, pluralizedName, showAll, onToggle }) => (\r\n  <MinorText style={{ textAlign: \"center\", marginTop: 5 }} onClick={onToggle}>\r\n    {showAll ? \"see less\" : `see all ${count} ${pluralizedName}`}\r\n  </MinorText>\r\n);\r\n\r\nSeeAll.propTypes = {\r\n  count: PropTypes.number.isRequired,\r\n  pluralizedName: PropTypes.string.isRequired,\r\n  showAll: PropTypes.bool.isRequired,\r\n  onToggle: PropTypes.func.isRequired\r\n};\r\n\r\nexport default SeeAll;\r\n","import React, { Component, PureComponent, Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport compose from \"lodash/fp/compose\";\r\nimport get from \"lodash/fp/get\";\r\nimport map from \"lodash/fp/map\";\r\nimport sortBy from \"lodash/fp/sortBy\";\r\nimport { groupBy, groupByProp, sumByProp } from \"../dataUtils\";\r\nimport AnimateHeight from \"react-animate-height-auto\";\r\nimport { Link } from \"react-router-dom\";\r\nimport CollapsibleSection from \"./CollapsibleSection\";\r\nimport { SecondaryText } from \"./typeComponents\";\r\nimport ListItem from \"./ListItem\";\r\nimport NoTransactions from \"./NoTransactions\";\r\nimport LabelWithTransactionCount from \"./LabelWithTransactionCount\";\r\nimport AmountWithPercentage from \"./AmountWithPercentage\";\r\nimport SeeAll from \"./SeeAll\";\r\n\r\nconst mapWithKeys = map.convert({ cap: false });\r\nconst LIMIT = 5;\r\n\r\nconst keyToPluralizedName = {\r\n  category_group_id: \"category groups\",\r\n  category_id: \"categories\",\r\n  payee_id: \"payees\"\r\n};\r\n\r\nclass GenericEntitiesSection extends Component {\r\n  static propTypes = {\r\n    entitiesById: PropTypes.object.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    transactions: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    entityKey: PropTypes.oneOf([\r\n      \"category_id\",\r\n      \"category_group_id\",\r\n      \"payee_id\"\r\n    ]),\r\n    emptyName: PropTypes.string,\r\n    entityFunction: PropTypes.func,\r\n    expectNegative: PropTypes.bool,\r\n    expectPositive: PropTypes.bool,\r\n    linkFunction: PropTypes.func,\r\n    limitShowing: PropTypes.bool,\r\n    numMonths: PropTypes.number,\r\n    reverse: PropTypes.bool,\r\n    selectedEntityId: PropTypes.string,\r\n    showAverage: PropTypes.bool,\r\n    showAverageToggle: PropTypes.bool,\r\n    showTransactionCount: PropTypes.bool,\r\n    onClickEntity: PropTypes.func,\r\n    onToggleAverage: PropTypes.func\r\n  };\r\n\r\n  static defaultProps = { emptyName: \"(none)\" };\r\n\r\n  state = { showAll: false, allMounted: false };\r\n\r\n  handleToggleShowAll = () => {\r\n    const { allMounted, showAll } = this.state;\r\n    if (allMounted) {\r\n      this.setState({ showAll: !showAll });\r\n    } else {\r\n      this.setState({ allMounted: true });\r\n      requestAnimationFrame(() => {\r\n        this.setState({ showAll: true });\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      emptyName,\r\n      entityKey,\r\n      entityFunction,\r\n      entitiesById,\r\n      expectNegative,\r\n      expectPositive,\r\n      linkFunction,\r\n      limitShowing: limitShowingProp,\r\n      numMonths,\r\n      reverse,\r\n      selectedEntityId,\r\n      showAverage,\r\n      showAverageToggle,\r\n      showTransactionCount,\r\n      title,\r\n      transactions,\r\n      onClickEntity,\r\n      onToggleAverage\r\n    } = this.props;\r\n    const { allMounted, showAll } = this.state;\r\n    let total = 0;\r\n    const entities = compose([\r\n      sortBy(e => (reverse ? -e.amount : e.amount)),\r\n      mapWithKeys((transactions, entityId) => {\r\n        const amount = sumByProp(\"amount\")(transactions);\r\n        total += amount;\r\n\r\n        return {\r\n          entityId,\r\n          transactions: transactions.length,\r\n          amount\r\n        };\r\n      }),\r\n      entityFunction ? groupBy(entityFunction) : groupByProp(entityKey)\r\n    ])(transactions);\r\n\r\n    const limitShowing = limitShowingProp && entities.length > LIMIT + 1;\r\n    const topEntities = entities.slice(0, LIMIT);\r\n    const otherEntities = entities.slice(LIMIT);\r\n\r\n    return (\r\n      <CollapsibleSection\r\n        title={title}\r\n        actions={\r\n          showAverageToggle && (\r\n            <SecondaryText onClick={onToggleAverage}>\r\n              {showAverage ? \"average\" : \"total\"}\r\n            </SecondaryText>\r\n          )\r\n        }\r\n      >\r\n        {entities.length === 0 && <NoTransactions />}\r\n        {(limitShowing ? topEntities : entities).map(\r\n          ({ entityId, transactions, amount }) => (\r\n            <GenericItemLink\r\n              key={entityId}\r\n              showTransactionCount={showTransactionCount}\r\n              to={\r\n                linkFunction && !!entitiesById[entityId]\r\n                  ? linkFunction(entityId)\r\n                  : null\r\n              }\r\n              transactions={transactions}\r\n              name={get(\"name\")(entitiesById[entityId]) || emptyName}\r\n              amount={showAverage ? amount / numMonths : amount}\r\n              expectNegative={expectNegative}\r\n              expectPositive={expectPositive}\r\n              selected={entityId === selectedEntityId}\r\n              total={showAverage ? total / numMonths : total}\r\n              id={entityId}\r\n              onClick={onClickEntity}\r\n            />\r\n          )\r\n        )}\r\n        {allMounted && (\r\n          <AnimateHeight isExpanded={showAll}>\r\n            <Fragment>\r\n              {otherEntities.map(({ entityId, transactions, amount }) => (\r\n                <GenericItemLink\r\n                  key={entityId}\r\n                  showTransactionCount={showTransactionCount}\r\n                  to={\r\n                    linkFunction && !!entitiesById[entityId]\r\n                      ? linkFunction(entityId)\r\n                      : null\r\n                  }\r\n                  transactions={transactions}\r\n                  name={get(\"name\")(entitiesById[entityId]) || emptyName}\r\n                  amount={showAverage ? amount / numMonths : amount}\r\n                  expectNegative={expectNegative}\r\n                  expectPositive={expectPositive}\r\n                  selected={entityId === selectedEntityId}\r\n                  total={total}\r\n                  id={entityId}\r\n                  onClick={onClickEntity}\r\n                  isContinuing\r\n                />\r\n              ))}\r\n            </Fragment>\r\n          </AnimateHeight>\r\n        )}\r\n        {!!otherEntities.length && limitShowing && (\r\n          <SeeAll\r\n            count={entities.length}\r\n            pluralizedName={keyToPluralizedName[entityKey]}\r\n            showAll={showAll}\r\n            onToggle={this.handleToggleShowAll}\r\n          />\r\n        )}\r\n      </CollapsibleSection>\r\n    );\r\n  }\r\n}\r\n\r\nconst MaybeLink = ({ to, children, ...other }) =>\r\n  to ? (\r\n    <Link {...other} to={to}>\r\n      {children}\r\n    </Link>\r\n  ) : (\r\n    <span {...other}>{children}</span>\r\n  );\r\n\r\nclass GenericItemLink extends PureComponent {\r\n  render() {\r\n    const {\r\n      showTransactionCount,\r\n      to,\r\n      transactions,\r\n      name,\r\n      amount,\r\n      expectNegative,\r\n      expectPositive,\r\n      total,\r\n      selected,\r\n      id,\r\n      onClick,\r\n      isContinuing\r\n    } = this.props;\r\n    return (\r\n      <ListItem\r\n        isContinuing={isContinuing}\r\n        onClick={onClick && (() => onClick(id))}\r\n      >\r\n        {showTransactionCount ? (\r\n          <LabelWithTransactionCount\r\n            count={transactions}\r\n            label={name}\r\n            selected={selected}\r\n            to={to}\r\n          />\r\n        ) : (\r\n          <MaybeLink\r\n            to={to}\r\n            onClick={\r\n              to &&\r\n              (evt => {\r\n                evt.stopPropagation();\r\n              })\r\n            }\r\n          >\r\n            <SecondaryText\r\n              style={{\r\n                whiteSpace: \"pre\",\r\n                overflow: \"hidden\",\r\n                textOverflow: \"ellipsis\",\r\n                color: \"inherit\",\r\n                fontWeight: selected && 700\r\n              }}\r\n            >\r\n              {name}\r\n            </SecondaryText>\r\n          </MaybeLink>\r\n        )}\r\n        <AmountWithPercentage\r\n          amount={amount}\r\n          expectNegative={expectNegative}\r\n          expectPositive={expectPositive}\r\n          selected={selected}\r\n          total={total}\r\n        />\r\n      </ListItem>\r\n    );\r\n  }\r\n}\r\n\r\nGenericItemLink.propTypes = {\r\n  amount: PropTypes.number.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  transactions: PropTypes.number.isRequired,\r\n  id: PropTypes.string,\r\n  isContinuing: PropTypes.bool,\r\n  selected: PropTypes.bool,\r\n  showTransactionCount: PropTypes.bool,\r\n  to: PropTypes.string\r\n};\r\n\r\nexport default GenericEntitiesSection;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport get from \"lodash/fp/get\";\r\nimport { SecondaryText } from \"./typeComponents\";\r\nimport ListItem from \"./ListItem\";\r\nimport Amount from \"./Amount\";\r\nimport LabelWithMinorText from \"./LabelWithMinorText\";\r\n\r\nconst StyledListItem = styled(ListItem)`\r\n  border-top: 0;\r\n  padding-bottom: 0;\r\n`;\r\n\r\nconst DateSummaryTransaction = ({ category, payee, memo, amount }) => (\r\n  <StyledListItem isContinuing>\r\n    <div style={{ overflow: \"hidden\" }}>\r\n      <LabelWithMinorText\r\n        label={get(\"name\")(payee) || \"(no payee)\"}\r\n        minorText={\r\n          get(\"name\")(category) || \"(no category)\" + (memo ? ` (${memo})` : \"\")\r\n        }\r\n      />\r\n    </div>\r\n    <SecondaryText>\r\n      <Amount amount={amount} expectNegative />\r\n    </SecondaryText>\r\n  </StyledListItem>\r\n);\r\n\r\nDateSummaryTransaction.propTypes = {\r\n  amount: PropTypes.number.isRequired,\r\n  category: PropTypes.shape({\r\n    name: PropTypes.string.isRequired\r\n  }),\r\n  isContinuing: PropTypes.bool,\r\n  memo: PropTypes.string,\r\n  payee: PropTypes.shape({\r\n    name: PropTypes.string.isRequired\r\n  })\r\n};\r\n\r\nexport default DateSummaryTransaction;\r\n","import React from \"react\";\r\nimport { SecondaryText } from \"./typeComponents\";\r\nimport Icon from \"./Icon\";\r\nimport Amount from \"./Amount\";\r\nimport styled from \"styled-components\";\r\nimport ListItem from \"./ListItem\";\r\n\r\nconst INDENTATION = 18;\r\n\r\nconst NodeWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: ${props => (props.isCompact ? \"0\" : \"8px 0\")};\r\n  user-select: none;\r\n\r\n  ${ListItem}:first-child > & {\r\n    padding-top: 0;\r\n  }\r\n`;\r\n\r\nconst IconWrapper = styled.div`\r\n  box-sizing: border-box;\r\n  padding-left: 3px;\r\n  width: ${INDENTATION}px;\r\n  font-weight: 400;\r\n  color: #888;\r\n  font-size: 10px;\r\n`;\r\n\r\nconst ToggleNode = ({\r\n  expanded,\r\n  name,\r\n  id,\r\n  amount,\r\n  valueRenderer,\r\n  onToggle,\r\n  isCompact\r\n}) => (\r\n  <NodeWrapper onClick={onToggle} isCompact={isCompact}>\r\n    <SecondaryText\r\n      style={{ whiteSpace: \"pre\", display: \"flex\", alignItems: \"center\" }}\r\n    >\r\n      <IconWrapper>\r\n        <Icon icon=\"chevron-right\" transform={{ rotate: expanded ? 90 : 0 }} />\r\n      </IconWrapper>\r\n      {typeof name === \"function\" ? name({ expanded }) : name}\r\n    </SecondaryText>\r\n    {valueRenderer ? (\r\n      valueRenderer({ amount, id, faded: expanded })\r\n    ) : (\r\n      <SecondaryText style={{ opacity: expanded ? 0.3 : 1 }}>\r\n        <Amount amount={amount} expectNegative />\r\n      </SecondaryText>\r\n    )}\r\n  </NodeWrapper>\r\n);\r\n\r\nexport default ToggleNode;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport AnimateHeight from \"react-animate-height-auto\";\r\nimport ListItem from \"./ListItem\";\r\nimport moment from \"moment\";\r\nimport { MinorText } from \"./typeComponents\";\r\nimport { sumByProp } from \"../dataUtils\";\r\nimport EmptyText from \"./EmptyText\";\r\nimport DateSummaryTransaction from \"./DateSummaryTransaction\";\r\nimport ToggleNode from \"./ToggleNode\";\r\n\r\nconst Container = styled(ListItem)`\r\n  display: block;\r\n`;\r\n\r\nconst DateSummary = ({\r\n  categoriesById,\r\n  date,\r\n  expanded,\r\n  payeesById,\r\n  transactions,\r\n  onToggleExpanded\r\n}) => (\r\n  <Container>\r\n    <ToggleNode\r\n      amount={sumByProp(\"amount\")(transactions)}\r\n      expanded={expanded}\r\n      name={\r\n        <div style={{ display: \"flex\", alignItems: \"baseline\" }}>\r\n          {moment(date).calendar(null, {\r\n            sameDay: \"[Today]\",\r\n            nextDay: \"[Tomorrow]\",\r\n            nextWeek: \"dddd\",\r\n            lastDay: \"[Yesterday]\",\r\n            lastWeek: \"dddd\",\r\n            sameElse: \"DD/MM/YYYY\"\r\n          })}\r\n          {!expanded && (\r\n            <MinorText>\r\n              {\" \"}\r\n              &ndash; {transactions.length} transaction\r\n              {transactions.length === 1 ? \"\" : \"s\"}\r\n            </MinorText>\r\n          )}\r\n        </div>\r\n      }\r\n      onToggle={onToggleExpanded}\r\n      isCompact\r\n    />\r\n    <AnimateHeight isExpanded={expanded}>\r\n      <div style={{ paddingLeft: 18 }}>\r\n        {transactions.length ? (\r\n          transactions.map(transaction => (\r\n            <DateSummaryTransaction\r\n              key={transaction.id}\r\n              amount={transaction.amount}\r\n              payee={payeesById[transaction.payee_id]}\r\n              category={categoriesById[transaction.category_id]}\r\n              memo={transaction.memo}\r\n            />\r\n          ))\r\n        ) : (\r\n          <EmptyText style={{ margin: 0 }}>no transactions</EmptyText>\r\n        )}\r\n      </div>\r\n    </AnimateHeight>\r\n  </Container>\r\n);\r\n\r\nDateSummary.propTypes = {\r\n  categoriesById: PropTypes.object.isRequired,\r\n  date: PropTypes.string.isRequired,\r\n  expanded: PropTypes.bool.isRequired,\r\n  payeesById: PropTypes.object.isRequired,\r\n  transactions: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      amount: PropTypes.number.isRequired,\r\n      category_id: PropTypes.string,\r\n      payee_id: PropTypes.string\r\n    })\r\n  ).isRequired,\r\n  onToggleExpanded: PropTypes.func.isRequired\r\n};\r\n\r\nexport default DateSummary;\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { groupByProp } from \"../dataUtils\";\r\nimport moment from \"moment\";\r\nimport range from \"lodash/fp/range\";\r\nimport CollapsibleSection from \"./CollapsibleSection\";\r\nimport DateSummary from \"./DateSummary\";\r\n\r\nconst NUM_DAYS = 5;\r\n\r\nconst RecentSpending = ({\r\n  categoriesById,\r\n  currentMonth,\r\n  payeesById,\r\n  transactions\r\n}) => {\r\n  const transactionsByDate = groupByProp(\"date\")(transactions);\r\n  const recentDays = range(0, NUM_DAYS)\r\n    .map(n =>\r\n      moment()\r\n        .subtract(n, \"days\")\r\n        .format(\"YYYY-MM-DD\")\r\n    )\r\n    .filter(date => date.startsWith(currentMonth));\r\n\r\n  const [expanded, setExpanded] = useState(\r\n    recentDays.reduce((acc, date) => ({ ...acc, [date]: false }), {})\r\n  );\r\n\r\n  return (\r\n    <CollapsibleSection title=\"Recent Spending\">\r\n      {recentDays.map(date => (\r\n        <DateSummary\r\n          key={date}\r\n          categoriesById={categoriesById}\r\n          date={date}\r\n          expanded={!!expanded[date]}\r\n          onToggleExpanded={() => {\r\n            setExpanded({ ...expanded, [date]: !expanded[date] });\r\n          }}\r\n          payeesById={payeesById}\r\n          transactions={transactionsByDate[date] || []}\r\n        />\r\n      ))}\r\n    </CollapsibleSection>\r\n  );\r\n};\r\n\r\nRecentSpending.propTypes = {\r\n  categoriesById: PropTypes.object.isRequired,\r\n  currentMonth: PropTypes.string.isRequired,\r\n  payeesById: PropTypes.object.isRequired,\r\n  transactions: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      date: PropTypes.string.isRequired\r\n    })\r\n  ).isRequired\r\n};\r\n\r\nexport default RecentSpending;\r\n","import React, { Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport takeWhile from \"lodash/fp/takeWhile\";\r\nimport {\r\n  getTransactionMonth,\r\n  isTransfer,\r\n  isStartingBalanceOrReconciliation,\r\n  isIncome,\r\n  sanitizeName\r\n} from \"../budgetUtils\";\r\nimport { notAny } from \"../dataUtils\";\r\nimport pages, { makeLink } from \"../pages\";\r\nimport { useSelectedEntityId } from \"../commonHooks\";\r\nimport PageLayout from \"./PageLayout\";\r\nimport DayByDaySection from \"./DayByDaySection\";\r\nimport GenericEntitiesSection from \"./GenericEntitiesSection\";\r\nimport RecentSpending from \"./RecentSpending\";\r\n\r\nconst CurrentMonthPage = ({\r\n  budget,\r\n  currentMonth,\r\n  historyAction,\r\n  investmentAccounts,\r\n  location,\r\n  sidebarTrigger,\r\n  title\r\n}) => {\r\n  const [selectedGroupId, onSelectGroupId] = useSelectedEntityId();\r\n\r\n  const {\r\n    categoryGroupsById,\r\n    categoriesById,\r\n    payeesById,\r\n    id: budgetId\r\n  } = budget;\r\n  const selectedGroup = selectedGroupId && categoryGroupsById[selectedGroupId];\r\n  const transactions = budget.transactions.filter(\r\n    notAny([\r\n      isIncome(budget),\r\n      isTransfer(investmentAccounts),\r\n      isStartingBalanceOrReconciliation(budget)\r\n    ])\r\n  );\r\n  const transactionsThisMonth = takeWhile(\r\n    transaction => getTransactionMonth(transaction) === currentMonth\r\n  )(transactions);\r\n\r\n  return (\r\n    <PageLayout\r\n      historyAction={historyAction}\r\n      location={location}\r\n      sidebarTrigger={sidebarTrigger}\r\n      title={title}\r\n      content={\r\n        <Fragment>\r\n          <DayByDaySection\r\n            budgetId={budget.id}\r\n            currentMonth={currentMonth}\r\n            transactions={transactions}\r\n            highlightFunction={\r\n              selectedGroupId &&\r\n              (transaction =>\r\n                categoriesById[transaction.category_id].category_group_id ===\r\n                selectedGroupId)\r\n            }\r\n            title={\r\n              selectedGroup\r\n                ? `Day by Day: ${sanitizeName(selectedGroup.name)}`\r\n                : \"Day by Day\"\r\n            }\r\n          />\r\n          <RecentSpending\r\n            categoriesById={categoriesById}\r\n            currentMonth={currentMonth}\r\n            payeesById={payeesById}\r\n            transactions={transactionsThisMonth}\r\n          />\r\n          <GenericEntitiesSection\r\n            entitiesById={categoryGroupsById}\r\n            entityFunction={transaction =>\r\n              categoriesById[transaction.category_id].category_group_id\r\n            }\r\n            entityKey=\"category_group_id\"\r\n            expectNegative\r\n            linkFunction={groupId =>\r\n              makeLink(pages.currentMonthGroup.path, {\r\n                budgetId,\r\n                categoryGroupId: groupId\r\n              })\r\n            }\r\n            selectedEntityId={selectedGroupId}\r\n            title=\"Category Groups\"\r\n            transactions={transactionsThisMonth}\r\n            showTransactionCount\r\n            onClickEntity={onSelectGroupId}\r\n          />\r\n        </Fragment>\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nCurrentMonthPage.propTypes = {\r\n  budget: PropTypes.object.isRequired,\r\n  currentMonth: PropTypes.string.isRequired,\r\n  historyAction: PropTypes.string.isRequired,\r\n  investmentAccounts: PropTypes.object.isRequired,\r\n  location: PropTypes.string.isRequired,\r\n  sidebarTrigger: PropTypes.node.isRequired,\r\n  title: PropTypes.string.isRequired\r\n};\r\n\r\nexport default CurrentMonthPage;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport moment from \"moment\";\r\nimport findIndex from \"lodash/fp/findIndex\";\r\nimport { selectedPlotBandColor } from \"../styleVariables\";\r\nimport Chart from \"./Chart\";\r\n\r\nconst MonthlyChart = ({\r\n  average,\r\n  data,\r\n  height,\r\n  series,\r\n  selectedMonth,\r\n  stacked,\r\n  onSelectMonth\r\n}) => {\r\n  const yearLines = [];\r\n  const plotBands = [];\r\n  const categories = data.map(d => moment(d.month).format(\"MMM\"));\r\n  let highlights = null;\r\n\r\n  if (selectedMonth) {\r\n    highlights = { months: [selectedMonth], color: selectedPlotBandColor };\r\n  }\r\n\r\n  data.forEach(({ month }, index) => {\r\n    if (moment(month).format(\"MMM\") === \"Jan\") {\r\n      yearLines.push({\r\n        color: \"#ccc\",\r\n        width: 1,\r\n        value: index - 0.5,\r\n        zIndex: 3\r\n      });\r\n    }\r\n  });\r\n\r\n  if (highlights) {\r\n    highlights.months.forEach(month => {\r\n      const index = findIndex(d => d.month === month)(data);\r\n      plotBands.push({\r\n        color: highlights.color,\r\n        from: index - 0.5,\r\n        to: index + 0.5\r\n      });\r\n    });\r\n  }\r\n\r\n  return (\r\n    <Chart\r\n      key={data.length}\r\n      options={{\r\n        chart: {\r\n          animation: false,\r\n          height,\r\n          type: \"column\",\r\n          events: {\r\n            click: event => {\r\n              onSelectMonth &&\r\n                onSelectMonth(data[Math.round(event.xAxis[0].value)].month);\r\n            }\r\n          }\r\n        },\r\n        xAxis: {\r\n          categories,\r\n          plotBands,\r\n          plotLines: yearLines\r\n        },\r\n        yAxis: {\r\n          endOnTick: false,\r\n          startOnTick: false,\r\n          gridLineColor: \"#f0f0f0\",\r\n          labels: {\r\n            align: \"left\",\r\n            x: 0,\r\n            y: -2,\r\n            style: { color: \"#bbb\", fontSize: \"9px\" },\r\n            zIndex: 3\r\n          },\r\n          tickPixelInterval: 30,\r\n          title: { text: null },\r\n          plotLines: average && [\r\n            {\r\n              color: \"#aaa\",\r\n              dashStyle: \"Dot\",\r\n              width: 1,\r\n              value: -average,\r\n              zIndex: 2\r\n            }\r\n          ]\r\n        },\r\n        plotOptions: {\r\n          series: { animation: false, stacking: stacked ? \"normal\" : null }\r\n        },\r\n        series: series.map(s => {\r\n          if (s.type === \"line\") {\r\n            return {\r\n              color: s.color,\r\n              data: data.map(s.valueFunction),\r\n              enableMouseTracking: false,\r\n              type: \"line\",\r\n              lineWidth: 1,\r\n              marker: {\r\n                radius: 0\r\n              },\r\n              zIndex: 3\r\n            };\r\n          }\r\n\r\n          return {\r\n            borderWidth: 0,\r\n            color: s.color,\r\n            data: data.map(s.valueFunction),\r\n            enableMouseTracking: false,\r\n            states: { hover: { brightness: 0 } }\r\n          };\r\n        })\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nMonthlyChart.propTypes = {\r\n  data: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      month: PropTypes.string.isRequired\r\n    })\r\n  ).isRequired,\r\n  series: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      color: PropTypes.string.isRequired,\r\n      valueFunction: PropTypes.func.isRequired,\r\n      type: PropTypes.oneOf([\"line\"])\r\n    })\r\n  ).isRequired,\r\n  average: PropTypes.number,\r\n  height: PropTypes.number,\r\n  selectedMonth: PropTypes.string,\r\n  stacked: PropTypes.bool,\r\n  onSelectMonth: PropTypes.func\r\n};\r\n\r\nMonthlyChart.defaultProps = { height: 140, stacked: true };\r\n\r\nexport default MonthlyChart;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport { primaryColor } from \"../styleVariables\";\r\n\r\nconst PADDING = 2;\r\nconst WIDTH = 32;\r\nconst HEIGHT = 18;\r\n\r\nconst Track = styled.div`\r\n  box-sizing: border-box;\r\n  padding: ${PADDING}px;\r\n  display: inline-block;\r\n  width: ${WIDTH}px;\r\n  height: ${HEIGHT}px;\r\n  border-radius: ${HEIGHT / 2}px;\r\n  background-color: ${props => (props.on ? primaryColor : \"#ddd\")};\r\n  transition: background-color 0.15s ease-in-out;\r\n`;\r\n\r\nconst Handle = styled.div`\r\n  box-sizing: border-box;\r\n  height: ${HEIGHT - 2 * PADDING}px;\r\n  width: ${HEIGHT - 2 * PADDING}px;\r\n  border-radius: 50%;\r\n  background-color: #fff;\r\n  transform: translate3d(${props => (props.on ? WIDTH - HEIGHT : 0)}px, 0, 0);\r\n  transition: transform 0.15s ease-in-out;\r\n`;\r\n\r\nconst Toggle = ({ on, onClick }) => (\r\n  <Track on={on} onClick={onClick}>\r\n    <Handle on={on} />\r\n  </Track>\r\n);\r\n\r\nToggle.propTypes = {\r\n  on: PropTypes.bool.isRequired,\r\n  onClick: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Toggle;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Toggle from \"./Toggle\";\r\n\r\nconst Container = styled.div`\r\n  user-select: none;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  margin: 10px 0;\r\n`;\r\n\r\nconst Label = styled.div``;\r\n\r\nconst ToggleWithLabel = ({ label, name, checked, onChange }) => (\r\n  <Container\r\n    onClick={() => {\r\n      onChange({ target: { name, checked: !checked } });\r\n    }}\r\n  >\r\n    <Label>{label}</Label>\r\n    <Toggle\r\n      on={checked}\r\n      onClick={() => {\r\n        onChange({ target: { name, checked: !checked } });\r\n      }}\r\n    />\r\n  </Container>\r\n);\r\n\r\nToggleWithLabel.propTypes = {\r\n  label: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  checked: PropTypes.bool.isRequired,\r\n  onChange: PropTypes.func.isRequired\r\n};\r\n\r\nexport default ToggleWithLabel;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Modal from \"./Modal\";\r\nimport ToggleWithLabel from \"./ToggleWithLabel\";\r\nimport { MinorText } from \"./typeComponents\";\r\n\r\nconst MonthByMonthSettingsModal = ({\r\n  excludeFirstMonth,\r\n  excludeLastMonth,\r\n  open,\r\n  onClose,\r\n  onSetExclusion\r\n}) => (\r\n  <Modal open={open} onClose={onClose} title=\"Chart Settings\" width={240}>\r\n    <ToggleWithLabel\r\n      checked={excludeFirstMonth}\r\n      label=\"Exclude first month\"\r\n      name=\"excludeFirstMonth\"\r\n      onChange={() => {\r\n        onSetExclusion({ month: \"first\", exclude: !excludeFirstMonth });\r\n      }}\r\n    />\r\n    <ToggleWithLabel\r\n      checked={excludeLastMonth}\r\n      label=\"Exclude last month\"\r\n      name=\"excludeLastMonth\"\r\n      onChange={() => {\r\n        onSetExclusion({ month: \"last\", exclude: !excludeLastMonth });\r\n      }}\r\n    />\r\n    <MinorText style={{ marginTop: 5 }}>\r\n      Excluding incomplete months may lead to more representative averages\r\n    </MinorText>\r\n  </Modal>\r\n);\r\n\r\nMonthByMonthSettingsModal.propTypes = {\r\n  excludeFirstMonth: PropTypes.bool.isRequired,\r\n  excludeLastMonth: PropTypes.bool.isRequired,\r\n  open: PropTypes.bool.isRequired,\r\n  onClose: PropTypes.func.isRequired,\r\n  onSetExclusion: PropTypes.func.isRequired\r\n};\r\n\r\nexport default MonthByMonthSettingsModal;\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport moment from \"moment\";\r\nimport { getTransactionMonth } from \"../budgetUtils\";\r\nimport { groupBy, sumByProp } from \"../dataUtils\";\r\nimport { lightPrimaryColor, lighterPrimaryColor } from \"../styleVariables\";\r\nimport CollapsibleSection from \"./CollapsibleSection\";\r\nimport ChartNumbers from \"./ChartNumbers\";\r\nimport MonthlyChart from \"./MonthlyChart\";\r\nimport MonthByMonthSettingsModal from \"./MonthByMonthSettingsModal\";\r\n\r\nconst MonthByMonthSection = ({\r\n  excludeFirstMonth,\r\n  excludeLastMonth,\r\n  expectPositive,\r\n  highlightFunction,\r\n  months,\r\n  selectedMonth,\r\n  title,\r\n  transactions,\r\n  onSelectMonth,\r\n  onSetExclusion\r\n}) => {\r\n  const [settingsModalOpen, setSettingsModalOpen] = useState(false);\r\n\r\n  let total = 0;\r\n  let selectedMonthTotal = 0;\r\n\r\n  const transactionsByMonth = groupBy(getTransactionMonth)(transactions);\r\n  const data = months.map(month => {\r\n    const grouped = groupBy(highlightFunction || (() => false))(\r\n      transactionsByMonth[month] || []\r\n    );\r\n    const amount = sumByProp(\"amount\")(grouped.false || []);\r\n    const highlighted = sumByProp(\"amount\")(grouped.true || []);\r\n    total += highlightFunction ? highlighted : amount;\r\n    if (month === selectedMonth) {\r\n      selectedMonthTotal = highlightFunction ? highlighted : amount;\r\n    }\r\n\r\n    return {\r\n      month,\r\n      amount: expectPositive ? amount : -amount,\r\n      highlighted: expectPositive ? highlighted : -highlighted\r\n    };\r\n  });\r\n\r\n  const chartNumbers = selectedMonth\r\n    ? [\r\n        { amount: total / months.length, label: \"average\" },\r\n        {\r\n          amount: selectedMonthTotal,\r\n          label: moment(selectedMonth).format(\"MMM YYYY\")\r\n        }\r\n      ]\r\n    : [\r\n        { amount: total / months.length, label: \"average\" },\r\n        {\r\n          amount: total,\r\n          label: \"total\"\r\n        }\r\n      ];\r\n  const series = [\r\n    {\r\n      color: highlightFunction ? lightPrimaryColor : lighterPrimaryColor,\r\n      valueFunction: d => d.amount\r\n    }\r\n  ];\r\n\r\n  if (highlightFunction) {\r\n    series.push({\r\n      color: lighterPrimaryColor,\r\n      valueFunction: d => d.highlighted\r\n    });\r\n  }\r\n\r\n  return (\r\n    <CollapsibleSection\r\n      title={title}\r\n      hasSettings\r\n      onClickSettings={() => {\r\n        setSettingsModalOpen(true);\r\n      }}\r\n    >\r\n      <ChartNumbers numbers={chartNumbers} expectPositive={expectPositive} />\r\n      <MonthlyChart\r\n        data={data}\r\n        average={total / months.length}\r\n        series={series}\r\n        selectedMonth={selectedMonth}\r\n        onSelectMonth={onSelectMonth}\r\n      />\r\n      <MonthByMonthSettingsModal\r\n        excludeFirstMonth={excludeFirstMonth}\r\n        excludeLastMonth={excludeLastMonth}\r\n        open={settingsModalOpen}\r\n        onClose={() => {\r\n          setSettingsModalOpen(false);\r\n        }}\r\n        onSetExclusion={onSetExclusion}\r\n      />\r\n    </CollapsibleSection>\r\n  );\r\n};\r\n\r\nMonthByMonthSection.propTypes = {\r\n  excludeFirstMonth: PropTypes.bool.isRequired,\r\n  excludeLastMonth: PropTypes.bool.isRequired,\r\n  months: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  transactions: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  onSelectMonth: PropTypes.func.isRequired,\r\n  onSetExclusion: PropTypes.func.isRequired,\r\n  highlightFunction: PropTypes.func,\r\n  selectedMonth: PropTypes.string,\r\n  title: PropTypes.string\r\n};\r\n\r\nMonthByMonthSection.defaultProps = { title: \"Month by Month\" };\r\n\r\nexport default MonthByMonthSection;\r\n","import React, { Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport moment from \"moment\";\r\nimport {\r\n  useFlagState,\r\n  useMonthExclusions,\r\n  useSelectedEntityId,\r\n  useSelectedMonth\r\n} from \"../commonHooks\";\r\nimport { notAny, simpleMemoize } from \"../dataUtils\";\r\nimport {\r\n  getFirstMonth,\r\n  getTransactionMonth,\r\n  isIncome,\r\n  isStartingBalanceOrReconciliation,\r\n  isTransfer,\r\n  sanitizeName\r\n} from \"../budgetUtils\";\r\nimport PageLayout from \"./PageLayout\";\r\nimport MonthByMonthSection from \"./MonthByMonthSection\";\r\nimport GenericEntitiesSection from \"./GenericEntitiesSection\";\r\n\r\nconst getFilteredTransactions = simpleMemoize(\r\n  (budget, investmentAccounts, excludeFirstMonth, excludeLastMonth) => {\r\n    const firstMonth = getFirstMonth(budget);\r\n    const lastMonth = moment().format(\"YYYY-MM\");\r\n    return budget.transactions.filter(\r\n      notAny([\r\n        isStartingBalanceOrReconciliation(budget),\r\n        isTransfer(investmentAccounts),\r\n        transaction =>\r\n          excludeFirstMonth && getTransactionMonth(transaction) === firstMonth,\r\n        transaction =>\r\n          excludeLastMonth && getTransactionMonth(transaction) === lastMonth\r\n      ])\r\n    );\r\n  }\r\n);\r\n\r\nconst getFilteredIncomeTransactions = simpleMemoize(\r\n  (budget, investmentAccounts, excludeFirstMonth, excludeLastMonth) =>\r\n    getFilteredTransactions(\r\n      budget,\r\n      investmentAccounts,\r\n      excludeFirstMonth,\r\n      excludeLastMonth\r\n    ).filter(transaction => isIncome(budget)(transaction))\r\n);\r\n\r\nconst IncomePage = ({\r\n  budget,\r\n  historyAction,\r\n  investmentAccounts,\r\n  location,\r\n  sidebarTrigger,\r\n  title\r\n}) => {\r\n  const {\r\n    excludeFirstMonth,\r\n    excludeLastMonth,\r\n    months,\r\n    onSetExclusion\r\n  } = useMonthExclusions(budget);\r\n  const [selectedMonth, onSelectMonth] = useSelectedMonth();\r\n  const [selectedPayeeId, onSelectPayeeId] = useSelectedEntityId();\r\n  const [showAverage, , , onToggleShowAverage] = useFlagState(true);\r\n\r\n  const { payeesById } = budget;\r\n  const filteredTransactions = getFilteredIncomeTransactions(\r\n    budget,\r\n    investmentAccounts,\r\n    excludeFirstMonth,\r\n    excludeLastMonth\r\n  );\r\n  const transactionsInSelectedMonth =\r\n    selectedMonth &&\r\n    filteredTransactions.filter(\r\n      transaction => getTransactionMonth(transaction) === selectedMonth\r\n    );\r\n\r\n  return (\r\n    <PageLayout\r\n      historyAction={historyAction}\r\n      location={location}\r\n      sidebarTrigger={sidebarTrigger}\r\n      title={title}\r\n      content={\r\n        <Fragment>\r\n          <MonthByMonthSection\r\n            excludeFirstMonth={excludeFirstMonth}\r\n            excludeLastMonth={excludeLastMonth}\r\n            expectPositive\r\n            highlightFunction={\r\n              selectedPayeeId &&\r\n              (transaction => transaction.payee_id === selectedPayeeId)\r\n            }\r\n            months={months}\r\n            selectedMonth={selectedMonth}\r\n            title={\r\n              selectedPayeeId\r\n                ? `Month by Month: ${sanitizeName(\r\n                    budget.payeesById[selectedPayeeId].name\r\n                  )}`\r\n                : \"Month by Month\"\r\n            }\r\n            transactions={filteredTransactions}\r\n            onSelectMonth={onSelectMonth}\r\n            onSetExclusion={onSetExclusion}\r\n          />\r\n          <GenericEntitiesSection\r\n            key={`payee-${selectedMonth || \"all\"}`}\r\n            entityKey=\"payee_id\"\r\n            entitiesById={payeesById}\r\n            numMonths={selectedMonth ? 1 : months.length}\r\n            reverse\r\n            title={\r\n              selectedMonth\r\n                ? `Payees: ${moment(selectedMonth).format(\"MMMM\")}`\r\n                : \"Payees\"\r\n            }\r\n            transactions={transactionsInSelectedMonth || filteredTransactions}\r\n            selectedEntityId={selectedPayeeId}\r\n            showAverageToggle={!selectedMonth}\r\n            showAverage={showAverage}\r\n            onClickEntity={onSelectPayeeId}\r\n            onToggleAverage={onToggleShowAverage}\r\n          />\r\n        </Fragment>\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nIncomePage.propTypes = {\r\n  budget: PropTypes.object.isRequired,\r\n  historyAction: PropTypes.string.isRequired,\r\n  investmentAccounts: PropTypes.object.isRequired,\r\n  location: PropTypes.string.isRequired,\r\n  sidebarTrigger: PropTypes.node.isRequired,\r\n  title: PropTypes.string.isRequired\r\n};\r\n\r\nexport default IncomePage;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport moment from \"moment\";\r\nimport get from \"lodash/fp/get\";\r\nimport { SecondaryText, MinorText } from \"./typeComponents\";\r\nimport ListItem from \"./ListItem\";\r\nimport Amount from \"./Amount\";\r\nimport LabelWithMinorText from \"./LabelWithMinorText\";\r\n\r\nconst Transaction = ({ category, payee, memo, date, amount, isContinuing }) => (\r\n  <ListItem isContinuing={isContinuing}>\r\n    <div style={{ overflow: \"hidden\" }}>\r\n      <LabelWithMinorText\r\n        label={get(\"name\")(payee) || \"(no payee)\"}\r\n        minorText={(get(\"name\")(category) || \"\") + (memo ? ` (${memo})` : \"\")}\r\n      />\r\n      <MinorText>{moment(date).format(\"dddd, MMM D\")}</MinorText>\r\n    </div>\r\n    <SecondaryText>\r\n      <Amount amount={amount} expectNegative />\r\n    </SecondaryText>\r\n  </ListItem>\r\n);\r\n\r\nTransaction.propTypes = {\r\n  amount: PropTypes.number.isRequired,\r\n  date: PropTypes.string.isRequired,\r\n  category: PropTypes.shape({\r\n    name: PropTypes.string.isRequired\r\n  }),\r\n  isContinuing: PropTypes.bool,\r\n  memo: PropTypes.string,\r\n  payee: PropTypes.shape({\r\n    name: PropTypes.string.isRequired\r\n  })\r\n};\r\n\r\nexport default Transaction;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport CollapsibleSection from \"./CollapsibleSection\";\r\nimport Transaction from \"./Transaction\";\r\nimport NoTransactions from \"./NoTransactions\";\r\n\r\nconst TransactionsSection = ({\r\n  transactions,\r\n  title,\r\n  categoriesById,\r\n  payeesById\r\n}) => (\r\n  <CollapsibleSection title={title}>\r\n    {transactions.length ? (\r\n      transactions.map(\r\n        ({\r\n          id,\r\n          category_id: categoryId,\r\n          payee_id: payeeId,\r\n          date,\r\n          memo,\r\n          amount\r\n        }) => (\r\n          <Transaction\r\n            key={id}\r\n            amount={amount}\r\n            category={categoriesById[categoryId]}\r\n            date={date}\r\n            memo={memo}\r\n            payee={payeesById[payeeId]}\r\n          />\r\n        )\r\n      )\r\n    ) : (\r\n      <NoTransactions />\r\n    )}\r\n  </CollapsibleSection>\r\n);\r\n\r\nTransactionsSection.propTypes = {\r\n  categoriesById: PropTypes.object.isRequired,\r\n  payeesById: PropTypes.object.isRequired,\r\n  transactions: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      amount: PropTypes.number.isRequired,\r\n      category_id: PropTypes.string.isRequired,\r\n      date: PropTypes.string.isRequired,\r\n      id: PropTypes.string.isRequired,\r\n      payee_id: PropTypes.string\r\n    })\r\n  ).isRequired,\r\n  title: PropTypes.string\r\n};\r\n\r\nTransactionsSection.defaultProps = { title: \"Transactions\" };\r\n\r\nexport default TransactionsSection;\r\n","import React, { Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { getTransactionMonth, sanitizeName } from \"../budgetUtils\";\r\nimport { sumByProp } from \"../dataUtils\";\r\nimport pages, { makeLink } from \"../pages\";\r\nimport PageLayout from \"./PageLayout\";\r\nimport DayByDaySection from \"./DayByDaySection\";\r\nimport GenericEntitiesSection from \"./GenericEntitiesSection\";\r\nimport TransactionsSection from \"./TransactionsSection\";\r\nimport { useSelectedEntityId } from \"../commonHooks\";\r\n\r\nconst CurrentMonthGroupPage = ({\r\n  budget,\r\n  categoryGroupId,\r\n  currentMonth,\r\n  historyAction,\r\n  location,\r\n  sidebarTrigger,\r\n  title\r\n}) => {\r\n  const [selectedCategoryId, onSelectCategoryId] = useSelectedEntityId();\r\n  const {\r\n    id: budgetId,\r\n    payeesById,\r\n    categories: allCategories,\r\n    categoriesById,\r\n    transactions: allTransactions\r\n  } = budget;\r\n\r\n  const selectedCategory =\r\n    selectedCategoryId && categoriesById[selectedCategoryId];\r\n  const categories = allCategories.filter(\r\n    category => category.category_group_id === categoryGroupId\r\n  );\r\n  const categoryIds = categories.map(category => category.id);\r\n  const transactionsInGroup = allTransactions.filter(transaction =>\r\n    categoryIds.includes(transaction.category_id)\r\n  );\r\n  const transactionsInGroupForMonth = transactionsInGroup.filter(\r\n    transaction => getTransactionMonth(transaction) === currentMonth\r\n  );\r\n  const highlightedTransactions =\r\n    selectedCategoryId &&\r\n    transactionsInGroupForMonth.filter(\r\n      transaction => transaction.category_id === selectedCategoryId\r\n    );\r\n\r\n  const spent = -sumByProp(\"activity\")(categories);\r\n  const available = sumByProp(\"balance\")(categories);\r\n\r\n  return (\r\n    <PageLayout\r\n      location={location}\r\n      historyAction={historyAction}\r\n      sidebarTrigger={sidebarTrigger}\r\n      budget={budget}\r\n      title={title}\r\n      content={\r\n        <Fragment>\r\n          <DayByDaySection\r\n            budgetId={budgetId}\r\n            currentMonth={currentMonth}\r\n            highlightFunction={\r\n              selectedCategoryId &&\r\n              (transaction => transaction.category_id === selectedCategoryId)\r\n            }\r\n            title={\r\n              selectedCategory\r\n                ? `Day by Day: ${sanitizeName(selectedCategory.name)}`\r\n                : \"Day by Day\"\r\n            }\r\n            transactions={transactionsInGroup}\r\n            total={spent + available}\r\n          />\r\n          <GenericEntitiesSection\r\n            entityKey=\"category_id\"\r\n            entitiesById={categoriesById}\r\n            expectNegative\r\n            linkFunction={categoryId =>\r\n              makeLink(pages.currentMonthCategory.path, {\r\n                budgetId,\r\n                categoryGroupId,\r\n                categoryId\r\n              })\r\n            }\r\n            selectedEntityId={selectedCategoryId}\r\n            title=\"Categories\"\r\n            transactions={transactionsInGroupForMonth}\r\n            showTransactionCount\r\n            onClickEntity={onSelectCategoryId}\r\n          />\r\n          <TransactionsSection\r\n            categoriesById={categoriesById}\r\n            payeesById={payeesById}\r\n            transactions={\r\n              highlightedTransactions || transactionsInGroupForMonth\r\n            }\r\n            title={\r\n              selectedCategory\r\n                ? `Transactions: ${sanitizeName(selectedCategory.name)}`\r\n                : \"Transactions\"\r\n            }\r\n          />\r\n        </Fragment>\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nCurrentMonthGroupPage.propTypes = {\r\n  budget: PropTypes.shape({\r\n    categories: PropTypes.array.isRequired,\r\n    id: PropTypes.string.isRequired,\r\n    payeesById: PropTypes.object.isRequired,\r\n    transactions: PropTypes.array.isRequired\r\n  }).isRequired,\r\n  categoryGroupId: PropTypes.string.isRequired,\r\n  currentMonth: PropTypes.string.isRequired,\r\n  historyAction: PropTypes.string.isRequired,\r\n  location: PropTypes.string.isRequired,\r\n  sidebarTrigger: PropTypes.node.isRequired,\r\n  title: PropTypes.string.isRequired\r\n};\r\n\r\nexport default CurrentMonthGroupPage;\r\n","import React, { Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { getTransactionMonth } from \"../budgetUtils\";\r\nimport PageLayout from \"./PageLayout\";\r\nimport DayByDaySection from \"./DayByDaySection\";\r\nimport TransactionsSection from \"./TransactionsSection\";\r\n\r\nconst CurrentMonthCategoryPage = ({\r\n  budget,\r\n  currentMonth,\r\n  categoryId,\r\n  historyAction,\r\n  location,\r\n  sidebarTrigger,\r\n  title\r\n}) => {\r\n  const {\r\n    id: budgetId,\r\n    payeesById,\r\n    categoriesById,\r\n    transactions: allTransactions\r\n  } = budget;\r\n\r\n  const category = categoriesById[categoryId];\r\n  const transactionsInCategory = allTransactions.filter(\r\n    transaction => transaction.category_id === categoryId\r\n  );\r\n  const transactionsInCategoryForMonth = transactionsInCategory.filter(\r\n    transaction => getTransactionMonth(transaction) === currentMonth\r\n  );\r\n\r\n  const spent = -category.activity;\r\n  const available = category.balance;\r\n\r\n  return (\r\n    <PageLayout\r\n      historyAction={historyAction}\r\n      location={location}\r\n      sidebarTrigger={sidebarTrigger}\r\n      budget={budget}\r\n      title={title}\r\n      content={\r\n        <Fragment>\r\n          <DayByDaySection\r\n            key={category ? category.name : \"day-by-day\"}\r\n            budgetId={budgetId}\r\n            currentMonth={currentMonth}\r\n            title=\"Day by Day\"\r\n            transactions={transactionsInCategory}\r\n            total={spent + available}\r\n          />\r\n          <TransactionsSection\r\n            categoriesById={categoriesById}\r\n            payeesById={payeesById}\r\n            transactions={transactionsInCategoryForMonth}\r\n          />\r\n        </Fragment>\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nCurrentMonthCategoryPage.propTypes = {\r\n  budget: PropTypes.shape({\r\n    categories: PropTypes.array.isRequired,\r\n    id: PropTypes.string.isRequired,\r\n    payeesById: PropTypes.object.isRequired,\r\n    transactions: PropTypes.array.isRequired\r\n  }).isRequired,\r\n  categoryGroupId: PropTypes.string.isRequired,\r\n  categoryId: PropTypes.string.isRequired,\r\n  currentMonth: PropTypes.string.isRequired,\r\n  historyAction: PropTypes.string.isRequired,\r\n  location: PropTypes.string.isRequired,\r\n  sidebarTrigger: PropTypes.node.isRequired,\r\n  title: PropTypes.string.isRequired\r\n};\r\n\r\nexport default CurrentMonthCategoryPage;\r\n","import React, { Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport moment from \"moment\";\r\nimport { getTransactionMonth, sanitizeName } from \"../budgetUtils\";\r\nimport pages, { makeLink } from \"../pages\";\r\nimport { useTrendsShowAverage } from \"../commonHooks\";\r\nimport PageLayout from \"./PageLayout\";\r\nimport MonthByMonthSection from \"./MonthByMonthSection\";\r\nimport GenericEntitiesSection from \"./GenericEntitiesSection\";\r\n\r\nconst GroupsPage = ({\r\n  budget,\r\n  excludeFirstMonth,\r\n  excludeLastMonth,\r\n  historyAction,\r\n  location,\r\n  months,\r\n  sidebarTrigger,\r\n  title,\r\n  transactions,\r\n  selectedMonth,\r\n  selectedGroupId,\r\n  onSelectGroup,\r\n  onSelectMonth,\r\n  onSetExclusion\r\n}) => {\r\n  const [showAverage, onToggleShowAverage] = useTrendsShowAverage(budget.id);\r\n\r\n  const { categoryGroupsById, categoriesById, id: budgetId } = budget;\r\n  const selectedGroup = selectedGroupId && categoryGroupsById[selectedGroupId];\r\n\r\n  const transactionsForMonth =\r\n    selectedMonth &&\r\n    transactions.filter(\r\n      transaction => getTransactionMonth(transaction) === selectedMonth\r\n    );\r\n\r\n  return (\r\n    <PageLayout\r\n      historyAction={historyAction}\r\n      location={location}\r\n      sidebarTrigger={sidebarTrigger}\r\n      title={title}\r\n      content={\r\n        <Fragment>\r\n          <MonthByMonthSection\r\n            excludeFirstMonth={excludeFirstMonth}\r\n            excludeLastMonth={excludeLastMonth}\r\n            highlightFunction={\r\n              selectedGroupId &&\r\n              (transaction =>\r\n                categoriesById[transaction.category_id].category_group_id ===\r\n                selectedGroupId)\r\n            }\r\n            months={months}\r\n            selectedMonth={selectedMonth}\r\n            title={\r\n              selectedGroup\r\n                ? `Month by Month: ${sanitizeName(selectedGroup.name)}`\r\n                : \"Month by Month\"\r\n            }\r\n            transactions={transactions}\r\n            onSelectMonth={onSelectMonth}\r\n            onSetExclusion={onSetExclusion}\r\n          />\r\n          <GenericEntitiesSection\r\n            key={selectedMonth || \"all\"}\r\n            entityFunction={transaction =>\r\n              categoriesById[transaction.category_id].category_group_id\r\n            }\r\n            entityKey=\"category_group_id\"\r\n            entitiesById={categoryGroupsById}\r\n            expectNegative\r\n            linkFunction={categoryGroupId =>\r\n              makeLink(pages.group.path, { budgetId, categoryGroupId })\r\n            }\r\n            selectedEntityId={selectedGroupId}\r\n            title={\r\n              selectedMonth\r\n                ? `Category Groups: ${moment(selectedMonth).format(\"MMMM\")}`\r\n                : \"Category Groups\"\r\n            }\r\n            transactions={transactionsForMonth || transactions}\r\n            onClickEntity={onSelectGroup}\r\n            numMonths={months.length}\r\n            showAverageToggle={!selectedMonth}\r\n            showAverage={showAverage && !selectedMonth}\r\n            onToggleAverage={onToggleShowAverage}\r\n          />\r\n        </Fragment>\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nGroupsPage.propTypes = {\r\n  budget: PropTypes.object.isRequired,\r\n  excludeFirstMonth: PropTypes.bool.isRequired,\r\n  excludeLastMonth: PropTypes.bool.isRequired,\r\n  historyAction: PropTypes.string.isRequired,\r\n  location: PropTypes.string.isRequired,\r\n  months: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  sidebarTrigger: PropTypes.node.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  transactions: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  onSelectGroup: PropTypes.func.isRequired,\r\n  onSelectMonth: PropTypes.func.isRequired,\r\n  onSetExclusion: PropTypes.func.isRequired,\r\n  selectedGroupId: PropTypes.string,\r\n  selectedMonth: PropTypes.string\r\n};\r\n\r\nexport default GroupsPage;\r\n","import React, { Component, Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport moment from \"moment\";\r\nimport compose from \"lodash/fp/compose\";\r\nimport sortBy from \"lodash/fp/sortBy\";\r\nimport { getTransactionMonth } from \"../budgetUtils\";\r\nimport AnimateHeight from \"react-animate-height-auto\";\r\nimport CollapsibleSection from \"./CollapsibleSection\";\r\nimport Transaction from \"./Transaction\";\r\nimport NoTransactions from \"./NoTransactions\";\r\nimport SeeAll from \"./SeeAll\";\r\n\r\nconst LIMIT = 3;\r\n\r\nclass TransactionsByMonthSection extends Component {\r\n  static propTypes = {\r\n    categoriesById: PropTypes.object.isRequired,\r\n    payeesById: PropTypes.object.isRequired,\r\n    selectedMonth: PropTypes.string.isRequired,\r\n    transactions: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    limitShowing: PropTypes.bool,\r\n    selectedCategoryId: PropTypes.string,\r\n    selectedPayeeId: PropTypes.string\r\n  };\r\n\r\n  static defaultProps = { limitShowing: true };\r\n\r\n  state = { allMounted: false, showAll: false };\r\n\r\n  handleToggleShowAll = () => {\r\n    const { allMounted, showAll } = this.state;\r\n\r\n    if (allMounted) {\r\n      this.setState({ showAll: !showAll });\r\n    } else {\r\n      this.setState({ allMounted: true });\r\n      requestAnimationFrame(() => {\r\n        this.setState({ showAll: true });\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      categoriesById,\r\n      payeesById,\r\n      selectedCategoryId,\r\n      selectedPayeeId,\r\n      selectedMonth,\r\n      transactions,\r\n      limitShowing: limitShowingProp\r\n    } = this.props;\r\n    const { allMounted, showAll } = this.state;\r\n\r\n    const selectedCategory =\r\n      selectedCategoryId && categoriesById[selectedCategoryId];\r\n    const selectedPayee = selectedPayeeId && payeesById[selectedPayeeId];\r\n    const month = moment(selectedMonth).format(\"MMMM\");\r\n    const transactionsForMonth = compose([\r\n      limitShowingProp\r\n        ? sortBy(\"amount\")\r\n        : transactions => transactions.reverse(),\r\n      transactions =>\r\n        transactions.filter(\r\n          transaction =>\r\n            getTransactionMonth(transaction) === selectedMonth &&\r\n            (!selectedCategoryId ||\r\n              transaction.category_id === selectedCategoryId) &&\r\n            (!selectedPayeeId || transaction.payee_id === selectedPayeeId)\r\n        )\r\n    ])(transactions);\r\n    const limitShowing =\r\n      limitShowingProp && transactionsForMonth.length > LIMIT + 2;\r\n    const topTransactions = limitShowing\r\n      ? transactionsForMonth.slice(0, LIMIT)\r\n      : transactionsForMonth;\r\n    const otherTransactions = limitShowing\r\n      ? transactionsForMonth.slice(LIMIT)\r\n      : [];\r\n\r\n    return (\r\n      <CollapsibleSection\r\n        title={\r\n          selectedPayee\r\n            ? `Transactions: ${month}, ${selectedPayee.name}`\r\n            : selectedCategory\r\n              ? `Transactions: ${month}, ${selectedCategory.name}`\r\n              : `Transactions: ${month}`\r\n        }\r\n      >\r\n        {topTransactions.length ? (\r\n          topTransactions.map(\r\n            ({\r\n              id,\r\n              date,\r\n              amount,\r\n              memo,\r\n              payee_id: payeeId,\r\n              category_id: categoryId\r\n            }) => (\r\n              <Transaction\r\n                key={id}\r\n                amount={amount}\r\n                category={categoriesById[categoryId]}\r\n                date={date}\r\n                memo={memo}\r\n                payee={payeesById[payeeId]}\r\n              />\r\n            )\r\n          )\r\n        ) : (\r\n          <NoTransactions />\r\n        )}\r\n        {allMounted && (\r\n          <AnimateHeight isExpanded={showAll}>\r\n            <Fragment>\r\n              {otherTransactions.map(\r\n                ({\r\n                  id,\r\n                  date,\r\n                  amount,\r\n                  payee_id: payeeId,\r\n                  category_id: categoryId\r\n                }) => (\r\n                  <Transaction\r\n                    key={id}\r\n                    amount={amount}\r\n                    category={categoriesById[categoryId]}\r\n                    date={date}\r\n                    payee={payeesById[payeeId]}\r\n                    isContinuing\r\n                  />\r\n                )\r\n              )}\r\n            </Fragment>\r\n          </AnimateHeight>\r\n        )}\r\n        {!!otherTransactions.length && (\r\n          <SeeAll\r\n            count={transactionsForMonth.length}\r\n            pluralizedName=\"transactions\"\r\n            showAll={showAll}\r\n            onToggle={this.handleToggleShowAll}\r\n          />\r\n        )}\r\n      </CollapsibleSection>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TransactionsByMonthSection;\r\n","import React, { Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport moment from \"moment\";\r\nimport compose from \"lodash/fp/compose\";\r\nimport sortBy from \"lodash/fp/sortBy\";\r\nimport { getTransactionMonth, sanitizeName } from \"../budgetUtils\";\r\nimport pages, { makeLink } from \"../pages\";\r\nimport { useTrendsShowAverage } from \"../commonHooks\";\r\nimport PageLayout from \"./PageLayout\";\r\nimport MonthByMonthSection from \"./MonthByMonthSection\";\r\nimport TransactionsByMonthSection from \"./TransactionsByMonthSection\";\r\nimport GenericEntitiesSection from \"./GenericEntitiesSection\";\r\n\r\nconst GroupPage = ({\r\n  budget,\r\n  categoryGroupId,\r\n  excludeFirstMonth,\r\n  excludeLastMonth,\r\n  historyAction,\r\n  location,\r\n  months,\r\n  selectedMonth,\r\n  selectedCategoryId,\r\n  sidebarTrigger,\r\n  title,\r\n  transactions,\r\n  onSelectMonth,\r\n  onSelectCategory,\r\n  onSetExclusion\r\n}) => {\r\n  const [showAverage, onToggleShowAverage] = useTrendsShowAverage(budget.id);\r\n\r\n  const {\r\n    categories,\r\n    categoriesById,\r\n    categoryGroupsById,\r\n    payeesById,\r\n    id: budgetId\r\n  } = budget;\r\n  const categoryGroup = categoryGroupsById[categoryGroupId];\r\n  const selectedCategory =\r\n    selectedCategoryId && categoriesById[selectedCategoryId];\r\n  const categoriesInGroup = categories.filter(\r\n    category => category.category_group_id === categoryGroup.id\r\n  );\r\n  const categoryIds = categoriesInGroup.map(category => category.id);\r\n  const transactionsInGroup = transactions.filter(transaction =>\r\n    categoryIds.includes(transaction.category_id)\r\n  );\r\n  const transactionsInSelectedMonth =\r\n    selectedMonth &&\r\n    compose([\r\n      sortBy(\"amount\"),\r\n      transactions =>\r\n        transactions.filter(\r\n          transaction => getTransactionMonth(transaction) === selectedMonth\r\n        )\r\n    ])(transactionsInGroup);\r\n\r\n  return (\r\n    <PageLayout\r\n      historyAction={historyAction}\r\n      location={location}\r\n      sidebarTrigger={sidebarTrigger}\r\n      budget={budget}\r\n      title={title}\r\n      content={\r\n        <Fragment>\r\n          <MonthByMonthSection\r\n            excludeFirstMonth={excludeFirstMonth}\r\n            excludeLastMonth={excludeLastMonth}\r\n            months={months}\r\n            highlightFunction={\r\n              selectedCategoryId &&\r\n              (transaction => transaction.category_id === selectedCategoryId)\r\n            }\r\n            selectedMonth={selectedMonth}\r\n            title={\r\n              selectedCategory\r\n                ? `Month by Month: ${sanitizeName(selectedCategory.name)}`\r\n                : \"Month by Month\"\r\n            }\r\n            transactions={transactionsInGroup}\r\n            onSelectMonth={onSelectMonth}\r\n            onSetExclusion={onSetExclusion}\r\n          />\r\n          <GenericEntitiesSection\r\n            key={`categories-${selectedMonth || \"all\"}`}\r\n            entityKey=\"category_id\"\r\n            entitiesById={categoriesById}\r\n            expectNegative\r\n            linkFunction={categoryId =>\r\n              makeLink(pages.category.path, {\r\n                budgetId,\r\n                categoryGroupId: categoryGroup.id,\r\n                categoryId\r\n              })\r\n            }\r\n            title={\r\n              selectedMonth\r\n                ? `Categories: ${moment(selectedMonth).format(\"MMMM\")}`\r\n                : \"Categories\"\r\n            }\r\n            transactions={transactionsInSelectedMonth || transactionsInGroup}\r\n            selectedEntityId={selectedCategoryId}\r\n            onClickEntity={onSelectCategory}\r\n            showAverageToggle={!selectedMonth}\r\n            showAverage={showAverage && !selectedMonth}\r\n            numMonths={months.length}\r\n            onToggleAverage={onToggleShowAverage}\r\n            limitShowing\r\n          />\r\n          {selectedMonth && transactionsInSelectedMonth.length > 0 && (\r\n            <TransactionsByMonthSection\r\n              key={`transactions-${selectedMonth ||\r\n                \"all\"}-${selectedCategoryId || \"all\"}`}\r\n              categoriesById={categoriesById}\r\n              payeesById={payeesById}\r\n              selectedMonth={selectedMonth}\r\n              selectedCategoryId={selectedCategoryId}\r\n              transactions={transactionsInSelectedMonth}\r\n            />\r\n          )}\r\n        </Fragment>\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nGroupPage.propTypes = {\r\n  budget: PropTypes.shape({\r\n    transactions: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        categoryId: PropTypes.string\r\n      })\r\n    ).isRequired,\r\n    payeesById: PropTypes.object.isRequired,\r\n    categoryGroupsById: PropTypes.objectOf(\r\n      PropTypes.shape({\r\n        id: PropTypes.string.isRequired\r\n      })\r\n    ).isRequired\r\n  }).isRequired,\r\n  categoryGroupId: PropTypes.string.isRequired,\r\n  excludeFirstMonth: PropTypes.bool.isRequired,\r\n  excludeLastMonth: PropTypes.bool.isRequired,\r\n  historyAction: PropTypes.string.isRequired,\r\n  location: PropTypes.string.isRequired,\r\n  months: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  sidebarTrigger: PropTypes.node.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  transactions: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  onSelectCategory: PropTypes.func.isRequired,\r\n  onSelectMonth: PropTypes.func.isRequired,\r\n  onSetExclusion: PropTypes.func.isRequired,\r\n  selectedCategoryId: PropTypes.string,\r\n  selectedMonth: PropTypes.string\r\n};\r\n\r\nexport default GroupPage;\r\n","import { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst INITIAL_STATE = {\r\n  selectedMonth: null,\r\n  selectedGroupId: null,\r\n  selectedCategoryId: null,\r\n  selectedPayeeId: null\r\n};\r\n\r\nclass CategoriesState extends Component {\r\n  static propTypes = {\r\n    action: PropTypes.oneOf([\"PUSH\", \"POP\", \"REPLACE\"]).isRequired,\r\n    children: PropTypes.func.isRequired,\r\n    location: PropTypes.string.isRequired\r\n  };\r\n\r\n  state = INITIAL_STATE;\r\n\r\n  cachedStates = {};\r\n\r\n  getSnapshotBeforeUpdate() {\r\n    return this.state;\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    const { location, action } = this.props;\r\n\r\n    if (location === prevProps.location) {\r\n      return;\r\n    }\r\n\r\n    if (action === \"POP\") {\r\n      this.cachedStates[prevProps.location] = snapshot;\r\n      this.setState(this.cachedStates[location]);\r\n    }\r\n\r\n    if (action === \"PUSH\") {\r\n      this.cachedStates[prevProps.location] = snapshot;\r\n      this.setState(INITIAL_STATE);\r\n    }\r\n\r\n    if (action === \"REPLACE\") {\r\n      this.setState(INITIAL_STATE);\r\n    }\r\n  }\r\n\r\n  handleSelectMonth = month => {\r\n    this.setState(state => ({\r\n      ...state,\r\n      selectedMonth: state.selectedMonth === month ? null : month\r\n    }));\r\n  };\r\n\r\n  handleSelectGroup = groupId => {\r\n    this.setState(state => ({\r\n      ...state,\r\n      selectedGroupId: state.selectedGroupId === groupId ? null : groupId\r\n    }));\r\n  };\r\n\r\n  handleSelectCategory = categoryId => {\r\n    this.setState(state => ({\r\n      ...state,\r\n      selectedCategoryId:\r\n        state.selectedCategoryId === categoryId ? null : categoryId\r\n    }));\r\n  };\r\n\r\n  handleSelectPayee = payeeId => {\r\n    this.setState(state => ({\r\n      ...state,\r\n      selectedPayeeId: state.selectedPayeeId === payeeId ? null : payeeId\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    return this.props.children({\r\n      ...this.state,\r\n      onSelectMonth: this.handleSelectMonth,\r\n      onSelectGroup: this.handleSelectGroup,\r\n      onSelectCategory: this.handleSelectCategory,\r\n      onSelectPayee: this.handleSelectPayee,\r\n      onSetExclusion: this.handleSetExclusion\r\n    });\r\n  }\r\n}\r\n\r\nexport default CategoriesState;\r\n","import React, { Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport moment from \"moment\";\r\nimport { getTransactionMonth, sanitizeName } from \"../budgetUtils\";\r\nimport pages, { makeLink } from \"../pages\";\r\nimport PageLayout from \"./PageLayout\";\r\nimport MonthByMonthSection from \"./MonthByMonthSection\";\r\nimport GenericEntitiesSection from \"./GenericEntitiesSection\";\r\nimport TransactionsByMonthSection from \"./TransactionsByMonthSection\";\r\n\r\nconst CategoryPage = ({\r\n  categoryId,\r\n  budget,\r\n  excludeFirstMonth,\r\n  excludeLastMonth,\r\n  historyAction,\r\n  location,\r\n  months,\r\n  selectedMonth,\r\n  selectedPayeeId,\r\n  sidebarTrigger,\r\n  title,\r\n  transactions,\r\n  onSelectMonth,\r\n  onSelectPayee,\r\n  onSetExclusion\r\n}) => {\r\n  const { categoriesById, payeesById, id: budgetId } = budget;\r\n  const category = categoriesById[categoryId];\r\n  const selectedPayee = selectedPayeeId && payeesById[selectedPayeeId];\r\n  const transactionsForCategory = transactions.filter(\r\n    transaction => transaction.category_id === categoryId\r\n  );\r\n  const transactionsForMonth =\r\n    selectedMonth &&\r\n    transactionsForCategory.filter(\r\n      transaction => getTransactionMonth(transaction) === selectedMonth\r\n    );\r\n\r\n  return (\r\n    <PageLayout\r\n      historyAction={historyAction}\r\n      location={location}\r\n      sidebarTrigger={sidebarTrigger}\r\n      budget={budget}\r\n      title={title}\r\n      content={\r\n        <Fragment>\r\n          <MonthByMonthSection\r\n            excludeFirstMonth={excludeFirstMonth}\r\n            excludeLastMonth={excludeLastMonth}\r\n            months={months}\r\n            onSetExclusion={onSetExclusion}\r\n            highlightFunction={\r\n              selectedPayeeId &&\r\n              (transaction => transaction.payee_id === selectedPayeeId)\r\n            }\r\n            selectedMonth={selectedMonth}\r\n            title={\r\n              selectedPayee\r\n                ? `Month by Month: ${sanitizeName(selectedPayee.name)}`\r\n                : \"Month by Month\"\r\n            }\r\n            transactions={transactionsForCategory}\r\n            onSelectMonth={onSelectMonth}\r\n          />\r\n          <GenericEntitiesSection\r\n            key={`payees-${selectedMonth || \"all\"}`}\r\n            emptyName=\"(no payee)\"\r\n            entitiesById={payeesById}\r\n            entityKey=\"payee_id\"\r\n            expectNegative\r\n            linkFunction={payeeId =>\r\n              makeLink(pages.categoryPayee.path, {\r\n                budgetId,\r\n                categoryGroupId: category.category_group_id,\r\n                categoryId: categoryId,\r\n                payeeId\r\n              })\r\n            }\r\n            title={\r\n              selectedMonth\r\n                ? `Payees: ${moment(selectedMonth).format(\"MMMM\")}`\r\n                : \"Payees\"\r\n            }\r\n            transactions={transactionsForMonth || transactionsForCategory}\r\n            selectedEntityId={selectedPayeeId}\r\n            onClickEntity={onSelectPayee}\r\n            limitShowing\r\n          />\r\n          {selectedMonth &&\r\n            transactionsForMonth.length > 0 && (\r\n              <TransactionsByMonthSection\r\n                key={`transactions-${selectedMonth ||\r\n                  \"all\"}-${selectedPayeeId || \"all\"}`}\r\n                categoriesById={categoriesById}\r\n                payeesById={payeesById}\r\n                transactions={transactionsForMonth}\r\n                selectedMonth={selectedMonth}\r\n                selectedPayeeId={selectedPayeeId}\r\n              />\r\n            )}\r\n        </Fragment>\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nCategoryPage.propTypes = {\r\n  budget: PropTypes.shape({\r\n    categoriesById: PropTypes.objectOf(\r\n      PropTypes.shape({\r\n        id: PropTypes.string.isRequired\r\n      })\r\n    ).isRequired,\r\n    transactions: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        payee_id: PropTypes.string\r\n      })\r\n    ).isRequired,\r\n    payeesById: PropTypes.object.isRequired\r\n  }).isRequired,\r\n  categoryId: PropTypes.string.isRequired,\r\n  excludeFirstMonth: PropTypes.bool.isRequired,\r\n  excludeLastMonth: PropTypes.bool.isRequired,\r\n  historyAction: PropTypes.string.isRequired,\r\n  location: PropTypes.string.isRequired,\r\n  months: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  sidebarTrigger: PropTypes.node.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  transactions: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  onSelectMonth: PropTypes.func.isRequired,\r\n  onSelectPayee: PropTypes.func.isRequired,\r\n  onSetExclusion: PropTypes.func.isRequired,\r\n  selectedMonth: PropTypes.string,\r\n  selectedPayeeId: PropTypes.string\r\n};\r\n\r\nexport default CategoryPage;\r\n","import React, { Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport PageLayout from \"./PageLayout\";\r\nimport MonthByMonthSection from \"./MonthByMonthSection\";\r\nimport TransactionsByMonthSection from \"./TransactionsByMonthSection\";\r\n\r\nconst CategoryPayeePage = ({\r\n  budget,\r\n  categoryId,\r\n  excludeFirstMonth,\r\n  excludeLastMonth,\r\n  historyAction,\r\n  location,\r\n  months,\r\n  payeeId,\r\n  selectedMonth,\r\n  sidebarTrigger,\r\n  title,\r\n  transactions,\r\n  onSelectMonth,\r\n  onSetExclusion\r\n}) => {\r\n  const { categoriesById, payeesById } = budget;\r\n  const transactionsForCategoryAndPayee = transactions.filter(\r\n    transaction =>\r\n      transaction.category_id === categoryId && transaction.payee_id === payeeId\r\n  );\r\n\r\n  return (\r\n    <PageLayout\r\n      historyAction={historyAction}\r\n      location={location}\r\n      sidebarTrigger={sidebarTrigger}\r\n      budget={budget}\r\n      title={title}\r\n      content={\r\n        <Fragment>\r\n          <MonthByMonthSection\r\n            excludeFirstMonth={excludeFirstMonth}\r\n            excludeLastMonth={excludeLastMonth}\r\n            months={months}\r\n            selectedMonth={selectedMonth}\r\n            transactions={transactionsForCategoryAndPayee}\r\n            onSelectMonth={onSelectMonth}\r\n            onSetExclusion={onSetExclusion}\r\n          />\r\n          {selectedMonth && (\r\n            <TransactionsByMonthSection\r\n              categoriesById={categoriesById}\r\n              payeesById={payeesById}\r\n              selectedMonth={selectedMonth}\r\n              transactions={transactionsForCategoryAndPayee}\r\n              limitShowing={false}\r\n            />\r\n          )}\r\n        </Fragment>\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nCategoryPayeePage.propTypes = {\r\n  budget: PropTypes.shape({\r\n    payeesById: PropTypes.objectOf(\r\n      PropTypes.shape({\r\n        id: PropTypes.string.isRequired\r\n      })\r\n    ).isRequired,\r\n    categoriesById: PropTypes.objectOf(\r\n      PropTypes.shape({\r\n        id: PropTypes.string.isRequired\r\n      })\r\n    ).isRequired\r\n  }).isRequired,\r\n  categoryId: PropTypes.string.isRequired,\r\n  excludeFirstMonth: PropTypes.bool.isRequired,\r\n  excludeLastMonth: PropTypes.bool.isRequired,\r\n  historyAction: PropTypes.string.isRequired,\r\n  location: PropTypes.string.isRequired,\r\n  months: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  payeeId: PropTypes.string.isRequired,\r\n  sidebarTrigger: PropTypes.node.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  transactions: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      payee_id: PropTypes.string.isRequired\r\n    })\r\n  ).isRequired,\r\n  onSelectMonth: PropTypes.func.isRequired,\r\n  onSetExclusion: PropTypes.func.isRequired,\r\n  selectedMonth: PropTypes.string\r\n};\r\n\r\nexport default CategoryPayeePage;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  primaryColor,\r\n  lightPrimaryColor,\r\n  negativeChartColor\r\n} from \"../styleVariables\";\r\nimport MonthlyChart from \"./MonthlyChart\";\r\n\r\nconst IncomeVsExpensesChart = ({ data, onSelectMonth, selectedMonth }) => (\r\n  <MonthlyChart\r\n    data={data}\r\n    height={180}\r\n    selectedMonth={selectedMonth}\r\n    series={[\r\n      { color: lightPrimaryColor, valueFunction: d => d.income },\r\n      { color: negativeChartColor, valueFunction: d => d.expenses },\r\n      {\r\n        type: \"line\",\r\n        color: primaryColor,\r\n        valueFunction: d => d.income + d.expenses\r\n      }\r\n    ]}\r\n    onSelectMonth={onSelectMonth}\r\n  />\r\n);\r\n\r\nIncomeVsExpensesChart.propTypes = {\r\n  data: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      expenses: PropTypes.number.isRequired,\r\n      income: PropTypes.number.isRequired,\r\n      month: PropTypes.string.isRequired\r\n    })\r\n  ).isRequired,\r\n  onSelectMonth: PropTypes.func.isRequired,\r\n  selectedMonth: PropTypes.string\r\n};\r\n\r\nexport default IncomeVsExpensesChart;\r\n","import React, { Component, PureComponent } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport AnimateHeight from \"react-animate-height-auto\";\r\nimport { SecondaryText } from \"./typeComponents\";\r\nimport Amount from \"./Amount\";\r\nimport ListItem from \"./ListItem\";\r\nimport ToggleNode from \"./ToggleNode\";\r\n\r\nconst INDENTATION = 18;\r\n\r\nclass BreakdownNode extends Component {\r\n  static propTypes = {\r\n    amount: PropTypes.number.isRequired,\r\n    id: PropTypes.string.isRequired,\r\n    isTopLevel: PropTypes.bool.isRequired,\r\n    name: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired,\r\n    nodes: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        id: PropTypes.string.isRequired\r\n      })\r\n    ),\r\n    valueRenderer: PropTypes.func\r\n  };\r\n\r\n  state = { expanded: false, childrenMounted: false };\r\n\r\n  handleToggleExpand = () => {\r\n    const { expanded, childrenMounted } = this.state;\r\n\r\n    if (childrenMounted) {\r\n      this.setState({ expanded: !expanded });\r\n    } else {\r\n      this.setState({ childrenMounted: true });\r\n      requestAnimationFrame(() => {\r\n        this.setState({ expanded: true });\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { name, id, amount, nodes, isTopLevel, valueRenderer } = this.props;\r\n    const { expanded, childrenMounted } = this.state;\r\n    const hasChildNodes = !!nodes && nodes.length > 0;\r\n\r\n    return (\r\n      <Container hasChildNodes={hasChildNodes} isTopLevel={isTopLevel}>\r\n        {hasChildNodes ? (\r\n          <ToggleNode\r\n            id={id}\r\n            name={name}\r\n            amount={amount}\r\n            expanded={expanded}\r\n            onToggle={this.handleToggleExpand}\r\n            valueRenderer={valueRenderer}\r\n          />\r\n        ) : (\r\n          <LeafNode\r\n            id={id}\r\n            name={name}\r\n            amount={amount}\r\n            valueRenderer={valueRenderer}\r\n          />\r\n        )}\r\n\r\n        {hasChildNodes &&\r\n          childrenMounted && (\r\n            <AnimateHeight isExpanded={expanded}>\r\n              <Nodes nodes={nodes} valueRenderer={valueRenderer} />\r\n            </AnimateHeight>\r\n          )}\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nclass Nodes extends PureComponent {\r\n  render() {\r\n    const { nodes, valueRenderer } = this.props;\r\n    return (\r\n      <div style={{ paddingLeft: INDENTATION }}>\r\n        {nodes.map(node => (\r\n          <BreakdownNode\r\n            {...node}\r\n            key={node.id}\r\n            isTopLevel={false}\r\n            valueRenderer={valueRenderer}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst NodeWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 8px 0;\r\n  user-select: none;\r\n\r\n  ${ListItem}:first-child > & {\r\n    padding-top: 0;\r\n  }\r\n`;\r\n\r\nconst LeafNode = ({ name, id, amount, valueRenderer }) => (\r\n  <NodeWrapper>\r\n    <SecondaryText>{name}</SecondaryText>\r\n    {valueRenderer ? (\r\n      valueRenderer({ amount, id })\r\n    ) : (\r\n      <SecondaryText>\r\n        <Amount amount={amount} />\r\n      </SecondaryText>\r\n    )}\r\n  </NodeWrapper>\r\n);\r\n\r\nconst Container = ({ isTopLevel, hasChildNodes, children }) =>\r\n  isTopLevel ? (\r\n    <ListItem style={{ display: \"block\", padding: 0 }}>{children}</ListItem>\r\n  ) : (\r\n    children\r\n  );\r\n\r\nexport default BreakdownNode;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport BreakdownNode from \"./BreakdownNode\";\r\n\r\nconst Breakdown = ({ nodes, valueRenderer }) =>\r\n  nodes.map(({ id, name, amount, nodes }) => (\r\n    <BreakdownNode\r\n      key={id}\r\n      id={id}\r\n      name={name}\r\n      amount={amount}\r\n      nodes={nodes}\r\n      valueRenderer={valueRenderer}\r\n      isTopLevel\r\n    />\r\n  ));\r\n\r\nBreakdown.propTypes = {\r\n  nodes: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      amount: PropTypes.number.isRequired,\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired,\r\n      nodes: PropTypes.array\r\n    })\r\n  ).isRequired,\r\n  valueRenderer: PropTypes.func\r\n};\r\n\r\nBreakdown.defaultProps = { reverse: false };\r\n\r\nexport default Breakdown;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport compose from \"lodash/fp/compose\";\r\nimport concat from \"lodash/fp/concat\";\r\nimport mapRaw from \"lodash/fp/map\";\r\nimport omit from \"lodash/fp/omit\";\r\nimport pick from \"lodash/fp/pick\";\r\nimport sortBy from \"lodash/fp/sortBy\";\r\nimport { sumByProp, groupByProp } from \"../dataUtils\";\r\nimport { getPayeeNodes } from \"../budgetUtils\";\r\nimport CollapsibleSection from \"./CollapsibleSection\";\r\nimport Breakdown from \"./Breakdown\";\r\nimport AmountWithPercentage from \"./AmountWithPercentage\";\r\n\r\nconst map = mapRaw.convert({ cap: false });\r\n\r\nconst ExpensesBreakdown = ({\r\n  categoriesById,\r\n  categoryGroupsById,\r\n  transactions,\r\n  totalIncome,\r\n  payeesById,\r\n  divideBy\r\n}) => {\r\n  const categoryNodes = compose([\r\n    map((transactions, categoryId) => {\r\n      const payeeNodes = getPayeeNodes({ payeesById, transactions }, divideBy);\r\n      return {\r\n        ...pick([\"id\", \"name\", \"category_group_id\"])(\r\n          categoriesById[categoryId]\r\n        ),\r\n        nodes: sortBy(\"amount\")(payeeNodes),\r\n        amount: sumByProp(\"amount\")(payeeNodes)\r\n      };\r\n    }),\r\n    groupByProp(\"category_id\")\r\n  ])(transactions);\r\n\r\n  const groupNodes = compose([\r\n    map((nodes, categoryGroupId) => {\r\n      const categoryNodes = map(omit(\"category_group_id\"))(nodes);\r\n      return {\r\n        ...pick([\"id\", \"name\"])(categoryGroupsById[categoryGroupId]),\r\n        nodes: sortBy(\"amount\")(categoryNodes),\r\n        amount: sumByProp(\"amount\")(categoryNodes)\r\n      };\r\n    }),\r\n    groupByProp(\"category_group_id\")\r\n  ])(categoryNodes);\r\n\r\n  const rootPayeeNodes = getPayeeNodes(\r\n    {\r\n      payeesById,\r\n      transactions: transactions.filter(transaction => !transaction.category_id)\r\n    },\r\n    divideBy\r\n  );\r\n\r\n  const nodes = compose([\r\n    nodes =>\r\n      concat(nodes)([\r\n        {\r\n          id: \"net\",\r\n          amount: -totalIncome - sumByProp(\"amount\")(nodes),\r\n          name: \"Net Income\"\r\n        }\r\n      ]),\r\n    sortBy(\"amount\"),\r\n    concat(rootPayeeNodes)\r\n  ])(groupNodes);\r\n\r\n  return (\r\n    <CollapsibleSection title=\"Expenses Breakdown\">\r\n      <Breakdown\r\n        nodes={nodes}\r\n        valueRenderer={node => (\r\n          <AmountWithPercentage {...node} expectNegative total={-totalIncome} />\r\n        )}\r\n      />\r\n    </CollapsibleSection>\r\n  );\r\n};\r\n\r\nExpensesBreakdown.propTypes = {\r\n  categoriesById: PropTypes.objectOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      category_group_id: PropTypes.string.isRequired\r\n    })\r\n  ).isRequired,\r\n  categoryGroupsById: PropTypes.objectOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired\r\n    })\r\n  ).isRequired,\r\n  divideBy: PropTypes.number.isRequired,\r\n  payeesById: PropTypes.objectOf(PropTypes.object).isRequired,\r\n  totalIncome: PropTypes.number.isRequired,\r\n  transactions: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      amount: PropTypes.number.isRequired,\r\n      category_id: PropTypes.string\r\n    })\r\n  ).isRequired\r\n};\r\n\r\nExpensesBreakdown.defaultProps = { divideBy: 1 };\r\n\r\nexport default ExpensesBreakdown;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport sortBy from \"lodash/fp/sortBy\";\r\nimport sumBy from \"lodash/fp/sumBy\";\r\nimport { getPayeeNodes } from \"../budgetUtils\";\r\nimport CollapsibleSection from \"./CollapsibleSection\";\r\nimport Breakdown from \"./Breakdown\";\r\nimport AmountWithPercentage from \"./AmountWithPercentage\";\r\n\r\nconst IncomeBreakdown = ({ transactions, payeesById, divideBy }) => {\r\n  const nodes = getPayeeNodes({ payeesById, transactions }, divideBy);\r\n  const total = sumBy(\"amount\")(nodes);\r\n  return (\r\n    <CollapsibleSection title=\"Income Breakdown\">\r\n      <Breakdown\r\n        nodes={sortBy(\"amount\")(nodes).reverse()}\r\n        total={total}\r\n        valueRenderer={node => (\r\n          <AmountWithPercentage {...node} expectPositive total={total} />\r\n        )}\r\n      />\r\n    </CollapsibleSection>\r\n  );\r\n};\r\n\r\nIncomeBreakdown.propTypes = {\r\n  divideBy: PropTypes.number.isRequired,\r\n  payeesById: PropTypes.objectOf(PropTypes.object).isRequired,\r\n  transactions: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      amount: PropTypes.number.isRequired,\r\n      categoryId: PropTypes.string\r\n    })\r\n  ).isRequired\r\n};\r\n\r\nIncomeBreakdown.defaultProps = { divideBy: 1 };\r\n\r\nexport default IncomeBreakdown;\r\n","import React, { Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { sumByProp } from \"../dataUtils\";\r\nimport ExpensesBreakdown from \"./ExpensesBreakdown\";\r\nimport IncomeBreakdown from \"./IncomeBreakdown\";\r\n\r\nconst Breakdowns = ({\r\n  categoriesById,\r\n  categoryGroupsById,\r\n  payeesById,\r\n  expenseTransactions,\r\n  incomeTransactions,\r\n  divideBy\r\n}) => (\r\n  <Fragment>\r\n    <ExpensesBreakdown\r\n      categoriesById={categoriesById}\r\n      categoryGroupsById={categoryGroupsById}\r\n      payeesById={payeesById}\r\n      transactions={expenseTransactions}\r\n      totalIncome={sumByProp(\"amount\")(incomeTransactions) / divideBy}\r\n      divideBy={divideBy}\r\n    />\r\n    <IncomeBreakdown\r\n      payeesById={payeesById}\r\n      transactions={incomeTransactions}\r\n      divideBy={divideBy}\r\n    />\r\n  </Fragment>\r\n);\r\n\r\nBreakdowns.propTypes = {\r\n  categoriesById: PropTypes.object.isRequired,\r\n  categoryGroupsById: PropTypes.object.isRequired,\r\n  expenseTransactions: PropTypes.array.isRequired,\r\n  incomeTransactions: PropTypes.array.isRequired,\r\n  payeesById: PropTypes.object.isRequired,\r\n  divideBy: PropTypes.number.isRequired\r\n};\r\n\r\nexport default Breakdowns;\r\n","import React, { Fragment, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport compact from \"lodash/fp/compact\";\r\nimport compose from \"lodash/fp/compose\";\r\nimport find from \"lodash/fp/find\";\r\nimport flatMap from \"lodash/fp/flatMap\";\r\nimport mapRaw from \"lodash/fp/map\";\r\nimport matchesProperty from \"lodash/fp/matchesProperty\";\r\nimport sortBy from \"lodash/fp/sortBy\";\r\nimport { sumByProp, groupBy, simpleMemoize } from \"../dataUtils\";\r\nimport { getTransactionMonth, isIncome } from \"../budgetUtils\";\r\nimport { SecondaryText } from \"./typeComponents\";\r\nimport PageLayout from \"./PageLayout\";\r\nimport IncomeVsExpensesChart from \"./IncomeVsExpensesChart\";\r\nimport Breakdowns from \"./Breakdowns\";\r\nimport CollapsibleSection from \"./CollapsibleSection\";\r\nimport ChartNumbers from \"./ChartNumbers\";\r\nimport MonthByMonthSettingsModal from \"./MonthByMonthSettingsModal\";\r\nimport { useSelectedMonth } from \"../commonHooks\";\r\n\r\nconst map = mapRaw.convert({ cap: false });\r\n\r\nconst getSummaries = simpleMemoize((transactions, investmentAccounts, budget) =>\r\n  compose([\r\n    sortBy(\"month\"),\r\n    map((transactions, month) => {\r\n      const grouped = groupBy(isIncome(budget))(transactions);\r\n\r\n      return {\r\n        month,\r\n        expenseTransactions: grouped.false || [],\r\n        incomeTransactions: grouped.true || [],\r\n        income: sumByProp(\"amount\")(grouped.true || []),\r\n        expenses: sumByProp(\"amount\")(grouped.false || [])\r\n      };\r\n    }),\r\n    groupBy(getTransactionMonth)\r\n  ])(transactions)\r\n);\r\n\r\nconst IncomeVsExpensesPage = ({\r\n  budget,\r\n  excludeFirstMonth,\r\n  excludeLastMonth,\r\n  historyAction,\r\n  investmentAccounts,\r\n  location,\r\n  sidebarTrigger,\r\n  title,\r\n  transactions,\r\n  onSetExclusion\r\n}) => {\r\n  const [selectedMonth, onSelectMonth] = useSelectedMonth();\r\n  const [settingsModalOpen, setSettingsModalOpen] = useState(false);\r\n  const [showTotals, setShowTotals] = useState(false);\r\n  const { categoriesById, categoryGroupsById, payeesById } = budget;\r\n\r\n  const allSummaries = getSummaries(transactions, investmentAccounts, budget);\r\n  const summaries = selectedMonth\r\n    ? [find(matchesProperty(\"month\", selectedMonth))(allSummaries)]\r\n    : allSummaries;\r\n\r\n  const incomeTransactions = flatMap(summary => summary.incomeTransactions)(\r\n    compact(summaries)\r\n  );\r\n  const expenseTransactions = flatMap(summary => summary.expenseTransactions)(\r\n    compact(summaries)\r\n  );\r\n\r\n  const totalExpenses = sumByProp(\"amount\")(expenseTransactions);\r\n  const totalIncome = sumByProp(\"amount\")(incomeTransactions);\r\n  const denominator = showTotals ? 1 : summaries.length;\r\n\r\n  return (\r\n    <PageLayout\r\n      historyAction={historyAction}\r\n      location={location}\r\n      sidebarTrigger={sidebarTrigger}\r\n      title={title}\r\n      content={\r\n        <Fragment>\r\n          <CollapsibleSection\r\n            title=\"Monthly Trend\"\r\n            hasSettings\r\n            onClickSettings={() => {\r\n              setSettingsModalOpen(true);\r\n            }}\r\n            actions={\r\n              <SecondaryText\r\n                onClick={() => {\r\n                  setShowTotals(!showTotals);\r\n                }}\r\n              >\r\n                {showTotals ? \"show average\" : \"show total\"}\r\n              </SecondaryText>\r\n            }\r\n          >\r\n            <ChartNumbers\r\n              expectPositive\r\n              numbers={[\r\n                {\r\n                  label: \"net income\",\r\n                  amount: (totalExpenses + totalIncome) / denominator\r\n                },\r\n                {\r\n                  label: \"expenses\",\r\n                  amount: -totalExpenses / denominator\r\n                },\r\n                {\r\n                  label: \"income\",\r\n                  amount: totalIncome / denominator\r\n                }\r\n              ]}\r\n            />\r\n            <IncomeVsExpensesChart\r\n              data={allSummaries}\r\n              selectedMonth={selectedMonth}\r\n              onSelectMonth={onSelectMonth}\r\n            />\r\n            <MonthByMonthSettingsModal\r\n              excludeFirstMonth={excludeFirstMonth}\r\n              excludeLastMonth={excludeLastMonth}\r\n              open={settingsModalOpen}\r\n              onClose={() => {\r\n                setSettingsModalOpen(false);\r\n              }}\r\n              onSetExclusion={onSetExclusion}\r\n            />\r\n          </CollapsibleSection>\r\n          <Breakdowns\r\n            categoriesById={categoriesById}\r\n            categoryGroupsById={categoryGroupsById}\r\n            payeesById={payeesById}\r\n            expenseTransactions={expenseTransactions}\r\n            incomeTransactions={incomeTransactions}\r\n            divideBy={showTotals ? 1 : summaries.length}\r\n          />\r\n        </Fragment>\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nIncomeVsExpensesPage.propTypes = {\r\n  budget: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    months: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        month: PropTypes.string.isRequired\r\n      })\r\n    ).isRequired\r\n  }).isRequired,\r\n  excludeFirstMonth: PropTypes.bool.isRequired,\r\n  excludeLastMonth: PropTypes.bool.isRequired,\r\n  historyAction: PropTypes.string.isRequired,\r\n  investmentAccounts: PropTypes.object.isRequired,\r\n  location: PropTypes.string.isRequired,\r\n  sidebarTrigger: PropTypes.node.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  transactions: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      amount: PropTypes.number.isRequired,\r\n      date: PropTypes.string.isRequired\r\n    })\r\n  ).isRequired,\r\n  onSetExclusion: PropTypes.func.isRequired\r\n};\r\n\r\nexport default IncomeVsExpensesPage;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport includes from \"lodash/fp/includes\";\r\nimport sumBy from \"lodash/fp/sumBy\";\r\nimport { groupBy } from \"../dataUtils\";\r\nimport {\r\n  primaryColor,\r\n  lightPrimaryColor,\r\n  negativeChartColor\r\n} from \"../styleVariables\";\r\nimport MonthlyChart from \"./MonthlyChart\";\r\n\r\nconst CREDIT_ACCOUNTS = [\"mortgage\", \"creditCard\"];\r\nconst getStack = ({ type, id, mortgageAccounts }) => {\r\n  if (mortgageAccounts[id]) {\r\n    return \"liability\";\r\n  }\r\n\r\n  return includes(type)(CREDIT_ACCOUNTS) ? \"liability\" : \"asset\";\r\n};\r\n\r\nconst NetWorthChart = ({\r\n  data,\r\n  months,\r\n  mortgageAccounts,\r\n  selectedMonth,\r\n  onSelectMonth\r\n}) => {\r\n  const groupedData = groupBy(d =>\r\n    getStack({ type: d.type, id: d.id, mortgageAccounts })\r\n  )(data);\r\n  const monthlyData = months.map((month, index) => ({\r\n    month,\r\n    assets: sumBy(d => d.data[index])(groupedData.asset),\r\n    liabilities: sumBy(d => d.data[index])(groupedData.liability)\r\n  }));\r\n\r\n  return (\r\n    <MonthlyChart\r\n      selectedMonth={selectedMonth}\r\n      onSelectMonth={onSelectMonth}\r\n      data={monthlyData}\r\n      height={180}\r\n      series={[\r\n        {\r\n          color: negativeChartColor,\r\n          valueFunction: d => Math.max(-d.liabilities, 0)\r\n        },\r\n        {\r\n          color: lightPrimaryColor,\r\n          valueFunction: d => Math.max(d.assets, 0)\r\n        },\r\n        {\r\n          color: primaryColor,\r\n          type: \"line\",\r\n          valueFunction: d => d.assets + d.liabilities\r\n        }\r\n      ]}\r\n      stacked={false}\r\n    />\r\n  );\r\n};\r\n\r\nNetWorthChart.propTypes = {\r\n  data: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      data: PropTypes.arrayOf(PropTypes.number).isRequired,\r\n      id: PropTypes.string.isRequired,\r\n      type: PropTypes.string.isRequired\r\n    })\r\n  ).isRequired,\r\n  months: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  mortgageAccounts: PropTypes.objectOf(PropTypes.bool).isRequired,\r\n  onSelectMonth: PropTypes.func.isRequired,\r\n  selectedMonth: PropTypes.string\r\n};\r\n\r\nexport default NetWorthChart;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport compose from \"lodash/fp/compose\";\r\nimport every from \"lodash/fp/every\";\r\nimport groupBy from \"lodash/fp/groupBy\";\r\nimport keyBy from \"lodash/fp/keyBy\";\r\nimport mapRaw from \"lodash/fp/map\";\r\nimport propEq from \"lodash/fp/propEq\";\r\nimport sortBy from \"lodash/fp/sortBy\";\r\nimport startCase from \"lodash/fp/startCase\";\r\nimport sumBy from \"lodash/fp/sumBy\";\r\nimport CollapsibleSection from \"./CollapsibleSection\";\r\nimport Breakdown from \"./Breakdown\";\r\nimport { SecondaryText } from \"./typeComponents\";\r\nimport Amount from \"./Amount\";\r\nimport Toggle from \"./Toggle\";\r\n\r\nconst map = mapRaw.convert({ cap: false });\r\n\r\nconst getNodes = ({ accounts, investmentAccounts, mortgageAccounts }) => {\r\n  const accountsByGroup = groupBy(account => {\r\n    if (investmentAccounts[account.id]) {\r\n      return \"Investments\";\r\n    }\r\n\r\n    if (mortgageAccounts[account.id]) {\r\n      return \"Mortgages\";\r\n    }\r\n\r\n    return startCase(account.type);\r\n  })(accounts);\r\n\r\n  return compose([\r\n    accounts => accounts.reverse(),\r\n    sortBy(\"amount\"),\r\n    map((accounts, name) => ({\r\n      name,\r\n      accounts,\r\n      amount: sumBy(\"balance\")(accounts),\r\n      id: name,\r\n      nodes: compose([\r\n        sortBy(\"balance\"),\r\n        map(({ id, name, balance }) => ({\r\n          amount: balance,\r\n          id,\r\n          name\r\n        }))\r\n      ])(accounts)\r\n    }))\r\n  ])(accountsByGroup);\r\n};\r\n\r\nconst NetWorthAccounts = ({\r\n  accounts,\r\n  hiddenAccounts,\r\n  onToggleAccounts,\r\n  investmentAccounts,\r\n  mortgageAccounts\r\n}) => {\r\n  const accountsById = keyBy(\"id\")(accounts);\r\n  const nodes = getNodes({\r\n    accounts,\r\n    investmentAccounts,\r\n    mortgageAccounts\r\n  });\r\n\r\n  return (\r\n    <CollapsibleSection title=\"Accounts\">\r\n      <AccountBreakdown\r\n        accountsById={accountsById}\r\n        hiddenAccounts={hiddenAccounts}\r\n        nodes={nodes}\r\n        onToggleAccounts={onToggleAccounts}\r\n      />\r\n    </CollapsibleSection>\r\n  );\r\n};\r\n\r\nNetWorthAccounts.propTypes = {\r\n  accounts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      balance: PropTypes.number.isRequired,\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired\r\n    })\r\n  ).isRequired,\r\n  hiddenAccounts: PropTypes.objectOf(PropTypes.bool).isRequired,\r\n  investmentAccounts: PropTypes.objectOf(PropTypes.bool).isRequired,\r\n  mortgageAccounts: PropTypes.objectOf(PropTypes.bool).isRequired,\r\n  onToggleAccounts: PropTypes.func.isRequired\r\n};\r\n\r\nconst AccountBreakdown = ({\r\n  accountsById,\r\n  hiddenAccounts,\r\n  nodes,\r\n  onToggleAccounts\r\n}) => (\r\n  <Breakdown\r\n    nodes={nodes}\r\n    valueRenderer={({ id, amount }) => {\r\n      const node = nodes.find(propEq(\"id\", id));\r\n      const accounts = node ? node.accounts : [accountsById[id]];\r\n\r\n      return (\r\n        <SecondaryText style={{ display: \"flex\", alignItems: \"center\" }}>\r\n          <Amount amount={amount} />\r\n          <div\r\n            style={{ display: \"flex\", alignItems: \"center\", marginLeft: 10 }}\r\n          >\r\n            <Toggle\r\n              onClick={evt => {\r\n                evt.stopPropagation();\r\n                onToggleAccounts({ ids: map(\"id\")(accounts) });\r\n              }}\r\n              on={!every(account => hiddenAccounts[account.id])(accounts)}\r\n            />\r\n          </div>\r\n        </SecondaryText>\r\n      );\r\n    }}\r\n  />\r\n);\r\n\r\nexport default NetWorthAccounts;\r\n","import React from \"react\";\r\nimport groupBy from \"lodash/fp/groupBy\";\r\nimport sumBy from \"lodash/fp/sumBy\";\r\nimport moment from \"moment\";\r\nimport CollapsibleSection from \"./CollapsibleSection\";\r\nimport Breakdown from \"./Breakdown\";\r\nimport { SecondaryText } from \"./typeComponents\";\r\nimport Amount from \"./Amount\";\r\n\r\nconst NetWorthChanges = ({ months, accountSummaries, hiddenAccounts }) => {\r\n  const totals = months.map(month => ({ month, total: 0 }));\r\n  accountSummaries.forEach(({ id, data }) => {\r\n    if (hiddenAccounts[id]) {\r\n      return;\r\n    }\r\n\r\n    data.forEach((num, index) => {\r\n      totals[index].total += num;\r\n    });\r\n  });\r\n\r\n  const changes = totals\r\n    .map((t, i) => ({\r\n      year: t.month.slice(0, 4),\r\n      month: t.month,\r\n      change: i === 0 ? null : t.total - totals[i - 1].total\r\n    }))\r\n    .reverse();\r\n\r\n  const years = groupBy(\"year\")(changes);\r\n\r\n  const nodes = Object.keys(years)\r\n    .sort()\r\n    .reverse()\r\n    .map(year => ({\r\n      amount: sumBy(\"change\")(years[year]),\r\n      id: year,\r\n      name: year,\r\n      nodes: years[year].map(v => ({\r\n        amount: v.change,\r\n        name: moment(v.month).format(\"MMMM\"),\r\n        id: v.month\r\n      }))\r\n    }));\r\n\r\n  return (\r\n    <CollapsibleSection title=\"Net Worth Changes\">\r\n      <Breakdown\r\n        nodes={nodes}\r\n        valueRenderer={({ faded, amount }) => (\r\n          <SecondaryText style={{ opacity: faded ? 0.3 : 1 }}>\r\n            <Amount amount={amount} positiveColor=\"green\" negativeColor=\"red\" />\r\n          </SecondaryText>\r\n        )}\r\n      />\r\n    </CollapsibleSection>\r\n  );\r\n};\r\n\r\nexport default NetWorthChanges;\r\n","import React, { Fragment, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport compose from \"lodash/fp/compose\";\r\nimport constant from \"lodash/fp/constant\";\r\nimport eq from \"lodash/fp/eq\";\r\nimport filter from \"lodash/fp/filter\";\r\nimport findIndex from \"lodash/fp/findIndex\";\r\nimport groupBy from \"lodash/fp/groupBy\";\r\nimport identity from \"lodash/fp/identity\";\r\nimport keyBy from \"lodash/fp/keyBy\";\r\nimport keys from \"lodash/fp/keys\";\r\nimport last from \"lodash/fp/last\";\r\nimport map from \"lodash/fp/map\";\r\nimport mapValues from \"lodash/fp/mapValues\";\r\nimport omitBy from \"lodash/fp/omitBy\";\r\nimport sortBy from \"lodash/fp/sortBy\";\r\nimport sum from \"lodash/fp/sum\";\r\nimport sumBy from \"lodash/fp/sumBy\";\r\nimport values from \"lodash/fp/values\";\r\nimport { simpleMemoize } from \"../dataUtils\";\r\nimport { useSelectedMonth } from \"../commonHooks\";\r\nimport { getSetting, setSetting } from \"../uiRepo\";\r\nimport PageLayout from \"./PageLayout\";\r\nimport CollapsibleSection from \"./CollapsibleSection\";\r\nimport ChartNumbers from \"./ChartNumbers\";\r\nimport NetWorthChart from \"./NetWorthChart\";\r\nimport NetWorthAccounts from \"./NetWorthAccounts\";\r\nimport NetWorthChanges from \"./NetWorthChanges\";\r\n\r\nconst useHiddenAccounts = budget => {\r\n  const [hiddenAccounts, setHiddenAccounts] = useState(\r\n    getSetting(\"netWorthHiddenAccounts\", budget.id)\r\n  );\r\n\r\n  const onToggleHiddenAccounts = ({ ids }) => {\r\n    const shouldHide = ids.some(id => !hiddenAccounts[id]);\r\n    const newHiddenAccounts = ids.reduce(\r\n      (acc, id) => ({ ...acc, [id]: shouldHide }),\r\n      hiddenAccounts\r\n    );\r\n\r\n    setHiddenAccounts(newHiddenAccounts);\r\n    setSetting(\"netWorthHiddenAccounts\", budget.id, newHiddenAccounts);\r\n  };\r\n\r\n  return { hiddenAccounts, onToggleHiddenAccounts };\r\n};\r\n\r\nconst cumulative = arr =>\r\n  arr.reduce(\r\n    (acc, curr) => (acc.length === 0 ? [curr] : acc.concat(last(acc) + curr)),\r\n    []\r\n  );\r\n\r\nconst groupByMonthAndAccount = simpleMemoize(\r\n  compose([\r\n    mapValues(groupBy(\"account_id\")),\r\n    groupBy(({ date }) => date.slice(0, 7))\r\n  ])\r\n);\r\n\r\nconst getMonths = simpleMemoize(budget =>\r\n  compose([sortBy(identity), keys, groupByMonthAndAccount])(budget.transactions)\r\n);\r\n\r\nconst getSummaryByAccount = simpleMemoize(budget => {\r\n  const groupedTransactions = groupByMonthAndAccount(budget.transactions);\r\n  const months = getMonths(budget);\r\n  return map(({ id }) => ({\r\n    id,\r\n    data: compose([\r\n      cumulative,\r\n      map(month => sumBy(\"amount\")(groupedTransactions[month][id]))\r\n    ])(months)\r\n  }))(budget.accounts);\r\n});\r\n\r\nconst getSelectedBalances = simpleMemoize((selectedMonth, budget) => {\r\n  const months = getMonths(budget);\r\n  const selectedMonthIndex = findIndex(eq(selectedMonth))(months);\r\n  const accountSummaries = getSummaryByAccount(budget);\r\n\r\n  return compose([\r\n    mapValues(({ data }) =>\r\n      selectedMonthIndex > -1 ? data[selectedMonthIndex] : last(data)\r\n    ),\r\n    keyBy(\"id\")\r\n  ])(accountSummaries);\r\n});\r\n\r\nconst NetWorthPage = ({\r\n  budget,\r\n  historyAction,\r\n  investmentAccounts,\r\n  location,\r\n  mortgageAccounts,\r\n  sidebarTrigger,\r\n  title\r\n}) => {\r\n  const [selectedMonth, onSelectMonth] = useSelectedMonth();\r\n  const { hiddenAccounts, onToggleHiddenAccounts } = useHiddenAccounts(budget);\r\n  const months = getMonths(budget);\r\n  const accountSummaries = getSummaryByAccount(budget);\r\n  const selectedBalances = getSelectedBalances(selectedMonth, budget);\r\n  const filterHidden = omitBy((_, id) => hiddenAccounts[id]);\r\n  const selectedLiabilities = compose([\r\n    sum,\r\n    filter(b => b < 0),\r\n    values,\r\n    filterHidden\r\n  ])(selectedBalances);\r\n  const selectedAssets = compose([\r\n    sum,\r\n    filter(b => b > 0),\r\n    values,\r\n    filterHidden\r\n  ])(selectedBalances);\r\n\r\n  return (\r\n    <PageLayout\r\n      historyAction={historyAction}\r\n      location={location}\r\n      sidebarTrigger={sidebarTrigger}\r\n      title={title}\r\n      content={\r\n        <Fragment>\r\n          <CollapsibleSection title=\"Monthly Trend\">\r\n            <ChartNumbers\r\n              alwaysRound\r\n              expectPositive\r\n              numbers={[\r\n                {\r\n                  amount: selectedAssets + selectedLiabilities,\r\n                  label: \"Net Worth\"\r\n                },\r\n                { amount: selectedAssets, label: \"Assets\" },\r\n                { amount: -selectedLiabilities, label: \"Liabilities\" }\r\n              ]}\r\n            />\r\n            <NetWorthChart\r\n              data={map(({ id, data }) => ({\r\n                data: hiddenAccounts[id] ? data.map(constant(0)) : data,\r\n                type: budget.accountsById[id].type,\r\n                id\r\n              }))(accountSummaries)}\r\n              months={months}\r\n              mortgageAccounts={mortgageAccounts}\r\n              selectedMonth={selectedMonth}\r\n              onSelectMonth={onSelectMonth}\r\n            />\r\n          </CollapsibleSection>\r\n          <NetWorthAccounts\r\n            accounts={map(account => ({\r\n              ...account,\r\n              balance: selectedBalances[account.id]\r\n            }))(budget.accounts)}\r\n            hiddenAccounts={hiddenAccounts}\r\n            investmentAccounts={investmentAccounts}\r\n            mortgageAccounts={mortgageAccounts}\r\n            onToggleAccounts={onToggleHiddenAccounts}\r\n          />\r\n          <NetWorthChanges\r\n            accountSummaries={accountSummaries}\r\n            hiddenAccounts={hiddenAccounts}\r\n            months={months}\r\n          />\r\n        </Fragment>\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nNetWorthPage.propTypes = {\r\n  budget: PropTypes.shape({\r\n    accounts: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        id: PropTypes.string.isRequired,\r\n        name: PropTypes.string.isRequired,\r\n        type: PropTypes.string.isRequired\r\n      })\r\n    ).isRequired,\r\n    accountsById: PropTypes.objectOf(\r\n      PropTypes.shape({\r\n        id: PropTypes.string.isRequired,\r\n        name: PropTypes.string.isRequired,\r\n        type: PropTypes.string.isRequired\r\n      })\r\n    ).isRequired,\r\n    transactions: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        id: PropTypes.string.isRequired,\r\n        account_id: PropTypes.string.isRequired,\r\n        amount: PropTypes.number.isRequired,\r\n        date: PropTypes.string.isRequired\r\n      })\r\n    ).isRequired\r\n  }).isRequired,\r\n  historyAction: PropTypes.string.isRequired,\r\n  investmentAccounts: PropTypes.objectOf(PropTypes.bool).isRequired,\r\n  location: PropTypes.string.isRequired,\r\n  mortgageAccounts: PropTypes.objectOf(PropTypes.bool).isRequired,\r\n  sidebarTrigger: PropTypes.node.isRequired,\r\n  title: PropTypes.string.isRequired\r\n};\r\n\r\nexport default NetWorthPage;\r\n","import React, { Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport keys from \"lodash/fp/keys\";\r\nimport get from \"lodash/fp/get\";\r\nimport EmptyText from \"./EmptyText\";\r\nimport { Link } from \"react-router-dom\";\r\nimport pages, { makeLink } from \"../pages\";\r\nimport PageLayout from \"./PageLayout\";\r\nimport MonthByMonthSection from \"./MonthByMonthSection\";\r\nimport { getTransactionMonth } from \"../budgetUtils\";\r\nimport GenericEntitiesSection from \"./GenericEntitiesSection\";\r\nimport {\r\n  useMonthExclusions,\r\n  useSelectedEntityId,\r\n  useSelectedMonth\r\n} from \"../commonHooks\";\r\n\r\nconst isContribution = investmentAccounts => transaction =>\r\n  !!investmentAccounts[transaction.account_id] &&\r\n  !!transaction.transfer_account_id &&\r\n  !investmentAccounts[transaction.transfer_account_id];\r\n\r\nconst isCapitalGainOrLoss = (investmentAccounts, payeesById) => transaction =>\r\n  !!investmentAccounts[transaction.account_id] &&\r\n  !transaction.transfer_account_id &&\r\n  get([transaction.payee_id, \"name\"])(payeesById) !== \"Starting Balance\";\r\n\r\nconst isInvestmentTransaction = (\r\n  investmentAccounts,\r\n  payeesById\r\n) => transaction =>\r\n  isContribution(investmentAccounts)(transaction) ||\r\n  isCapitalGainOrLoss(investmentAccounts, payeesById)(transaction);\r\n\r\nconst InvestmentsPage = ({\r\n  budget,\r\n  historyAction,\r\n  investmentAccounts,\r\n  location,\r\n  sidebarTrigger,\r\n  title\r\n}) => {\r\n  const {\r\n    excludeFirstMonth,\r\n    excludeLastMonth,\r\n    months,\r\n    onSetExclusion\r\n  } = useMonthExclusions(budget);\r\n  const [selectedMonth, onSelectMonth] = useSelectedMonth();\r\n  const [selectedBreakdown, onSelectBreakdown] = useSelectedEntityId();\r\n\r\n  const { payeesById } = budget;\r\n\r\n  if (keys(investmentAccounts).length === 0) {\r\n    return (\r\n      <EmptyText>\r\n        You don't have any accounts marked as investment accounts.{\" \"}\r\n        <Link to={makeLink(pages.settings.path, { budgetId: budget.id })}>\r\n          Go to Settings\r\n        </Link>\r\n      </EmptyText>\r\n    );\r\n  }\r\n\r\n  const investmentTransactions = budget.transactions.filter(\r\n    isInvestmentTransaction(investmentAccounts, payeesById)\r\n  );\r\n  const transactionsInMonth =\r\n    selectedMonth &&\r\n    investmentTransactions.filter(\r\n      transaction => getTransactionMonth(transaction) === selectedMonth\r\n    );\r\n\r\n  return (\r\n    <PageLayout\r\n      historyAction={historyAction}\r\n      location={location}\r\n      sidebarTrigger={sidebarTrigger}\r\n      title={title}\r\n      content={\r\n        <Fragment>\r\n          <MonthByMonthSection\r\n            excludeFirstMonth={excludeFirstMonth}\r\n            excludeLastMonth={excludeLastMonth}\r\n            expectPositive\r\n            highlightFunction={\r\n              selectedBreakdown &&\r\n              (transaction =>\r\n                selectedBreakdown === \"contribution\"\r\n                  ? isContribution(investmentAccounts)(transaction)\r\n                  : isCapitalGainOrLoss(investmentAccounts, payeesById)(\r\n                      transaction\r\n                    ))\r\n            }\r\n            months={months}\r\n            selectedMonth={selectedMonth}\r\n            transactions={investmentTransactions}\r\n            onSelectMonth={onSelectMonth}\r\n            onSetExclusion={onSetExclusion}\r\n          />\r\n          <GenericEntitiesSection\r\n            transactions={transactionsInMonth || investmentTransactions}\r\n            entitiesById={{\r\n              contribution: { name: \"Contributions\" },\r\n              capitalGain: { name: \"Capital Gains/Losses\" }\r\n            }}\r\n            expectPositive\r\n            title=\"Growth Breakdown\"\r\n            onClickEntity={onSelectBreakdown}\r\n            selectedEntityId={selectedBreakdown}\r\n            entityFunction={transaction =>\r\n              isContribution(investmentAccounts)(transaction)\r\n                ? \"contribution\"\r\n                : \"capitalGain\"\r\n            }\r\n            positiveIsRed\r\n          />\r\n        </Fragment>\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nInvestmentsPage.propTypes = {\r\n  budget: PropTypes.object.isRequired,\r\n  historyAction: PropTypes.string.isRequired,\r\n  investmentAccounts: PropTypes.object.isRequired,\r\n  location: PropTypes.string.isRequired,\r\n  sidebarTrigger: PropTypes.node.isRequired,\r\n  title: PropTypes.string.isRequired\r\n};\r\n\r\nexport default InvestmentsPage;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  primaryColor,\r\n  negativeColor,\r\n  selectedPlotBandColor\r\n} from \"../styleVariables\";\r\nimport Chart from \"./Chart\";\r\n\r\nconst ProjectionsChart = ({\r\n  investmentsProjection,\r\n  mortgageProjection,\r\n  amountNeededToRetire,\r\n  yearsUntilRetirement\r\n}) => (\r\n  <Chart\r\n    options={{\r\n      chart: {\r\n        type: \"column\"\r\n      },\r\n      xAxis: {\r\n        type: \"category\",\r\n        plotBands: [\r\n          {\r\n            color: selectedPlotBandColor,\r\n            from: Math.floor(yearsUntilRetirement) - 0.5,\r\n            to: Math.floor(yearsUntilRetirement) + 0.5\r\n          }\r\n        ]\r\n      },\r\n      yAxis: {\r\n        title: { text: null },\r\n        endOnTick: false,\r\n        plotLines: [\r\n          {\r\n            value: amountNeededToRetire,\r\n            color: \"#ccc\",\r\n            width: 1\r\n          }\r\n        ]\r\n      },\r\n      legend: {\r\n        enabled: false\r\n      },\r\n      series: [\r\n        { data: investmentsProjection, color: primaryColor, borderWidth: 0 },\r\n        { data: mortgageProjection, color: negativeColor, borderWidth: 0 }\r\n      ]\r\n    }}\r\n  />\r\n);\r\n\r\nProjectionsChart.propTypes = {\r\n  amountNeededToRetire: PropTypes.number.isRequired,\r\n  investmentsProjection: PropTypes.arrayOf(PropTypes.number).isRequired,\r\n  mortgageProjection: PropTypes.arrayOf(PropTypes.number).isRequired,\r\n  yearsUntilRetirement: PropTypes.number.isRequired\r\n};\r\n\r\nexport default ProjectionsChart;\r\n","import { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst isDescendant = (parent, child) => {\r\n  let node = child.parentNode;\r\n  while (node !== null) {\r\n    if (node === parent) {\r\n      return true;\r\n    }\r\n    node = node.parentNode;\r\n  }\r\n  return false;\r\n};\r\n\r\nclass ClickOff extends Component {\r\n  static propTypes = {\r\n    children: PropTypes.func.isRequired,\r\n    onClickOff: PropTypes.func\r\n  };\r\n\r\n  parent = null;\r\n\r\n  componentDidMount() {\r\n    document.body.addEventListener(\"click\", this.handleBodyClick);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.body.removeEventListener(\"click\", this.handleBodyClick);\r\n  }\r\n\r\n  handleBodyClick = evt => {\r\n    if (this.props.onClickOff && !isDescendant(this.parent, evt.target)) {\r\n      this.props.onClickOff();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return this.props.children({\r\n      ref: el => {\r\n        this.parent = el;\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default ClickOff;\r\n","import React from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport AnimateHeight from \"react-animate-height-auto\";\r\nimport ClickOff from \"./ClickOff\";\r\nimport Button from \"./Button\";\r\n\r\nconst bodyEl = document.getElementsByTagName(\"body\")[0];\r\n\r\nconst Container = styled.div`\r\n  position: fixed;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  background-color: #fff;\r\n`;\r\n\r\nconst ProjectionsSlider = ({\r\n  name,\r\n  formatter,\r\n  label,\r\n  value,\r\n  onBlur,\r\n  onChange,\r\n  onReset,\r\n  rangeOptions\r\n}) =>\r\n  createPortal(\r\n    <ClickOff onClickOff={name && onBlur}>\r\n      {({ ref }) => (\r\n        <Container ref={ref}>\r\n          <AnimateHeight isExpanded={!!name}>\r\n            <div style={{ borderTop: \"1px solid #bbb\", padding: \"15px 20px\" }}>\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"space-between\",\r\n                  alignItems: \"center\",\r\n                  marginBottom: 15\r\n                }}\r\n              >\r\n                {label}: {formatter(value || 0)}\r\n                <Button\r\n                  onClick={() => {\r\n                    onReset(name);\r\n                  }}\r\n                >\r\n                  reset\r\n                </Button>\r\n              </div>\r\n              <Range\r\n                {...rangeOptions}\r\n                name={name}\r\n                value={value || 0}\r\n                onChange={onChange}\r\n              />\r\n            </div>\r\n          </AnimateHeight>\r\n        </Container>\r\n      )}\r\n    </ClickOff>,\r\n    bodyEl\r\n  );\r\n\r\nProjectionsSlider.propTypes = {\r\n  onChange: PropTypes.func.isRequired,\r\n  onReset: PropTypes.func.isRequired,\r\n  formatter: PropTypes.func,\r\n  label: PropTypes.string,\r\n  name: PropTypes.string,\r\n  value: PropTypes.number\r\n};\r\n\r\nProjectionsSlider.defaultProps = {\r\n  formatter: val => val\r\n};\r\n\r\nconst Range = ({ name, onReset, ...other }) => (\r\n  <input\r\n    {...other}\r\n    name={name}\r\n    type=\"range\"\r\n    style={{ display: \"block\", width: \"100%\" }}\r\n  />\r\n);\r\n\r\nexport default ProjectionsSlider;\r\n","import React, { Fragment, PureComponent } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport chunk from \"lodash/fp/chunk\";\r\nimport compose from \"lodash/fp/compose\";\r\nimport get from \"lodash/fp/get\";\r\nimport head from \"lodash/fp/head\";\r\nimport map from \"lodash/fp/map\";\r\nimport pick from \"lodash/fp/pick\";\r\nimport range from \"lodash/fp/range\";\r\nimport { simpleMemoize, keyByProp } from \"../dataUtils\";\r\nimport { selectedPlotBandColor } from \"../styleVariables\";\r\nimport {\r\n  getMortgageRate,\r\n  getReturnOnInvestments,\r\n  getAverageContribution,\r\n  getCurrentInvestments,\r\n  getAverageExpensesWithoutMortgage,\r\n  getProjection,\r\n  getProjectionWithRetirement\r\n} from \"../projectionUtils\";\r\nimport PageLayout from \"./PageLayout\";\r\nimport Icon from \"./Icon\";\r\nimport CollapsibleSection from \"./CollapsibleSection\";\r\nimport ProjectionsChart from \"./ProjectionsChart\";\r\nimport ProjectionsSlider from \"./ProjectionsSlider\";\r\nimport ChartNumbers from \"./ChartNumbers\";\r\n\r\nconst YEARS_TO_PROJECT = 50;\r\n\r\nconst adjustableEntries = [\r\n  {\r\n    label: \"Average monthly contribution\",\r\n    name: \"averageContribution\",\r\n    formatter: val => `$${Math.round(val)}`\r\n  },\r\n  {\r\n    label: \"Average return on investments\",\r\n    name: \"returnOnInvestments\",\r\n    formatter: val => `${(val * 100).toFixed(1)}%`\r\n  },\r\n  {\r\n    label: \"Average expenses without mortgage\",\r\n    name: \"averageExpenses\",\r\n    formatter: val => `$${Math.round(val)}`\r\n  },\r\n  {\r\n    label: \"Return on investment after retirement\",\r\n    name: \"retirementReturns\",\r\n    formatter: val => `${(val * 100).toFixed(1)}%`\r\n  },\r\n  {\r\n    label: \"Average tax rate after retirement\",\r\n    name: \"retirementTaxRate\",\r\n    formatter: val => `${(val * 100).toFixed(1)}%`\r\n  }\r\n];\r\n\r\nconst adjustableEntriesByName = keyByProp(\"name\")(adjustableEntries);\r\n\r\nconst getInitialState = simpleMemoize(\r\n  (budget, investmentAccounts, mortgageAccounts) => {\r\n    const {\r\n      paymentsLeft: remainingMortgagePayments,\r\n      mortgagePayment,\r\n      principalProjection: mortgageProjection\r\n    } = getMortgageRate(budget, mortgageAccounts) || {};\r\n    const returnOnInvestments = getReturnOnInvestments(\r\n      budget,\r\n      investmentAccounts\r\n    );\r\n    const averageContribution = getAverageContribution(\r\n      budget,\r\n      investmentAccounts\r\n    );\r\n    const currentInvestments = getCurrentInvestments(\r\n      budget,\r\n      investmentAccounts\r\n    );\r\n    const averageExpenses = getAverageExpensesWithoutMortgage(\r\n      budget,\r\n      investmentAccounts,\r\n      mortgageAccounts\r\n    );\r\n\r\n    return {\r\n      mortgagePayment,\r\n      remainingMortgagePayments,\r\n      mortgageProjection,\r\n      returnOnInvestments,\r\n      averageContribution,\r\n      currentInvestments,\r\n      averageExpenses,\r\n      retirementReturns: 0.04,\r\n      retirementTaxRate: 0.15,\r\n      maxAverageExpenses: Math.ceil((averageExpenses * 2) / 1000) * 1000,\r\n      maxAverageContribution: Math.ceil((averageContribution * 2) / 1000) * 1000\r\n    };\r\n  }\r\n);\r\n\r\nclass ProjectionsPage extends PureComponent {\r\n  static propTypes = {\r\n    budget: PropTypes.shape({\r\n      transactions: PropTypes.array.isRequired\r\n    }).isRequired,\r\n    historyAction: PropTypes.string.isRequired,\r\n    investmentAccounts: PropTypes.objectOf(PropTypes.bool).isRequired,\r\n    location: PropTypes.string.isRequired,\r\n    mortgageAccounts: PropTypes.objectOf(PropTypes.bool).isRequired,\r\n    sidebarTrigger: PropTypes.node.isRequired,\r\n    title: PropTypes.string.isRequired\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      ...getInitialState(\r\n        props.budget,\r\n        props.investmentAccounts,\r\n        props.mortgageAccounts\r\n      ),\r\n      adjustingName: null\r\n    };\r\n  }\r\n\r\n  handleChange = e => {\r\n    this.setState({ [e.target.name]: parseFloat(e.target.value) });\r\n  };\r\n\r\n  handleSelectAdjusting = name => {\r\n    this.setState(state => ({\r\n      adjustingName: state.adjustingName === name ? null : name\r\n    }));\r\n  };\r\n\r\n  handleClearSelection = () => {\r\n    this.setState({ adjustingName: null });\r\n  };\r\n\r\n  handleResetCalculation = calculation => {\r\n    const { budget, investmentAccounts, mortgageAccounts } = this.props;\r\n    this.setState(\r\n      pick(calculation)(\r\n        getInitialState(budget, investmentAccounts, mortgageAccounts)\r\n      )\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { historyAction, location, sidebarTrigger, title } = this.props;\r\n    const {\r\n      mortgagePayment,\r\n      remainingMortgagePayments,\r\n      mortgageProjection,\r\n      returnOnInvestments,\r\n      averageContribution,\r\n      currentInvestments,\r\n      averageExpenses,\r\n      retirementReturns,\r\n      retirementTaxRate,\r\n      maxAverageExpenses,\r\n      maxAverageContribution,\r\n      adjustingName\r\n    } = this.state;\r\n\r\n    const projection = getProjection({\r\n      numMonths: YEARS_TO_PROJECT * 12,\r\n      returnOnInvestments,\r\n      averageContribution,\r\n      currentInvestments\r\n    });\r\n    const monthlyRetirementReturn = (1 + retirementReturns) ** (1 / 12) - 1;\r\n    const amountNeededToRetire =\r\n      averageExpenses / (monthlyRetirementReturn * (1 - retirementTaxRate));\r\n    let m = 0;\r\n\r\n    while (m < projection.length) {\r\n      if (m < remainingMortgagePayments) {\r\n        const remainingMortgage = range(\r\n          0,\r\n          remainingMortgagePayments - m\r\n        ).reduce(\r\n          (acc, curr) =>\r\n            acc +\r\n            mortgagePayment /\r\n              (1 + monthlyRetirementReturn * (1 - retirementTaxRate)) ** curr,\r\n          0\r\n        );\r\n        if (\r\n          (projection[m] - remainingMortgage) *\r\n            monthlyRetirementReturn *\r\n            (1 - retirementTaxRate) >\r\n          averageExpenses\r\n        ) {\r\n          break;\r\n        }\r\n      } else {\r\n        if (\r\n          projection[m] * monthlyRetirementReturn * (1 - retirementTaxRate) >\r\n          averageExpenses\r\n        ) {\r\n          break;\r\n        }\r\n      }\r\n      m += 1;\r\n    }\r\n\r\n    const projectionWithRetirement = getProjectionWithRetirement({\r\n      numMonths: YEARS_TO_PROJECT * 12,\r\n      returnOnInvestments,\r\n      averageContribution,\r\n      currentInvestments,\r\n      monthsBeforeRetirement: m,\r\n      monthlyExpenses: averageExpenses,\r\n      retirementReturns,\r\n      retirementTaxRate,\r\n      remainingMortgagePayments,\r\n      mortgagePayment\r\n    });\r\n    const hasMortgage = !!mortgagePayment;\r\n\r\n    const yearsUntilRetirement = m / 12;\r\n    const projectionByYear = compose([map(head), chunk(12)])(\r\n      projectionWithRetirement\r\n    );\r\n    const mortgageProjectionByYear = compose([map(head), chunk(12)])(\r\n      mortgageProjection\r\n    );\r\n\r\n    const nameToRangeOptions = {\r\n      averageContribution: { min: 0, max: maxAverageContribution, step: 50 },\r\n      returnOnInvestments: { min: 0, max: 0.2, step: 0.001 },\r\n      averageExpenses: { min: 0, max: maxAverageExpenses, step: 50 },\r\n      retirementReturns: { min: 0, max: 0.2, step: 0.001 },\r\n      retirementTaxRate: { min: 0, max: 0.5, step: 0.001 }\r\n    };\r\n\r\n    return (\r\n      <PageLayout\r\n        historyAction={historyAction}\r\n        location={location}\r\n        sidebarTrigger={sidebarTrigger}\r\n        title={title}\r\n        content={\r\n          <Fragment>\r\n            <CollapsibleSection title=\"Projection\">\r\n              <ChartNumbers\r\n                numbers={[\r\n                  {\r\n                    amount: -amountNeededToRetire,\r\n                    label: \"needed for retirement\",\r\n                    decimalsToRound: 0\r\n                  },\r\n                  {\r\n                    amount: -yearsUntilRetirement,\r\n                    label: \"years to retirement\",\r\n                    isMoney: false,\r\n                    decimalsToRound: 1\r\n                  }\r\n                ]}\r\n              />\r\n              <ProjectionsChart\r\n                investmentsProjection={projectionByYear}\r\n                mortgageProjection={mortgageProjectionByYear}\r\n                amountNeededToRetire={amountNeededToRetire}\r\n                yearsUntilRetirement={yearsUntilRetirement}\r\n              />\r\n            </CollapsibleSection>\r\n            <CollapsibleSection title=\"Assumptions\">\r\n              {adjustableEntries.map(({ label, name, formatter }) => (\r\n                <AdjustableEntry\r\n                  key={name}\r\n                  label={label}\r\n                  name={name}\r\n                  value={this.state[name]}\r\n                  formatter={formatter}\r\n                  isAdjusting={adjustingName === name}\r\n                  onSelect={this.handleSelectAdjusting}\r\n                  onReset={this.handleResetCalculation}\r\n                  onChange={this.handleChange}\r\n                />\r\n              ))}\r\n              {hasMortgage && (\r\n                <Fragment>\r\n                  <Entry\r\n                    label=\"Mortgage payment\"\r\n                    value={mortgagePayment}\r\n                    formatter={val => `$${val.toFixed(2)}`}\r\n                  />\r\n                  <Entry\r\n                    label=\"Time remaining on mortgage\"\r\n                    value={remainingMortgagePayments}\r\n                    formatter={val => `${(val / 12).toFixed(1)} years`}\r\n                  />\r\n                </Fragment>\r\n              )}\r\n            </CollapsibleSection>\r\n            <ProjectionsSlider\r\n              name={adjustingName}\r\n              label={get([adjustingName, \"label\"])(adjustableEntriesByName)}\r\n              onReset={this.handleResetCalculation}\r\n              onChange={this.handleChange}\r\n              onBlur={this.handleClearSelection}\r\n              formatter={get([adjustingName, \"formatter\"])(\r\n                adjustableEntriesByName\r\n              )}\r\n              value={this.state[adjustingName]}\r\n              rangeOptions={nameToRangeOptions[adjustingName]}\r\n            />\r\n          </Fragment>\r\n        }\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nconst AdjustableEntry = ({\r\n  label,\r\n  value,\r\n  formatter,\r\n  name,\r\n  onSelect,\r\n  isAdjusting\r\n}) => (\r\n  <Entry\r\n    label={label}\r\n    value={value}\r\n    formatter={formatter}\r\n    onClick={() => {\r\n      onSelect(name);\r\n    }}\r\n    highlightValue={isAdjusting}\r\n    isAdjustable\r\n  />\r\n);\r\n\r\nconst Entry = ({\r\n  label,\r\n  value,\r\n  onClick,\r\n  highlightValue,\r\n  isAdjustable,\r\n  formatter = a => a\r\n}) => (\r\n  <div\r\n    style={{\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      justifyContent: \"space-between\",\r\n      padding: \"2px 0\"\r\n    }}\r\n  >\r\n    {label}:\r\n    <div style={{ display: \"flex\", alignItems: \"center\" }} onClick={onClick}>\r\n      <strong\r\n        style={{\r\n          backgroundColor: highlightValue ? selectedPlotBandColor : null,\r\n          padding: isAdjustable && \"0 4px\",\r\n          borderRadius: 2\r\n        }}\r\n      >\r\n        {formatter(value)}\r\n      </strong>\r\n      {isAdjustable && <Icon icon=\"pencil\" faded style={{ marginLeft: 4 }} />}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default ProjectionsPage;\r\n","import moment from \"moment\";\r\nimport add from \"lodash/fp/add\";\r\nimport compose from \"lodash/fp/compose\";\r\nimport concat from \"lodash/fp/concat\";\r\nimport filter from \"lodash/fp/filter\";\r\nimport find from \"lodash/fp/find\";\r\nimport groupBy from \"lodash/fp/groupBy\";\r\nimport head from \"lodash/fp/head\";\r\nimport identity from \"lodash/fp/identity\";\r\nimport includes from \"lodash/fp/includes\";\r\nimport keys from \"lodash/fp/keys\";\r\nimport last from \"lodash/fp/last\";\r\nimport map from \"lodash/fp/map\";\r\nimport matches from \"lodash/fp/matches\";\r\nimport multiply from \"lodash/fp/multiply\";\r\nimport prop from \"lodash/fp/prop\";\r\nimport range from \"lodash/fp/range\";\r\nimport reduce from \"lodash/fp/reduce\";\r\nimport reject from \"lodash/fp/reject\";\r\nimport sortBy from \"lodash/fp/sortBy\";\r\nimport sumBy from \"lodash/fp/sumBy\";\r\nimport takeWhile from \"lodash/fp/takeWhile\";\r\nimport takeRightWhile from \"lodash/fp/takeRightWhile\";\r\nimport uniq from \"lodash/fp/uniq\";\r\nimport { getTransactionMonth } from \"./budgetUtils\";\r\n\r\nexport const getMortgageRate = (\r\n  { accounts, transactions: allTransactions },\r\n  mortgageAccounts\r\n) => {\r\n  const mortgageAccount = find(account => mortgageAccounts[account.id])(\r\n    accounts\r\n  );\r\n\r\n  if (!mortgageAccount) {\r\n    return null;\r\n  }\r\n\r\n  const transactions = compose([\r\n    sortBy(\"date\"),\r\n    filter(matches({ account_id: mortgageAccount.id }))\r\n  ])(allTransactions);\r\n  const lastMonth = compose([t => t.date.slice(0, 7), last])(transactions);\r\n  const lastMonthTransactions = takeRightWhile(\r\n    t => t.date.slice(0, 7) === lastMonth\r\n  )(transactions);\r\n\r\n  const P = -compose([\r\n    sumBy(\"amount\"),\r\n    takeWhile(t => t.date.slice(0, 7) !== lastMonth)\r\n  ])(transactions);\r\n  const P1 = P - sumBy(\"amount\")(lastMonthTransactions);\r\n  const c = compose([prop(\"amount\"), find(prop(\"transfer_account_id\"))])(\r\n    lastMonthTransactions\r\n  );\r\n  const r = (P1 + c) / P - 1;\r\n  const N = -Math.log(1 - (r * P) / c) / Math.log(1 + r);\r\n\r\n  const rate = r * 12;\r\n  const paymentsLeft = N - 1;\r\n\r\n  const projection = map(n => (1 + r) ** n * P - (((1 + r) ** n - 1) / r) * c)(\r\n    range(1, N)\r\n  );\r\n\r\n  return {\r\n    rate,\r\n    mortgagePayment: c,\r\n    paymentsLeft,\r\n    principalProjection: projection\r\n  };\r\n};\r\n\r\nexport const getCurrentInvestments = (\r\n  { accounts, transactions },\r\n  investmentAccounts\r\n) => {\r\n  const investmentAccountIds = compose([\r\n    filter(id => investmentAccounts[id]),\r\n    map(\"id\")\r\n  ])(accounts);\r\n\r\n  return compose([\r\n    sumBy(\"amount\"),\r\n    filter(({ account_id: accountId }) =>\r\n      includes(accountId)(investmentAccountIds)\r\n    )\r\n  ])(transactions);\r\n};\r\n\r\nexport const getReturnOnInvestments = (\r\n  { accounts, payees, transactions: allTransactions },\r\n  investmentAccounts\r\n) => {\r\n  const investmentAccountIds = compose([\r\n    filter(id => investmentAccounts[id]),\r\n    map(\"id\")\r\n  ])(accounts);\r\n\r\n  const transactionsByMonth = compose([\r\n    groupBy(tr => tr.date.slice(0, 7)),\r\n    reject(t => includes(t.transfer_account_id)(investmentAccountIds)), // remove transfers between investment accounts\r\n    filter(t => includes(t.account_id)(investmentAccountIds))\r\n  ])(allTransactions);\r\n\r\n  let startForMonth = 0;\r\n  const returnRates = [];\r\n\r\n  const months = compose([sortBy(identity), keys])(transactionsByMonth);\r\n  map(month => transactionsByMonth[month])(months).forEach(trs => {\r\n    const contributions = compose([\r\n      sumBy(\"amount\"),\r\n      filter(prop(\"transfer_account_id\"))\r\n    ])(trs);\r\n    const gains = reject(prop(\"transfer_account_id\"))(trs);\r\n    const returns = sumBy(\"amount\")(gains);\r\n\r\n    if (startForMonth && gains.length) {\r\n      returnRates.push(returns / (startForMonth + 0.5 * contributions));\r\n    }\r\n\r\n    startForMonth += returns + contributions;\r\n  });\r\n\r\n  const totalReturn = compose([reduce(multiply, 1), map(add(1))])(returnRates);\r\n  const numMonths = returnRates.length;\r\n\r\n  return totalReturn ** (12 / numMonths) - 1;\r\n};\r\n\r\nexport const getAverageContribution = (\r\n  { accounts, transactions: allTransactions },\r\n  investmentAccounts\r\n) => {\r\n  const investmentAccountIds = compose([\r\n    filter(id => investmentAccounts[id]),\r\n    map(\"id\")\r\n  ])(accounts);\r\n\r\n  const contributions = compose([\r\n    filter(\r\n      ({ transfer_account_id: transferAccountId }) =>\r\n        transferAccountId && !includes(transferAccountId)(investmentAccountIds)\r\n    ),\r\n    filter(({ account_id: accountId }) =>\r\n      includes(accountId)(investmentAccountIds)\r\n    )\r\n  ])(allTransactions);\r\n\r\n  const months = compose([\r\n    sortBy(identity),\r\n    uniq,\r\n    map(d => d.slice(0, 7)),\r\n    map(\"date\")\r\n  ])(contributions);\r\n\r\n  const totalContributions = sumBy(\"amount\")(contributions);\r\n  const numMonths =\r\n    moment(last(months)).diff(moment(head(months)), \"months\") + 1;\r\n\r\n  return totalContributions / numMonths;\r\n};\r\n\r\nexport const getAverageExpensesWithoutMortgage = (\r\n  { transactions, accounts, payees, categoriesById, categoryGroupsById },\r\n  investmentAccounts,\r\n  mortgageAccounts\r\n) => {\r\n  const startingBalanceId = compose([\r\n    prop(\"id\"),\r\n    find(matches({ name: \"Starting Balance\" }))\r\n  ])(payees);\r\n  const months = compose([sortBy(identity), uniq, map(getTransactionMonth)])(\r\n    transactions\r\n  );\r\n\r\n  const mortgageAccountIds = compose([\r\n    filter(id => mortgageAccounts[id]),\r\n    map(\"id\")\r\n  ])(accounts);\r\n\r\n  const investmentAccountIds = compose([\r\n    filter(id => investmentAccounts[id]),\r\n    map(\"id\")\r\n  ])(accounts);\r\n\r\n  const totalExpenses = compose([\r\n    sumBy(\"amount\"),\r\n    reject(\r\n      tr =>\r\n        tr.amount > 0 &&\r\n        !tr.transfer_account_id &&\r\n        (!tr.category_id ||\r\n          !categoryGroupsById[categoriesById[tr.category_id].category_group_id])\r\n    ),\r\n    reject(tr =>\r\n      includes(tr.transfer_account_id)(\r\n        concat(mortgageAccountIds, investmentAccountIds)\r\n      )\r\n    ),\r\n    reject(tr =>\r\n      includes(tr.account_id)(concat(mortgageAccountIds, investmentAccountIds))\r\n    ),\r\n    reject(tr =>\r\n      includes(getTransactionMonth(tr))([head(months), last(months)])\r\n    ),\r\n    reject(matches({ payee_id: startingBalanceId }))\r\n  ])(transactions);\r\n\r\n  return -totalExpenses / (months.length - 2);\r\n};\r\n\r\nexport const getProjection = ({\r\n  numMonths,\r\n  returnOnInvestments,\r\n  averageContribution,\r\n  currentInvestments\r\n}) => {\r\n  const monthlyRate = (1 + returnOnInvestments) ** (1 / 12) - 1;\r\n  let amount = currentInvestments;\r\n  let projection = [];\r\n\r\n  do {\r\n    projection.push(amount);\r\n    amount +=\r\n      averageContribution + (amount + 0.5 * averageContribution) * monthlyRate;\r\n  } while (projection.length < numMonths);\r\n\r\n  return projection;\r\n};\r\n\r\nexport const getProjectionWithRetirement = ({\r\n  numMonths,\r\n  returnOnInvestments,\r\n  averageContribution,\r\n  currentInvestments,\r\n  monthsBeforeRetirement,\r\n  monthlyExpenses,\r\n  retirementReturns,\r\n  retirementTaxRate,\r\n  remainingMortgagePayments,\r\n  mortgagePayment\r\n}) => {\r\n  const monthlyRate = (1 + returnOnInvestments) ** (1 / 12) - 1;\r\n  const monthlyRetirementReturn = (1 + retirementReturns) ** (1 / 12) - 1;\r\n  let amount = currentInvestments;\r\n  let projection = [];\r\n\r\n  do {\r\n    projection.push(amount);\r\n    if (projection.length < monthsBeforeRetirement) {\r\n      amount +=\r\n        averageContribution +\r\n        (amount + 0.5 * averageContribution) * monthlyRate;\r\n    } else {\r\n      amount +=\r\n        amount * monthlyRetirementReturn * (1 - retirementTaxRate) -\r\n        monthlyExpenses;\r\n      if (projection.length < remainingMortgagePayments) {\r\n        amount -= mortgagePayment;\r\n      }\r\n    }\r\n  } while (projection.length < numMonths);\r\n\r\n  return projection;\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nconst Section = styled.div`\r\n  margin: ${props => (props.top ? \"0\" : \"3px\")};\r\n  padding: ${props =>\r\n    props.noPadding ? \"0\" : props.top ? \"15px 23px\" : \"15px 20px\"};\r\n  background-color: #fff;\r\n  border: 1px solid #e5e5e5;\r\n  border-width: ${props => (props.top ? \"0 0 1px\" : \"1px\")};\r\n  border-radius: 2px;\r\n`;\r\n\r\nexport default Section;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport omit from \"lodash/fp/omit\";\r\nimport ToggleWithLabel from \"./ToggleWithLabel\";\r\n\r\nconst AccountsSelectionForm = ({ accounts, value, onChange }) =>\r\n  accounts.map(({ id, name }) => (\r\n    <ToggleWithLabel\r\n      key={id}\r\n      checked={!!value[id]}\r\n      name={id}\r\n      onChange={evt => {\r\n        const { name, checked } = evt.target;\r\n\r\n        onChange(\r\n          checked\r\n            ? {\r\n                ...value,\r\n                [name]: true\r\n              }\r\n            : omit(name)(value)\r\n        );\r\n      }}\r\n      label={name}\r\n    />\r\n  ));\r\n\r\nAccountsSelectionForm.propTypes = {\r\n  accounts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired\r\n    })\r\n  ).isRequired,\r\n  value: PropTypes.objectOf(PropTypes.bool).isRequired,\r\n  onChange: PropTypes.func.isRequired\r\n};\r\n\r\nexport default AccountsSelectionForm;\r\n","import React, { Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport { MinorText, SecondaryText, StrongText } from \"./typeComponents\";\r\nimport Icon from \"./Icon\";\r\nimport EmptyText from \"./EmptyText\";\r\nimport Modal from \"./Modal\";\r\nimport AccountsSelectionForm from \"./AccountsSelectionForm\";\r\nimport { useFlagState } from \"../commonHooks\";\r\n\r\nconst SectionHeader = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`;\r\n\r\nconst SettingsInvestmentAccounts = ({ budget, investmentAccounts, onUpdateAccounts }) => {\r\n  const [\r\n    investmentModalOpen,\r\n    closeInvestmentModal,\r\n    openInvestmentModal\r\n  ] = useFlagState(false);\r\n\r\n  const potentialInvestmentAccounts = budget.accounts.filter(\r\n    account => account.type === \"otherAsset\" && !account.on_budget\r\n  );\r\n  const investmentAccountsList = budget.accounts.filter(\r\n    ({ id }) => investmentAccounts[id]\r\n  );\r\n\r\n  return (\r\n    <Fragment>\r\n      <SectionHeader>\r\n        <StrongText>Investment Accounts</StrongText>\r\n        <span onClick={openInvestmentModal}>\r\n          <Icon icon=\"pencil\" />\r\n        </span>\r\n      </SectionHeader>\r\n      {investmentAccountsList.length ? (\r\n        investmentAccountsList.map(({ id, name }) => (\r\n          <SecondaryText key={id}>{name}</SecondaryText>\r\n        ))\r\n      ) : (\r\n        <EmptyText>No accounts marked as investment</EmptyText>\r\n      )}\r\n      <MinorText style={{ marginTop: 10 }}>\r\n        Transfers to investment accounts are not counted as spending since it's\r\n        assumed it's for retirement or some other savings goal.\r\n      </MinorText>\r\n      <Modal\r\n        open={investmentModalOpen}\r\n        onClose={closeInvestmentModal}\r\n        title=\"Investment Accounts\"\r\n      >\r\n        <AccountsSelectionForm\r\n          accounts={potentialInvestmentAccounts}\r\n          value={investmentAccounts}\r\n          onChange={accountsObject => {\r\n            onUpdateAccounts({\r\n              type: \"investment\",\r\n              value: accountsObject\r\n            });\r\n          }}\r\n        />\r\n      </Modal>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nSettingsInvestmentAccounts.propTypes = {\r\n  budget: PropTypes.shape({\r\n    accounts: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        id: PropTypes.string.isRequired,\r\n        type: PropTypes.string.isRequired,\r\n        on_budget: PropTypes.bool.isRequired\r\n      })\r\n    ).isRequired\r\n  }).isRequired,\r\n  investmentAccounts: PropTypes.objectOf(PropTypes.bool).isRequired,\r\n  onUpdateAccounts: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default SettingsInvestmentAccounts;\r\n","import React, { Fragment } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport PropTypes from \"prop-types\";\r\nimport { MinorText, SecondaryText, StrongText } from \"./typeComponents\";\r\nimport Icon from \"./Icon\";\r\nimport EmptyText from \"./EmptyText\";\r\nimport Modal from \"./Modal\";\r\nimport AccountsSelectionForm from \"./AccountsSelectionForm\";\r\nimport { useFlagState } from \"../commonHooks\";\r\n\r\nconst SectionHeader = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`;\r\n\r\nconst SettingsMortgageAccounts = ({\r\n  budget,\r\n  mortgageAccounts,\r\n  onUpdateAccounts\r\n}) => {\r\n  const [\r\n    mortgageModalOpen,\r\n    closeMortgageModal,\r\n    openMortgageModal\r\n  ] = useFlagState(false);\r\n\r\n  const potentialMortageAccounts = budget.accounts.filter(\r\n    account => account.type === \"otherLiability\" && !account.on_budget\r\n  );\r\n  const mortgageAccountList = budget.accounts.filter(\r\n    ({ id }) => mortgageAccounts[id]\r\n  );\r\n\r\n  return (\r\n    <Fragment>\r\n      <SectionHeader>\r\n        <StrongText>Mortgage Accounts</StrongText>\r\n        <span onClick={openMortgageModal}>\r\n          <Icon icon=\"pencil\" />\r\n        </span>\r\n      </SectionHeader>\r\n      {mortgageAccountList.length ? (\r\n        mortgageAccountList.map(({ id, name }) => (\r\n          <SecondaryText key={id}>{name}</SecondaryText>\r\n        ))\r\n      ) : (\r\n        <EmptyText>No accounts marked as mortgage</EmptyText>\r\n      )}\r\n      <MinorText style={{ marginTop: 10 }}>\r\n        Mortgage accounts are used in the retirement calculator since it's a\r\n        significant expense you won't have in your retirement presumably.\r\n      </MinorText>\r\n      <Modal\r\n        open={mortgageModalOpen}\r\n        onClose={closeMortgageModal}\r\n        title=\"Mortgage Account\"\r\n      >\r\n        <AccountsSelectionForm\r\n          accounts={potentialMortageAccounts}\r\n          value={mortgageAccounts}\r\n          onChange={accountsObject => {\r\n            onUpdateAccounts({\r\n              type: \"mortgage\",\r\n              value: accountsObject\r\n            });\r\n          }}\r\n        />\r\n      </Modal>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nSettingsMortgageAccounts.propTypes = {\r\n  budget: PropTypes.shape({\r\n    accounts: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        type: PropTypes.string.isRequired,\r\n        on_budget: PropTypes.bool.isRequired,\r\n        id: PropTypes.string.isRequired\r\n      })\r\n    ).isRequired\r\n  }).isRequired,\r\n  mortgageAccounts: PropTypes.objectOf(PropTypes.bool).isRequired,\r\n  onUpdateAccounts: PropTypes.func.isRequired\r\n};\r\n\r\nexport default SettingsMortgageAccounts;\r\n","import React, { Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Section from \"./Section\";\r\nimport PageLayout from \"./PageLayout\";\r\nimport SettingsInvestmentAccounts from \"./SettingsInvestmentAccounts\";\r\nimport SettingsMortgageAccounts from \"./SettingsMortgageAccounts\";\r\n\r\nconst Space = styled.div`\r\n  height: 20px;\r\n`;\r\n\r\nconst SettingsPage = ({\r\n  budget,\r\n  historyAction,\r\n  investmentAccounts,\r\n  location,\r\n  mortgageAccounts,\r\n  sidebarTrigger,\r\n  title,\r\n  onUpdateAccounts\r\n}) => {\r\n  return (\r\n    <PageLayout\r\n      historyAction={historyAction}\r\n      location={location}\r\n      sidebarTrigger={sidebarTrigger}\r\n      title={title}\r\n      content={\r\n        <Fragment>\r\n          <Section>\r\n            <SettingsInvestmentAccounts\r\n              budget={budget}\r\n              investmentAccounts={investmentAccounts}\r\n              onUpdateAccounts={onUpdateAccounts}\r\n            />\r\n            <Space />\r\n            <SettingsMortgageAccounts\r\n              budget={budget}\r\n              mortgageAccounts={mortgageAccounts}\r\n              onUpdateAccounts={onUpdateAccounts}\r\n            />\r\n          </Section>\r\n        </Fragment>\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nSettingsPage.propTypes = {\r\n  budget: PropTypes.shape({\r\n    accounts: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        id: PropTypes.string.isRequired,\r\n        name: PropTypes.string.isRequired\r\n      })\r\n    ).isRequired\r\n  }).isRequired,\r\n  historyAction: PropTypes.string.isRequired,\r\n  investmentAccounts: PropTypes.objectOf(PropTypes.bool).isRequired,\r\n  location: PropTypes.string.isRequired,\r\n  mortgageAccounts: PropTypes.objectOf(PropTypes.bool).isRequired,\r\n  sidebarTrigger: PropTypes.node.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  onUpdateAccounts: PropTypes.func.isRequired\r\n};\r\n\r\nexport default SettingsPage;\r\n","import React, { memo } from \"react\";\r\nimport { Switch, Route } from \"react-router\";\r\nimport moment from \"moment\";\r\nimport pages, { makeLink } from \"../pages\";\r\nimport CurrentMonthPage from \"./CurrentMonthPage\";\r\nimport IncomePage from \"./IncomePage\";\r\nimport CurrentMonthGroupPage from \"./CurrentMonthGroupPage\";\r\nimport CurrentMonthCategoryPage from \"./CurrentMonthCategoryPage\";\r\nimport GroupsPage from \"./GroupsPage\";\r\nimport GroupPage from \"./GroupPage\";\r\nimport { Link } from \"react-router-dom\";\r\nimport CategoriesState from \"./CategoriesState\";\r\nimport { notAny, simpleMemoize } from \"../dataUtils\";\r\nimport {\r\n  getFirstMonth,\r\n  getTransactionMonth,\r\n  isIncome,\r\n  isStartingBalanceOrReconciliation,\r\n  isTransfer\r\n} from \"../budgetUtils\";\r\nimport { useMonthExclusions } from \"../commonHooks\";\r\nimport CategoryPage from \"./CategoryPage\";\r\nimport CategoryPayeePage from \"./CategoryPayeePage\";\r\nimport IncomeVsExpensesPage from \"./IncomeVsExpensesPage\";\r\nimport NetWorthPage from \"./NetWorthPage\";\r\nimport InvestmentsPage from \"./InvestmentsPage\";\r\nimport ProjectionsPage from \"./ProjectionsPage\";\r\nimport SettingsPage from \"./SettingsPage\";\r\n\r\nconst getFilteredTransactions = simpleMemoize(\r\n  (budget, investmentAccounts, excludeFirstMonth, excludeLastMonth) => {\r\n    const firstMonth = getFirstMonth(budget);\r\n    const lastMonth = moment().format(\"YYYY-MM\");\r\n    return budget.transactions.filter(\r\n      notAny([\r\n        isStartingBalanceOrReconciliation(budget),\r\n        isTransfer(investmentAccounts),\r\n        transaction =>\r\n          excludeFirstMonth && getTransactionMonth(transaction) === firstMonth,\r\n        transaction =>\r\n          excludeLastMonth && getTransactionMonth(transaction) === lastMonth\r\n      ])\r\n    );\r\n  }\r\n);\r\n\r\nconst getFilteredSpendingTransactions = simpleMemoize(\r\n  (budget, investmentAccounts, excludeFirstMonth, excludeLastMonth) =>\r\n    getFilteredTransactions(\r\n      budget,\r\n      investmentAccounts,\r\n      excludeFirstMonth,\r\n      excludeLastMonth\r\n    ).filter(transaction => !isIncome(budget)(transaction))\r\n);\r\n\r\nconst PageContent = props => {\r\n  const {\r\n    budget,\r\n    currentMonth,\r\n    historyAction,\r\n    investmentAccounts,\r\n    location,\r\n    mortgageAccounts,\r\n    sidebarTrigger,\r\n    onUpdateAccounts\r\n  } = props;\r\n  const {\r\n    excludeFirstMonth,\r\n    excludeLastMonth,\r\n    months,\r\n    onSetExclusion\r\n  } = useMonthExclusions(budget);\r\n\r\n  if (!budget) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Switch>\r\n      <Route\r\n        path={pages.currentMonth.path}\r\n        exact\r\n        render={() => (\r\n          <CurrentMonthPage\r\n            budget={budget}\r\n            currentMonth={currentMonth}\r\n            investmentAccounts={investmentAccounts}\r\n            historyAction={historyAction}\r\n            location={location}\r\n            sidebarTrigger={sidebarTrigger}\r\n            title={pages.currentMonth.title}\r\n          />\r\n        )}\r\n      />\r\n      <Route\r\n        path={pages.currentMonthGroup.path}\r\n        exact\r\n        render={({ match }) => (\r\n          <CurrentMonthGroupPage\r\n            budget={budget}\r\n            categoryGroupId={match.params.categoryGroupId}\r\n            currentMonth={currentMonth}\r\n            historyAction={historyAction}\r\n            location={location}\r\n            sidebarTrigger={sidebarTrigger}\r\n            title={pages.currentMonthGroup.title(match.params, budget)}\r\n          />\r\n        )}\r\n      />\r\n      <Route\r\n        path={pages.currentMonthCategory.path}\r\n        exact\r\n        render={({ match }) => (\r\n          <CurrentMonthCategoryPage\r\n            categoryId={match.params.categoryId}\r\n            budget={budget}\r\n            currentMonth={currentMonth}\r\n            categoryGroupId={match.params.categoryGroupId}\r\n            historyAction={historyAction}\r\n            location={location}\r\n            sidebarTrigger={sidebarTrigger}\r\n            title={pages.currentMonthCategory.title(match.params, budget)}\r\n          />\r\n        )}\r\n      />\r\n      <Route\r\n        path={pages.income.path}\r\n        exact\r\n        render={() => (\r\n          <IncomePage\r\n            investmentAccounts={investmentAccounts}\r\n            budget={budget}\r\n            historyAction={historyAction}\r\n            location={location}\r\n            sidebarTrigger={sidebarTrigger}\r\n            title={pages.income.title}\r\n          />\r\n        )}\r\n      />\r\n      <Route\r\n        path={pages.incomeVsExpenses.path}\r\n        exact\r\n        render={() => {\r\n          const filteredTransactions = getFilteredTransactions(\r\n            props.budget,\r\n            props.investmentAccounts,\r\n            excludeFirstMonth,\r\n            excludeLastMonth\r\n          );\r\n\r\n          return (\r\n            <IncomeVsExpensesPage\r\n              budget={budget}\r\n              excludeFirstMonth={excludeFirstMonth}\r\n              excludeLastMonth={excludeLastMonth}\r\n              investmentAccounts={investmentAccounts}\r\n              historyAction={historyAction}\r\n              location={location}\r\n              sidebarTrigger={sidebarTrigger}\r\n              title={pages.incomeVsExpenses.title}\r\n              transactions={filteredTransactions}\r\n              onSetExclusion={onSetExclusion}\r\n            />\r\n          );\r\n        }}\r\n      />\r\n      <Route\r\n        path={pages.netWorth.path}\r\n        exact\r\n        render={() => (\r\n          <NetWorthPage\r\n            budget={budget}\r\n            historyAction={historyAction}\r\n            investmentAccounts={investmentAccounts}\r\n            location={location}\r\n            mortgageAccounts={mortgageAccounts}\r\n            sidebarTrigger={sidebarTrigger}\r\n            title={pages.netWorth.title}\r\n          />\r\n        )}\r\n      />\r\n      <Route\r\n        path={pages.investments.path}\r\n        exact\r\n        render={() => (\r\n          <InvestmentsPage\r\n            budget={budget}\r\n            investmentAccounts={investmentAccounts}\r\n            title={pages.investments.title}\r\n            historyAction={historyAction}\r\n            location={location}\r\n            sidebarTrigger={sidebarTrigger}\r\n          />\r\n        )}\r\n      />\r\n      <Route\r\n        path={pages.projections.path}\r\n        exact\r\n        render={() => (\r\n          <ProjectionsPage\r\n            budget={budget}\r\n            investmentAccounts={investmentAccounts}\r\n            mortgageAccounts={mortgageAccounts}\r\n            title={pages.projections.title}\r\n            historyAction={historyAction}\r\n            location={location}\r\n            sidebarTrigger={sidebarTrigger}\r\n          />\r\n        )}\r\n      />\r\n      <Route\r\n        path={pages.settings.path}\r\n        exact\r\n        render={() => (\r\n          <SettingsPage\r\n            budget={budget}\r\n            historyAction={historyAction}\r\n            investmentAccounts={investmentAccounts}\r\n            location={location}\r\n            mortgageAccounts={mortgageAccounts}\r\n            sidebarTrigger={sidebarTrigger}\r\n            title={pages.settings.title}\r\n            onUpdateAccounts={onUpdateAccounts}\r\n          />\r\n        )}\r\n      />\r\n      <Route\r\n        path={pages.groups.path}\r\n        render={() => {\r\n          const filteredTransactions = getFilteredSpendingTransactions(\r\n            budget,\r\n            investmentAccounts,\r\n            excludeFirstMonth,\r\n            excludeLastMonth\r\n          );\r\n\r\n          return (\r\n            <CategoriesState action={historyAction} location={location}>\r\n              {({\r\n                selectedMonth,\r\n                selectedGroupId,\r\n                selectedCategoryId,\r\n                selectedPayeeId,\r\n                onSelectMonth,\r\n                onSelectGroup,\r\n                onSelectCategory,\r\n                onSelectPayee\r\n              }) => (\r\n                <Switch>\r\n                  <Route\r\n                    path={pages.groups.path}\r\n                    exact\r\n                    render={() => (\r\n                      <GroupsPage\r\n                        budget={budget}\r\n                        excludeFirstMonth={excludeFirstMonth}\r\n                        excludeLastMonth={excludeLastMonth}\r\n                        historyAction={historyAction}\r\n                        location={location}\r\n                        months={months}\r\n                        selectedGroupId={selectedGroupId}\r\n                        selectedMonth={selectedMonth}\r\n                        sidebarTrigger={sidebarTrigger}\r\n                        title={pages.groups.title}\r\n                        transactions={filteredTransactions}\r\n                        onSelectGroup={onSelectGroup}\r\n                        onSetExclusion={onSetExclusion}\r\n                        onSelectMonth={onSelectMonth}\r\n                      />\r\n                    )}\r\n                  />\r\n                  <Route\r\n                    path={pages.group.path}\r\n                    exact\r\n                    render={({ match }) => (\r\n                      <GroupPage\r\n                        budget={budget}\r\n                        categoryGroupId={match.params.categoryGroupId}\r\n                        excludeFirstMonth={excludeFirstMonth}\r\n                        excludeLastMonth={excludeLastMonth}\r\n                        historyAction={historyAction}\r\n                        location={location}\r\n                        months={months}\r\n                        selectedMonth={selectedMonth}\r\n                        selectedCategoryId={selectedCategoryId}\r\n                        sidebarTrigger={sidebarTrigger}\r\n                        title={pages.group.title(match.params, budget)}\r\n                        transactions={filteredTransactions}\r\n                        onSelectCategory={onSelectCategory}\r\n                        onSelectMonth={onSelectMonth}\r\n                        onSetExclusion={onSetExclusion}\r\n                      />\r\n                    )}\r\n                  />\r\n                  <Route\r\n                    path={pages.category.path}\r\n                    exact\r\n                    render={({ match }) => (\r\n                      <CategoryPage\r\n                        budget={budget}\r\n                        categoryId={match.params.categoryId}\r\n                        excludeFirstMonth={excludeFirstMonth}\r\n                        excludeLastMonth={excludeLastMonth}\r\n                        historyAction={historyAction}\r\n                        location={location}\r\n                        months={months}\r\n                        selectedMonth={selectedMonth}\r\n                        selectedPayeeId={selectedPayeeId}\r\n                        sidebarTrigger={sidebarTrigger}\r\n                        title={pages.category.title(match.params, budget)}\r\n                        transactions={filteredTransactions}\r\n                        onSetExclusion={onSetExclusion}\r\n                        onSelectMonth={onSelectMonth}\r\n                        onSelectPayee={onSelectPayee}\r\n                      />\r\n                    )}\r\n                  />\r\n                  <Route\r\n                    path={pages.categoryPayee.path}\r\n                    exact\r\n                    render={({ match }) => (\r\n                      <CategoryPayeePage\r\n                        budget={budget}\r\n                        categoryId={match.params.categoryId}\r\n                        excludeFirstMonth={excludeFirstMonth}\r\n                        excludeLastMonth={excludeLastMonth}\r\n                        historyAction={historyAction}\r\n                        location={location}\r\n                        months={months}\r\n                        payeeId={match.params.payeeId}\r\n                        selectedMonth={selectedMonth}\r\n                        sidebarTrigger={sidebarTrigger}\r\n                        title={pages.categoryPayee.title(match.params, budget)}\r\n                        transactions={filteredTransactions}\r\n                        onSetExclusion={onSetExclusion}\r\n                        onSelectMonth={onSelectMonth}\r\n                      />\r\n                    )}\r\n                  />\r\n                </Switch>\r\n              )}\r\n            </CategoriesState>\r\n          );\r\n        }}\r\n      />\r\n      <Route\r\n        render={() => (\r\n          <div style={{ padding: 20 }}>\r\n            <Link\r\n              to={makeLink(pages.currentMonth.path, {\r\n                budgetId: budget.id\r\n              })}\r\n            >\r\n              Return to {pages.currentMonth.title}\r\n            </Link>\r\n          </div>\r\n        )}\r\n      />\r\n    </Switch>\r\n  );\r\n};\r\n\r\nconst areEqual = (prevProps, nextProps) =>\r\n  [\r\n    \"budget\",\r\n    \"currentMonth\",\r\n    \"historyAction\",\r\n    \"investmentAccounts\",\r\n    \"location\",\r\n    \"mortgageAccounts\"\r\n  ].every(key => prevProps[key] === nextProps[key]);\r\n\r\nexport default memo(PageContent, areEqual);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Section from \"./Section\";\r\nimport { PageTitle, StrongText, SecondaryText } from \"./typeComponents\";\r\nimport { PrimaryButton } from \"./Button\";\r\n\r\nconst Unauthorized = ({ onAuthorize }) => (\r\n  <Section>\r\n    <PageTitle>Budget Reports</PageTitle>\r\n    <div style={{ marginBottom: 10 }}>Get various insights from your YNAB account.</div>\r\n    <PrimaryButton onClick={onAuthorize}>\r\n      Authorize YNAB\r\n    </PrimaryButton>\r\n    <StrongText style={{ marginTop: 30 }}>Privacy Policy</StrongText>\r\n    <SecondaryText>\r\n      This website does not store any information from you or your YNAB account\r\n      on it's server. All data retrieved from the YNAB API is stored only in\r\n      your browser's local storage and is never transmitted to any other location or\r\n      third-party.\r\n    </SecondaryText>\r\n  </Section>\r\n);\r\n\r\nUnauthorized.propTypes = {\r\n  onAuthorize: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Unauthorized;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n  padding: 10px 20px;\r\n`;\r\n\r\n\r\nconst ErrorPage = ({ message }) => (\r\n  <Container>\r\n    <h3>{message}</h3>\r\n    <div>\r\n      <Link to=\"/\">Home</Link>\r\n    </div>\r\n  </Container>\r\n);\r\n\r\nErrorPage.propTypes = {\r\n  message: PropTypes.string.isRequired\r\n};\r\n\r\nexport default ErrorPage;\r\n","import React from \"react\";\r\nimport ErrorPage from \"./ErrorPage\";\r\n\r\nconst NotFound = () => <ErrorPage message=\"Page not found\" />;\r\n\r\nexport default NotFound;\r\n","/* global Rollbar */\r\nimport React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport ErrorPage from \"./ErrorPage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n  static propTypes = {\r\n    children: PropTypes.node.isRequired,\r\n    message: PropTypes.string\r\n  };\r\n\r\n  static defaultProps = {\r\n    message: \"Something went wrong\"\r\n  };\r\n\r\n  state = { hasError: false };\r\n\r\n  componentDidCatch(error) {\r\n    Rollbar.error(error);\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <ErrorPage message={this.props.message} />;\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\nimport pages, { makeLink } from \"../pages\";\r\nimport { StrongText } from \"./typeComponents\";\r\nimport Section from \"./Section\";\r\nimport Loading from \"./Loading\";\r\n\r\nclass Budgets extends Component {\r\n  static propTypes = {\r\n    budgets: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        id: PropTypes.string.isRequired,\r\n        name: PropTypes.string.isRequired\r\n      })\r\n    ).isRequired,\r\n    budgetsLoaded: PropTypes.bool.isRequired,\r\n    onRequestBudgets: PropTypes.func.isRequired\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (!this.props.budgetsLoaded) {\r\n      this.props.onRequestBudgets();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { budgets, budgetsLoaded } = this.props;\r\n\r\n    if (!budgetsLoaded) {\r\n      return <Loading />;\r\n    }\r\n\r\n    return (\r\n      <Section>\r\n        <StrongText>Select a budget:</StrongText>\r\n        {budgets.map(({ id, name }) => (\r\n          <div key={id}>\r\n            <Link to={makeLink(pages.currentMonth.path, { budgetId: id })}>\r\n              {name}\r\n            </Link>\r\n          </div>\r\n        ))}\r\n      </Section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Budgets;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport moment from \"moment\";\r\nimport get from \"lodash/fp/get\";\r\nimport keyBy from \"lodash/fp/keyBy\";\r\nimport {\r\n  getBudgets,\r\n  getUpdatedBudget,\r\n  AUTHORIZE_URL,\r\n  setLastLocation\r\n} from \"../ynabRepo\";\r\nimport { setSetting, getSetting } from \"../uiRepo\";\r\nimport PageWrapper from \"./PageWrapper\";\r\nimport PageContent from \"./PageContent\";\r\nimport Unauthorized from \"./Unauthorized\";\r\nimport NotFound from \"./NotFound\";\r\nimport ErrorBoundary from \"./ErrorBoundary\";\r\nimport Budgets from \"./Budgets\";\r\nimport CurrencyContext from \"./CurrencyContext\";\r\n\r\nclass App extends Component {\r\n  static propTypes = {\r\n    hasToken: PropTypes.bool.isRequired\r\n  };\r\n\r\n  state = {\r\n    authorized: true,\r\n    budgetsLoaded: false,\r\n    budgetIds: [],\r\n    budgets: {},\r\n    budgetDetails: {},\r\n    currentMonth: moment().format(\"YYYY-MM\")\r\n  };\r\n\r\n  handleRequestBudgets = callback => {\r\n    getBudgets().then(({ budgets }) => {\r\n      this.setState(\r\n        {\r\n          budgetsLoaded: true,\r\n          budgetIds: budgets.map(b => b.id),\r\n          budgets: keyBy(\"id\")(budgets)\r\n        },\r\n        callback\r\n      );\r\n    });\r\n  };\r\n\r\n  handleRequestBudget = id => {\r\n    getUpdatedBudget(id).then(({ budget, authorized }) => {\r\n      this.setState(state => ({\r\n        ...state,\r\n        authorized,\r\n        budgetDetails: {\r\n          ...state.budgetDetails,\r\n          [id]: budget\r\n        }\r\n      }));\r\n    });\r\n  };\r\n\r\n  handleAuthorize = () => {\r\n    setLastLocation();\r\n    window.location.replace(AUTHORIZE_URL);\r\n  };\r\n\r\n  render() {\r\n    const { hasToken } = this.props;\r\n    const {\r\n      authorized,\r\n      budgetsLoaded,\r\n      budgetIds,\r\n      budgets,\r\n      budgetDetails,\r\n      currentMonth\r\n    } = this.state;\r\n\r\n    if (!hasToken) {\r\n      return <Unauthorized onAuthorize={this.handleAuthorize} />;\r\n    }\r\n\r\n    return (\r\n      <ErrorBoundary>\r\n        <Switch>\r\n          <Route\r\n            path=\"/\"\r\n            exact\r\n            render={() => (\r\n              <Budgets\r\n                budgets={budgetIds.map(id => budgets[id])}\r\n                budgetsLoaded={budgetsLoaded}\r\n                onRequestBudgets={this.handleRequestBudgets}\r\n              />\r\n            )}\r\n          />\r\n          <Route\r\n            path=\"/budgets/:budgetId\"\r\n            render={({ match, history, location }) => {\r\n              const { budgetId } = match.params;\r\n              const budget = budgetDetails[budgetId];\r\n\r\n              return (\r\n                <PageWrapper\r\n                  authorized={authorized}\r\n                  budgetId={budgetId}\r\n                  budgetLoaded={!!budget}\r\n                  hasMultipleBudgets={budgetIds.length > 1}\r\n                  location={location.pathname}\r\n                  onAuthorize={this.handleAuthorize}\r\n                  onRequestBudget={this.handleRequestBudget}\r\n                >\r\n                  {({ sidebarTrigger }) => (\r\n                    <CurrencyContext.Provider\r\n                      value={get(\"currencyFormat\")(budget)}\r\n                    >\r\n                      <PageContent\r\n                        sidebarTrigger={sidebarTrigger}\r\n                        historyAction={history.action}\r\n                        location={location.pathname}\r\n                        budget={budget}\r\n                        currentMonth={currentMonth}\r\n                        investmentAccounts={getSetting(\r\n                          \"investmentAccounts\",\r\n                          budgetId\r\n                        )}\r\n                        mortgageAccounts={getSetting(\r\n                          \"mortgageAccounts\",\r\n                          budgetId\r\n                        )}\r\n                        onUpdateAccounts={({ type, value }) => {\r\n                          if (type === \"investment\") {\r\n                            setSetting(\"investmentAccounts\", budgetId, value);\r\n                          }\r\n                          if (type === \"mortgage\") {\r\n                            setSetting(\"mortgageAccounts\", budgetId, value);\r\n                          }\r\n                          this.forceUpdate();\r\n                        }}\r\n                      />\r\n                    </CurrencyContext.Provider>\r\n                  )}\r\n                </PageWrapper>\r\n              );\r\n            }}\r\n          />\r\n          <Route component={NotFound} />\r\n        </Switch>\r\n      </ErrorBoundary>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { HashRouter } from \"react-router-dom\";\r\nimport { getAuthorizeToken, initializeYnabApi } from \"./ynabRepo\";\r\nimport App from \"./components/App\";\r\n\r\nconst token = getAuthorizeToken();\r\n\r\nif (token) {\r\n  initializeYnabApi(token);\r\n}\r\n\r\nReactDOM.render(\r\n  <HashRouter>\r\n    <App hasToken={!!token} />\r\n  </HashRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}